import { privateKeyToAccount } from "viem/accounts";
import { defineChain } from "../chains/utils.js";
import { getRpcClient } from "../rpc/rpc.js";
import { eth_sendRawTransaction } from "../rpc/actions/eth_sendRawTransaction.js";
/**
 * Get an `Account` object from a private key.
 * @param options - The options for `privateKeyAccount`
 * Refer to the type [`PrivateKeyAccountOptions`](https://portal.thirdweb.com/references/typescript/v5/PrivateKeyAccountOptions)
 * @returns The `Account` object that represents the private key
 * @example
 * ```ts
 * import { privateKeyAccount } from "thirdweb/wallets"
 *
 * const wallet = privateKeyAccount({
 *  client,
 *  privateKey: "...",
 * });
 * ```
 * @wallet
 */
export function privateKeyAccount(options) {
    if (!options.privateKey.startsWith("0x")) {
        options.privateKey = "0x" + options.privateKey;
    }
    const viemAccount = privateKeyToAccount(options.privateKey);
    return viemToThirdwebAccount(viemAccount, options.client);
}
/**
 * @internal
 */
export function viemToThirdwebAccount(viemAccount, client) {
    const account = {
        address: viemAccount.address,
        sendTransaction: async (
        // TODO: figure out how we would pass our "chain" object in here?
        // maybe we *do* actually have to take in a tx object instead of the raw tx?
        tx) => {
            const rpcRequest = getRpcClient({
                client: client,
                chain: defineChain(tx.chainId),
            });
            const signedTx = await viemAccount.signTransaction(tx);
            const transactionHash = await eth_sendRawTransaction(rpcRequest, signedTx);
            return {
                transactionHash,
            };
        },
        signTransaction: viemAccount.signTransaction,
        signMessage: viemAccount.signMessage,
        signTypedData: viemAccount.signTypedData,
    };
    return account;
}
//# sourceMappingURL=private-key.js.map