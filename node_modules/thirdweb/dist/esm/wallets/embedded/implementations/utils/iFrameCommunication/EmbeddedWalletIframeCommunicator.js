import { EMBEDDED_WALLET_PATH } from "../../constants/settings.js";
import { LocalStorage } from "../Storage/LocalStorage.js";
import { IframeCommunicator } from "./IframeCommunicator.js";
/**
 * @internal
 */
export class EmbeddedWalletIframeCommunicator extends IframeCommunicator {
    /**
     * @internal
     */
    constructor({ clientId, baseUrl }) {
        super({
            iframeId: EMBEDDED_WALLET_IFRAME_ID,
            link: createEmbeddedWalletIframeLink({
                clientId,
                path: EMBEDDED_WALLET_PATH,
                baseUrl,
            }).href,
            baseUrl,
            container: document.body,
        });
        Object.defineProperty(this, "clientId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.clientId = clientId;
    }
    /**
     * @internal
     */
    async onIframeLoadedInitVariables() {
        const localStorage = new LocalStorage({
            clientId: this.clientId,
        });
        return {
            authCookie: await localStorage.getAuthCookie(),
            deviceShareStored: await localStorage.getDeviceShare(),
            walletUserId: await localStorage.getWalletUserId(),
            clientId: this.clientId,
        };
    }
}
// This is the URL and ID tag of the iFrame that we communicate with
/**
 * @internal
 */
export function createEmbeddedWalletIframeLink({ clientId, baseUrl, path, queryParams, }) {
    const embeddedWalletUrl = new URL(`${path}`, baseUrl);
    if (queryParams) {
        for (const queryKey of Object.keys(queryParams)) {
            embeddedWalletUrl.searchParams.set(queryKey, queryParams[queryKey]?.toString() || "");
        }
    }
    embeddedWalletUrl.searchParams.set("clientId", clientId);
    return embeddedWalletUrl;
}
export const EMBEDDED_WALLET_IFRAME_ID = "thirdweb-embedded-wallet-iframe";
//# sourceMappingURL=EmbeddedWalletIframeCommunicator.js.map