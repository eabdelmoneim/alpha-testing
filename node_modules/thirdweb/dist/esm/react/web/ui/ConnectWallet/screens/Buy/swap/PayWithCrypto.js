import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { ChevronDownIcon } from "@radix-ui/react-icons";
import { useChainQuery } from "../../../../../../core/hooks/others/useChainQuery.js";
import { useWalletBalance } from "../../../../../../core/hooks/others/useWalletBalance.js";
import { useActiveAccount } from "../../../../../../core/hooks/wallets/wallet-hooks.js";
import { Skeleton } from "../../../../components/Skeleton.js";
import { Container, Line } from "../../../../components/basic.js";
import { Button } from "../../../../components/buttons.js";
import { useCustomTheme } from "../../../../design-system/CustomThemeProvider.js";
import { StyledDiv } from "../../../../design-system/elements.js";
import { spacing, fontSize, iconSize, radius, } from "../../../../design-system/index.js";
import { formatTokenBalance } from "../../TokenSelector.js";
import { Text } from "../../../../components/text.js";
import { isNativeToken } from "../../nativeToken.js";
import { TokenSelectorButton } from "./TokenSelector.js";
import { ChainIcon } from "../../../../components/ChainIcon.js";
import { WalletIcon } from "../../../icons/WalletIcon.js";
import { formatNumber } from "../../../../../../../utils/formatNumber.js";
/**
 * Shows an amount "value" and renders the selected token and chain
 * It also renders the buttons to select the token and chain
 * It also renders the balance of active wallet for the selected token in selected chain
 * @internal
 */
export function PayWithCrypto(props) {
    const chainQuery = useChainQuery(props.chain);
    const activeAccount = useActiveAccount();
    const balanceQuery = useWalletBalance({
        address: activeAccount?.address,
        chain: props.chain,
        tokenAddress: isNativeToken(props.token) ? undefined : props.token.address,
    });
    return (_jsx("div", { children: _jsxs(BorderBox, { children: [_jsxs(Container, { px: "sm", flex: "row", style: {
                        flexWrap: "nowrap",
                        justifyContent: "space-between",
                    }, children: [_jsx(TokenSelectorButton, { onClick: props.onTokenClick, style: {
                                border: "none",
                                paddingInline: 0,
                            }, token: props.token, chain: props.chain }), _jsx("div", { style: {
                                flexGrow: 1,
                                flexShrink: 1,
                                display: "flex",
                                alignItems: "center",
                                overflow: "hidden",
                                textOverflow: "ellipsis",
                                whiteSpace: "nowrap",
                                justifyContent: "flex-end",
                            }, children: props.isLoading ? (_jsx(Skeleton, { width: "120px", height: fontSize.md })) : (_jsx(Text, { size: "lg", color: props.value ? "primaryText" : "secondaryText", style: {}, children: formatNumber(Number(props.value), 4) || "--" })) })] }), _jsx(Line, {}), _jsxs(Container, { flex: "row", px: "sm", center: "y", children: [_jsx(Container, { flex: "row", style: {
                                flexGrow: 1,
                                flexWrap: "nowrap",
                            }, children: _jsxs(Button, { variant: "outline", style: {
                                    fontSize: fontSize.sm,
                                    border: "none",
                                    paddingInline: 0,
                                    paddingBlock: spacing.sm,
                                }, gap: "xs", onClick: props.onChainClick, children: [_jsx(ChainIcon, { chain: chainQuery.data, size: iconSize.sm }), _jsxs(Container, { color: "secondaryText", flex: "row", center: "y", gap: "xxs", children: [chainQuery.data?.name ? (_jsx(Text, { color: "secondaryText", size: "sm", children: chainQuery.data.name })) : (_jsx(Skeleton, { width: "90px", height: fontSize.xs })), _jsx(ChevronDownIcon, { width: iconSize.sm, height: iconSize.sm })] })] }) }), _jsxs(Container, { flex: "row", gap: "xxs", center: "y", color: "secondaryText", children: [_jsx(WalletIcon, { size: iconSize.xs }), balanceQuery.data ? (_jsx(Text, { size: "xs", color: "secondaryText", children: formatTokenBalance(balanceQuery.data, true) })) : (_jsx(Skeleton, { width: "70px", height: fontSize.xs }))] })] })] }) }));
}
const BorderBox = /* @__PURE__ */ StyledDiv(() => {
    const theme = useCustomTheme();
    return {
        border: `1px solid ${theme.colors.borderColor}`,
        borderRadius: radius.lg,
    };
});
//# sourceMappingURL=PayWithCrypto.js.map