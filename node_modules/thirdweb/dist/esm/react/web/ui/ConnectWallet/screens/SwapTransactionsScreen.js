import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useMemo, useState, useSyncExternalStore } from "react";
import { Container, Line, ModalHeader } from "../../components/basic.js";
import { Spacer } from "../../components/Spacer.js";
import { fontSize, iconSize, radius, spacing, } from "../../design-system/index.js";
import { StyledAnchor, StyledDiv } from "../../design-system/elements.js";
import { useCustomTheme } from "../../design-system/CustomThemeProvider.js";
import { Text } from "../../components/text.js";
import { ArrowRightIcon, CrossCircledIcon } from "@radix-ui/react-icons";
import { fadeInAnimation } from "../../design-system/animations.js";
import { Spinner } from "../../components/Spinner.js";
import { Button } from "../../components/buttons.js";
import { useChainQuery } from "../../../../core/hooks/others/useChainQuery.js";
import { useActiveAccount, useActiveWalletChain, } from "../../../../core/hooks/wallets/wallet-hooks.js";
import { useBuyWithCryptoHistory } from "../../../../core/hooks/pay/useBuyWithCryptoHistory.js";
import { BuyIcon } from "../icons/BuyIcon.js";
import { CryptoIcon } from "../icons/CryptoIcon.js";
import { Skeleton } from "../../components/Skeleton.js";
import { defineChain } from "../../../../../chains/utils.js";
import { swapTransactionsStore } from "./Buy/swap/pendingSwapTx.js";
import { formatNumber } from "../../../../../utils/formatNumber.js";
const PAGE_SIZE = 10;
/**
 * @internal
 */
export function SwapTransactionsScreen(props) {
    const [pageIndex, setPageIndex] = useState(0);
    const _historyQuery = useSwapTransactions(pageIndex, props.client);
    const inMemoryPendingTxs = useSyncExternalStore(swapTransactionsStore.subscribe, swapTransactionsStore.getValue);
    const txInfosToShow = [];
    const txHashSet = new Set();
    _historyQuery.data?.page.forEach((tx) => {
        txHashSet.add(tx.source.transactionHash);
    });
    // add in-memory pending transactions
    inMemoryPendingTxs.forEach((tx) => {
        if (pageIndex > 0) {
            return;
        }
        // if tx is already in history endpoint, don't add it
        if (txHashSet.has(tx.transactionHash)) {
            return;
        }
        txInfosToShow.push({
            fromChainId: tx.from.chainId,
            transactionHash: tx.transactionHash,
            boughtTokenAmount: tx.to.value,
            boughtTokenSymbol: tx.to.symbol,
            status: "PENDING",
        });
    });
    // Add data from endpoint
    _historyQuery.data?.page.forEach((tx) => {
        txInfosToShow.push({
            fromChainId: tx.source.token.chainId,
            transactionHash: tx.source.transactionHash,
            boughtTokenAmount: tx.destination?.amount || tx.quote.toAmount,
            boughtTokenSymbol: tx.destination?.token.symbol || tx.quote.toToken.symbol || "",
            status: tx.status,
            subStatus: tx.subStatus,
        });
    });
    const activeChain = useActiveWalletChain();
    const chainQuery = useChainQuery(activeChain);
    const activeAccount = useActiveAccount();
    const noTransactions = txInfosToShow.length === 0;
    const hidePagination = !_historyQuery.data ||
        (_historyQuery.data && !_historyQuery.data.hasNextPage && pageIndex === 0);
    return (_jsxs(Container, { animate: "fadein", children: [_jsx(Container, { p: "lg", children: _jsx(ModalHeader, { title: "Transactions", onBack: props.onBack }) }), _jsxs(Container, { scrollY: true, flex: "column", fullHeight: true, style: {
                    minHeight: "250px",
                    maxHeight: "370px",
                }, children: [_jsxs(Container, { flex: "column", gap: "sm", px: "lg", expand: true, children: [noTransactions && !_historyQuery.isLoading && (_jsxs(Container, { flex: "column", gap: "md", center: "both", color: "secondaryText", style: {
                                    minHeight: "250px",
                                }, children: [_jsx(CrossCircledIcon, { width: iconSize.xl, height: iconSize.xl }), _jsx(Text, { children: " No Transactions " })] })), noTransactions && _historyQuery.isLoading && (_jsx(Container, { flex: "row", center: "both", style: {
                                    minHeight: "250px",
                                }, children: _jsx(Spinner, { size: "xl", color: "accentText" }) })), txInfosToShow.map((txInfo) => {
                                return (_jsx(TransactionInfo, { txInfo: txInfo }, txInfo.transactionHash));
                            }), _historyQuery.isLoading && txInfosToShow.length > 0 && (_jsxs(_Fragment, { children: [_jsx(Skeleton, { width: "100%", height: "68px" }), _jsx(Skeleton, { width: "100%", height: "68px" }), _jsx(Skeleton, { width: "100%", height: "68px" })] }))] }), _jsx(Container, { p: "lg", children: _historyQuery.data && !hidePagination && (_jsxs("div", { style: {
                                display: "grid",
                                gridTemplateColumns: "1fr 1fr",
                                gap: spacing.sm,
                            }, children: [_jsxs(Button, { variant: "outline", gap: "xs", disabled: pageIndex === 0, "data-disabled": pageIndex === 0, style: {
                                        fontSize: fontSize.sm,
                                        paddingBlock: spacing.sm,
                                    }, onClick: () => {
                                        setPageIndex((prev) => prev - 1);
                                    }, children: [_jsx(ArrowRightIcon, { width: iconSize.sm, height: iconSize.sm, style: {
                                                transform: "rotate(180deg)",
                                            } }), "Prev"] }), _jsxs(Button, { variant: "outline", gap: "xs", disabled: !_historyQuery.data.hasNextPage, "data-disabled": !_historyQuery.data.hasNextPage, style: {
                                        fontSize: fontSize.sm,
                                        paddingBlock: spacing.sm,
                                    }, onClick: () => {
                                        setPageIndex((prev) => prev + 1);
                                    }, children: ["Next", _jsx(ArrowRightIcon, { width: iconSize.sm, height: iconSize.sm })] })] })) })] }), _jsx(Line, {}), _jsx(Container, { p: "lg", children: _jsx(ButtonLink, { fullWidth: true, variant: "accent", href: chainQuery.data?.explorers?.[0]?.url +
                        "/address/" +
                        activeAccount?.address, target: "_blank", as: "a", style: {
                        textDecoration: "none",
                        color: "inherit",
                    }, children: "View on Explorer" }) })] }));
}
/**
 * @internal
 */
export function useSwapTransactions(pageIndex, client) {
    const account = useActiveAccount();
    const historyQuery = useBuyWithCryptoHistory({
        walletAddress: account?.address || "",
        start: pageIndex * PAGE_SIZE,
        count: PAGE_SIZE,
        client,
    }, {
        // 30 seconds
        refetchInterval: 30 * 1000,
    });
    return historyQuery;
}
function TransactionInfo(props) {
    const { fromChainId, transactionHash, boughtTokenAmount, boughtTokenSymbol, status, } = props.txInfo;
    const fromChain = useMemo(() => defineChain(fromChainId), [fromChainId]);
    const chainQuery = useChainQuery(fromChain);
    const statusMeta = getStatusMeta(status, props.txInfo.subStatus);
    return (_jsx(TxHashLink, { href: `${chainQuery.data?.explorers?.[0]?.url || ""}/tx/${transactionHash}`, target: "_blank", children: _jsxs(Container, { flex: "row", center: "y", gap: "md", children: [_jsxs(IconBox, { "data-box": true, children: [_jsx(BuyIcon, { size: iconSize.sm }), _jsx("div", { style: {
                                position: "absolute",
                                bottom: 0,
                                right: 0,
                                transform: "translate(30%, 30%)",
                            }, children: _jsx(CryptoIcon, { size: iconSize.sm }) })] }), _jsxs("div", { style: {
                        flex: 1,
                    }, children: [_jsxs(Container, { flex: "row", gap: "xs", center: "y", style: {
                                justifyContent: "space-between",
                            }, children: [_jsx(Text, { color: "primaryText", children: " Buy" }), _jsxs(Text, { size: "sm", color: "primaryText", children: ["+ ", formatNumber(Number(boughtTokenAmount), 4), " ", boughtTokenSymbol] }), " "] }), _jsx(Spacer, { y: "xs" }), _jsxs(Container, { flex: "row", center: "y", gap: "xxs", style: {
                                justifyContent: "space-between",
                            }, children: [_jsxs(Container, { flex: "row", gap: "xxs", center: "y", children: [_jsx(Text, { size: "sm", color: statusMeta.color, children: statusMeta.status }), statusMeta.loading && _jsx(Spinner, { size: "xs", color: "accentText" })] }), chainQuery.data?.name ? (_jsxs(Text, { size: "sm", children: [" ", chainQuery.data.name] })) : (_jsx(Skeleton, { width: "120px", height: fontSize.sm }))] })] })] }) }));
}
const ButtonLink = /* @__PURE__ */ (() => Button.withComponent("a"))();
const IconBox = /* @__PURE__ */ StyledDiv(() => {
    const theme = useCustomTheme();
    return {
        color: theme.colors.secondaryText,
        padding: spacing.sm,
        border: `2px solid ${theme.colors.borderColor}`,
        borderRadius: radius.lg,
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        position: "relative",
    };
});
const TxHashLink = /* @__PURE__ */ StyledAnchor(() => {
    const theme = useCustomTheme();
    return {
        padding: spacing.sm,
        borderRadius: radius.lg,
        cursor: "pointer",
        animation: `${fadeInAnimation} 300ms ease`,
        background: theme.colors.walletSelectorButtonHoverBg,
        "&:hover": {
            transition: "background 250ms ease",
            background: theme.colors.secondaryButtonBg,
        },
        height: "68px",
    };
});
function getStatusMeta(status, subStatus) {
    if (subStatus === "WAITING_BRIDGE") {
        return {
            status: "Bridging",
            color: "accentText",
            loading: true,
        };
    }
    if (subStatus === "PARTIAL_SUCCESS") {
        return {
            status: "Incomplete",
            color: "secondaryText",
            loading: false,
        };
    }
    if (status === "PENDING") {
        return {
            status: "Pending",
            color: "accentText",
            loading: true,
        };
    }
    if (status === "FAILED") {
        return {
            status: "Failed",
            color: "danger",
            loading: false,
        };
    }
    if (status === "COMPLETED") {
        return {
            status: "Completed",
            color: "success",
            loading: false,
        };
    }
    return {
        status: "Unknown",
        color: "secondaryText",
    };
}
//# sourceMappingURL=SwapTransactionsScreen.js.map