import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { ModalConfigCtx,
// SetModalConfigCtx,
// SetModalConfigCtx,
 } from "../../../providers/wallet-ui-states-provider.js";
import { useCallback, useContext } from "react";
import { reservedScreens, onModalUnmount } from "../constants.js";
// import { HeadlessConnectUI } from "../../../wallets/headlessConnectUI.js";
import { ScreenSetupContext } from "./screen.js";
import { StartScreen } from "../screens/StartScreen.js";
import { WalletSelector } from "../WalletSelector.js";
import { ConnectModalCompactLayout, ConnectModalWideLayout, } from "./ConnectModalSkeleton.js";
import { useConnect } from "../../../../core/hooks/wallets/wallet-hooks.js";
import { useWalletConnectionCtx } from "../../../../core/hooks/others/useWalletConnectionCtx.js";
import { AnyWalletConnectUI } from "./AnyWalletConnectUI.js";
import { SmartConnectUI } from "./SmartWalletConnectUI.js";
/**
 * @internal
 */
export const ConnectModalContent = (props) => {
    const { onShow, onClose } = props;
    const { screen, setScreen, initialScreen } = props.screenSetup;
    const { wallets, accountAbstraction } = useWalletConnectionCtx();
    // const disconnect = useDisconnect();
    const modalConfig = useContext(ModalConfigCtx);
    // const setModalConfig = useContext(SetModalConfigCtx);
    // const activeWalletConnectionStatus = useActiveWalletConnectionStatus();
    // const activeWallet = useActiveWallet();
    const { connect } = useConnect();
    const title = modalConfig.title;
    const modalSize = modalConfig.modalSize;
    const onConnect = modalConfig.onConnect;
    const isWideModal = modalSize === "wide";
    // const { user } = useUser();
    // const authConfig = useThirdwebAuthContext();
    const handleConnected = useCallback((wallet) => {
        connect(wallet);
        if (onConnect) {
            onConnect(wallet);
        }
        const requiresSignIn = false;
        // const requiresSignIn = modalConfig.auth?.loginOptional
        //   ? false
        //   : !!authConfig?.authUrl && !user?.address;
        onModalUnmount(() => {
            onShow();
        });
        // show sign in screen if required
        if (requiresSignIn) {
            setScreen(reservedScreens.signIn);
        }
        // close modal and reset screen
        else {
            onClose();
        }
    }, [
        // modalConfig.auth?.loginOptional,
        // authConfig?.authUrl,
        // user?.address,
        setScreen,
        onShow,
        onClose,
        onConnect,
        connect,
    ]);
    const handleBack = useCallback(() => {
        setScreen(initialScreen);
        // if (connectionStatus === "connecting") {
        //   disconnect();
        // }
    }, [
        setScreen,
        initialScreen,
        // connectionStatus,
        // disconnect
    ]);
    // const address = useActiveWalletAddress();
    // const { setConnectionStatus, createWalletInstance, activeWallet } =
    //   useWalletContext();
    const walletList = (_jsx(WalletSelector, { title: title, wallets: wallets, onGetStarted: () => {
            setScreen(reservedScreens.getStarted);
        }, selectWallet: setScreen, done: handleConnected, goBack: wallets.length > 1 ? handleBack : undefined }));
    const getStarted = _jsx(StartScreen, {});
    const goBack = wallets.length > 1 ? handleBack : undefined;
    const getWalletUI = (wallet) => {
        if (accountAbstraction) {
            return (_jsx(SmartConnectUI, { accountAbstraction: accountAbstraction, done: (smartWallet) => {
                    console.log("connected smart wallet");
                    handleConnected(smartWallet);
                }, personalWallet: wallet, onBack: goBack }, wallet.id));
        }
        return (_jsx(AnyWalletConnectUI, { wallet: wallet, onBack: goBack, done: () => {
                handleConnected(wallet);
            } }, wallet.id));
    };
    // const signatureScreen = (
    //   <SignatureScreen
    //     onDone={onClose}
    //     modalSize={modalSize}
    //     termsOfServiceUrl={modalConfig.termsOfServiceUrl}
    //     privacyPolicyUrl={modalConfig.privacyPolicyUrl}
    //   />
    // );
    return (_jsx(ScreenSetupContext.Provider, { value: props.screenSetup, children: isWideModal ? (_jsx(ConnectModalWideLayout, { left: walletList, right: _jsxs(_Fragment, { children: [screen === reservedScreens.main && _jsx(_Fragment, { children: getStarted }), screen === reservedScreens.getStarted && getStarted, typeof screen !== "string" && getWalletUI(screen)] }) })) : (_jsxs(ConnectModalCompactLayout, { children: [screen === reservedScreens.main && walletList, screen === reservedScreens.getStarted && getStarted, typeof screen !== "string" && getWalletUI(screen)] })) }));
};
//# sourceMappingURL=ConnectModalContent.js.map