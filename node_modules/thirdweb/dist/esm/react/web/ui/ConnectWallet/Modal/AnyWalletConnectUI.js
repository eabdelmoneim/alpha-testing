import { jsx as _jsx } from "react/jsx-runtime";
import { Suspense, lazy, useEffect, useState } from "react";
import { getMIPDStore } from "../../../../../wallets/injected/mipdStore.js";
import { LoadingScreen } from "../../../wallets/shared/LoadingScreen.js";
import { useWalletInfo } from "../../hooks/useWalletInfo.js";
import { InjectedConnectUI } from "./InjectedConnectUI.js";
import { getInjectedWalletLocale } from "../../../wallets/injected/locale/getInjectedWalletLocale.js";
import { useWalletConnectionCtx } from "../../../../core/hooks/others/useWalletConnectionCtx.js";
import { GetStartedScreen } from "../../../wallets/shared/GetStartedScreen.js";
import { WalletConnectConnection } from "../../../wallets/shared/WalletConnectConnection.js";
const CoinbaseSDKWalletConnectUI = /* @__PURE__ */ lazy(() => import("../../../wallets/shared/CoinbaseSDKConnection.js"));
const EmbeddedWalletConnectUI = /* @__PURE__ */ lazy(() => import("../../../wallets/embedded/EmbeddedWalletConnectUI.js"));
/**
 * @internal
 */
export function AnyWalletConnectUI(props) {
    const [screen, setScreen] = useState("main");
    const walletInfo = useWalletInfo(props.wallet.id);
    const localeId = useWalletConnectionCtx().locale;
    const [locale, setLocale] = useState(null);
    useEffect(() => {
        if (!walletInfo.data) {
            return;
        }
        getInjectedWalletLocale(localeId).then((w) => {
            setLocale(w(walletInfo.data.name));
        });
    }, [localeId, walletInfo.data]);
    if (!walletInfo.data || !locale) {
        return _jsx(LoadingScreen, {});
    }
    // if wallet can connect to injected wallet + wallet is injected
    const isInstalled = getMIPDStore()
        .getProviders()
        .find((w) => w.info.rdns === walletInfo.data.rdns);
    if (screen === "get-started") {
        return (_jsx(GetStartedScreen, { locale: locale, wallet: props.wallet, walletInfo: walletInfo.data, onBack: () => {
                setScreen("main");
            } }));
    }
    if (walletInfo.data.rdns && isInstalled) {
        return (_jsx(InjectedConnectUI, { wallet: props.wallet, walletInfo: walletInfo.data, done: props.done, locale: locale, onGetStarted: () => {
                setScreen("get-started");
            }, onBack: props.onBack }));
    }
    // coinbase wallet sdk
    if (props.wallet.id === "com.coinbase.wallet") {
        return (_jsx(Suspense, { fallback: _jsx(LoadingScreen, {}), children: _jsx(CoinbaseSDKWalletConnectUI, { locale: locale, onGetStarted: () => {
                    setScreen("get-started");
                }, onBack: props.onBack, done: props.done, wallet: props.wallet, walletInfo: walletInfo.data }) }));
    }
    // wallet connect
    if (walletInfo.data.mobile.native || walletInfo.data.mobile.universal) {
        return (_jsx(WalletConnectConnection, { locale: locale, onGetStarted: () => {
                setScreen("get-started");
            }, onBack: props.onBack, done: props.done, wallet: props.wallet, walletInfo: walletInfo.data }));
    }
    if (props.wallet.id === "embedded") {
        return (_jsx(Suspense, { fallback: _jsx(LoadingScreen, {}), children: _jsx(EmbeddedWalletConnectUI, { wallet: props.wallet, done: props.done, goBack: props.onBack }) }));
    }
    // if can't connect in any way - show get started screen
    return (_jsx(GetStartedScreen, { locale: locale, wallet: props.wallet, walletInfo: walletInfo.data, onBack: () => {
            setScreen("main");
        } }));
}
//# sourceMappingURL=AnyWalletConnectUI.js.map