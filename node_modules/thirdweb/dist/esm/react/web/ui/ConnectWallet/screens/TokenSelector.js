import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { CrossCircledIcon } from "@radix-ui/react-icons";
import { useState } from "react";
import { useWalletBalance } from "../../../../core/hooks/others/useWalletBalance.js";
import { useActiveAccount } from "../../../../core/hooks/wallets/wallet-hooks.js";
import { Skeleton } from "../../components/Skeleton.js";
import { Spacer } from "../../components/Spacer.js";
import { Spinner } from "../../components/Spinner.js";
import { Container, ModalHeader } from "../../components/basic.js";
import { Button } from "../../components/buttons.js";
import { Input } from "../../components/formElements.js";
import { useCustomTheme } from "../../design-system/CustomThemeProvider.js";
import { spacing, iconSize, fontSize } from "../../design-system/index.js";
import { Text } from "../../components/text.js";
import styled from "@emotion/styled";
import { NATIVE_TOKEN, isNativeToken, } from "./nativeToken.js";
import { TokenIcon } from "../../components/TokenIcon.js";
import { useWalletConnectionCtx } from "../../../../core/hooks/others/useWalletConnectionCtx.js";
/**
 *
 * @internal
 */
export function TokenSelector(props) {
    const [input, setInput] = useState("");
    const activeAccount = useActiveAccount();
    const chain = props.chain;
    // if input is undefined, it loads the native token
    // otherwise it loads the token with given address
    const tokenQuery = useWalletBalance({
        address: activeAccount?.address,
        chain: chain,
        tokenAddress: input,
    });
    const locale = useWalletConnectionCtx().connectLocale.sendFundsScreen;
    let tokenList = props.tokenList;
    if (tokenQuery.data && input) {
        tokenList = [
            {
                ...tokenQuery.data,
                icon: "",
                address: input,
            },
            ...tokenList,
        ];
    }
    const filteredList = input
        ? tokenList.filter((t) => {
            const inputStr = input.toLowerCase();
            return (t.name.toLowerCase().includes(inputStr) ||
                t.symbol.toLowerCase().includes(inputStr) ||
                t.address.includes(input));
        })
        : tokenList;
    return (_jsxs(Container, { animate: "fadein", style: {
            minHeight: "300px",
        }, children: [_jsxs(Container, { p: "lg", children: [_jsx(ModalHeader, { onBack: props.onBack, title: locale.selectTokenTitle }), _jsx(Spacer, { y: "xl" }), _jsx(Input, { placeholder: locale.searchToken, variant: "outline", value: input, onChange: (e) => {
                            setInput(e.target.value);
                        } })] }), (filteredList.length > 0 || !input) && (_jsxs(Container, { flex: "column", gap: "xs", p: "md", scrollY: true, style: {
                    paddingTop: 0,
                    paddingBottom: spacing.lg,
                    maxHeight: "400px",
                }, children: [!input && (_jsx(SelectTokenButton, { onClick: () => {
                            props.onTokenSelect(NATIVE_TOKEN);
                        }, chain: props.chain, token: NATIVE_TOKEN })), filteredList.map((token) => {
                        return (_jsx(SelectTokenButton, { onClick: () => props.onTokenSelect(token), token: token, chain: props.chain }, token.address));
                    })] })), filteredList.length === 0 && tokenQuery.isLoading && (_jsx(Container, { animate: "fadein", p: "lg", flex: "column", gap: "md", center: "both", style: {
                    minHeight: "200px",
                    paddingTop: 0,
                }, color: "secondaryText", children: _jsx(Spinner, { size: "lg", color: "accentText" }) })), filteredList.length === 0 && !tokenQuery.isLoading && input && (_jsxs(Container, { animate: "fadein", p: "lg", flex: "column", gap: "md", center: "both", style: {
                    minHeight: "200px",
                    paddingTop: 0,
                }, color: "secondaryText", children: [_jsx(CrossCircledIcon, { width: iconSize.lg, height: iconSize.lg }), locale.noTokensFound] }))] }));
}
function SelectTokenButton(props) {
    const account = useActiveAccount();
    const tokenBalanceQuery = useWalletBalance({
        address: account?.address,
        chain: props.chain,
        tokenAddress: isNativeToken(props.token) ? undefined : props.token.address,
    });
    const tokenName = isNativeToken(props.token)
        ? tokenBalanceQuery.data?.name
        : props.token.name;
    return (_jsxs(SelectTokenBtn, { fullWidth: true, variant: "secondary", onClick: props.onClick, children: [_jsx(TokenIcon, { token: props.token, chain: props.chain, size: "lg" }), _jsxs(Container, { flex: "column", gap: "xs", children: [tokenName ? (_jsx(Text, { size: "sm", color: "primaryText", children: tokenName })) : (_jsx(Skeleton, { height: fontSize.md, width: "150px" })), tokenBalanceQuery.data ? (_jsxs(Text, { size: "xs", children: [" ", formatTokenBalance(tokenBalanceQuery.data)] })) : (_jsx(Skeleton, { height: fontSize.xs, width: "100px" }))] })] }));
}
const SelectTokenBtn = /* @__PURE__ */ styled(Button)(() => {
    const theme = useCustomTheme();
    return {
        background: "transparent",
        justifyContent: "flex-start",
        gap: spacing.sm,
        padding: spacing.sm,
        "&:hover": {
            background: theme.colors.secondaryButtonBg,
            transform: "scale(1.01)",
        },
        transition: "background 200ms ease, transform 150ms ease",
    };
});
/**
 * @internal
 * @param balanceData
 * @returns
 */
export function formatTokenBalance(balanceData, showSymbol = true) {
    return (Number(balanceData.displayValue).toFixed(3) +
        (showSymbol ? " " + balanceData.symbol : ""));
}
//# sourceMappingURL=TokenSelector.js.map