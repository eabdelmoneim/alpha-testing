import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { ChevronLeftIcon } from "@radix-ui/react-icons";
import { useContext, useState, useRef, useEffect, lazy, Suspense } from "react";
import { ModalConfigCtx,
// SetModalConfigCtx,
 } from "../../providers/wallet-ui-states-provider.js";
import { Img } from "../components/Img.js";
import { Spacer } from "../components/Spacer.js";
import { TextDivider } from "../components/TextDivider.js";
import { Container, ScreenBottomContainer, Line, ModalHeader, noScrollBar, } from "../components/basic.js";
import { Button, IconButton } from "../components/buttons.js";
import { ModalTitle } from "../components/modalElements.js";
import { Link } from "../components/text.js";
import { StyledUl } from "../design-system/elements.js";
import { iconSize, spacing } from "../design-system/index.js";
import { TOS } from "./Modal/TOS.js";
import { TWIcon } from "./icons/twIcon.js";
import { Text } from "../components/text.js";
import { PoweredByThirdweb } from "./PoweredByTW.js";
// import { localWalletMetadata } from "../../../../wallets/local/index._ts";
import { useWalletConnectionCtx } from "../../../core/hooks/others/useWalletConnectionCtx.js";
import { WalletImage } from "../components/WalletImage.js";
import { getMIPDStore } from "../../../../wallets/injected/mipdStore.js";
import { createWallet } from "../../../../wallets/create-wallet.js";
import { LoadingScreen } from "../../wallets/shared/LoadingScreen.js";
import { WalletEntryButton } from "./WalletEntryButton.js";
const EmbeddedWalletSelectionUI = /* @__PURE__ */ lazy(() => import("../../wallets/embedded/EmbeddedWalletSelectionUI.js"));
// const localWalletId = "local";
const embeddedWalletId = "embedded";
/**
 * @internal
 */
export const WalletSelector = (props) => {
    const modalConfig = useContext(ModalConfigCtx);
    const isCompact = modalConfig.modalSize === "compact";
    const { termsOfServiceUrl, privacyPolicyUrl } = modalConfig;
    const [isWalletGroupExpanded, setIsWalletGroupExpanded] = useState(false);
    const installedWallets = getInstalledWallets();
    const propsWallets = props.wallets;
    const _wallets = [...propsWallets];
    installedWallets.forEach((iW) => {
        if (!propsWallets.find((w) => w.id === iW.id)) {
            _wallets.push(iW);
        }
    });
    // const disconnect = useDisconnect();
    // const connectionStatus = useActiveWalletConnectionStatus();
    const locale = useWalletConnectionCtx().connectLocale;
    const recommendedWallets = useWalletConnectionCtx().recommendedWallets;
    const localWalletConfig = false; // _wallets.find((w) => w.id === localWalletId);
    const nonLocalWalletConfigs = _wallets; // _wallets.filter((w) => w.id !== localWalletId);
    const socialWallets = nonLocalWalletConfigs.filter((w) => w.id === embeddedWalletId);
    const eoaWallets = sortWallets(nonLocalWalletConfigs.filter((w) => w.id !== embeddedWalletId), recommendedWallets);
    const continueAsGuest = localWalletConfig && (_jsx(Button, { fullWidth: true, variant: isCompact ? "outline" : "link", style: !isCompact
            ? {
                textAlign: "left",
                justifyContent: "flex-start",
            }
            : undefined, onClick: () => {
            props.selectWallet(localWalletConfig);
        }, "data-test": "continue-as-guest-button", children: locale.continueAsGuest }));
    // prevent accidental clicks on the TW icon when clicking on back icon from previous screen
    const enableTWIconLink = useRef(false);
    useEffect(() => {
        setTimeout(() => {
            enableTWIconLink.current = true;
        }, 1000);
    }, []);
    const twTitle = (_jsxs(Container, { gap: "xxs", center: "y", flex: "row", children: [modalConfig.titleIconUrl === undefined ? (_jsx(Link, { color: "primaryText", hoverColor: "accentText", target: "_blank", href: "https://thirdweb.com/connect?utm_source=cw", style: {
                    display: "flex",
                    alignItems: "center",
                }, onClick: (e) => {
                    if (!enableTWIconLink.current) {
                        e.preventDefault();
                    }
                }, children: _jsx(TWIcon, { size: iconSize.md }) })) : modalConfig.titleIconUrl === "" ? null : (_jsx(Img, { src: modalConfig.titleIconUrl, width: iconSize.md, height: iconSize.md })), _jsxs(ModalTitle, { children: [" ", props.title, " "] })] }));
    const handleSelect = async (wallet) => {
        // if (connectionStatus !== "disconnected") {
        //   await disconnect();
        // }
        props.selectWallet(wallet);
    };
    const connectAWallet = (_jsxs(Button, { fullWidth: true, variant: "outline", style: {
            display: "flex",
            justifyContent: "center",
            gap: spacing.sm,
            padding: spacing.md,
        }, onClick: () => {
            setIsWalletGroupExpanded(true);
        }, children: [_jsx(Container, { flex: "row", gap: "xxs", children: eoaWallets.slice(0, 2).map((w) => (_jsx(WalletImage, { id: w.id, size: iconSize.sm }, w.id))) }), locale.connectAWallet] }));
    const newToWallets = (_jsxs(Container, { flex: "row", style: {
            justifyContent: "space-between",
        }, children: [_jsx(Text, { color: "secondaryText", size: "sm", weight: 500, children: locale.newToWallets }), _jsx(Link, { weight: 500, size: "sm", target: "_blank", href: "https://blog.thirdweb.com/web3-wallet/", children: locale.getStarted })] }));
    const tos = termsOfServiceUrl || privacyPolicyUrl ? (_jsx(TOS, { termsOfServiceUrl: termsOfServiceUrl, privacyPolicyUrl: privacyPolicyUrl })) : undefined;
    let topSection;
    let bottomSection;
    // wide modal
    if (!isCompact) {
        topSection = (_jsx(WalletSelection, { wallets: nonLocalWalletConfigs, selectWallet: handleSelect, done: props.done, goBack: props.goBack }));
        if (continueAsGuest) {
            bottomSection = (_jsx(ScreenBottomContainer, { children: continueAsGuest }));
        }
    }
    // compact
    else {
        // no social logins
        if (socialWallets.length === 0) {
            topSection = (_jsx(WalletSelection, { wallets: nonLocalWalletConfigs, selectWallet: handleSelect, done: props.done, goBack: props.goBack }));
            bottomSection = (_jsxs(_Fragment, { children: [_jsx(Line, {}), _jsxs(Container, { flex: "column", p: "lg", gap: "lg", children: [newToWallets, continueAsGuest] }), !continueAsGuest && _jsx(Line, {}), tos && (_jsx(Container, { px: "md", style: {
                            paddingBottom: spacing.md,
                            paddingTop: continueAsGuest ? 0 : spacing.md,
                        }, children: tos }))] }));
        }
        // social logins
        else {
            // not expanded state
            if (!isWalletGroupExpanded) {
                topSection = (_jsxs(Container, { px: "xs", children: [_jsx(WalletSelection, { wallets: socialWallets, selectWallet: handleSelect, done: props.done, goBack: props.goBack }), eoaWallets.length > 0 && (_jsxs(_Fragment, { children: [_jsx(TextDivider, { text: locale.or }), _jsx(Spacer, { y: "lg" })] }))] }));
                // only social login - no eoa wallets
                if (eoaWallets.length === 0) {
                    bottomSection =
                        tos || continueAsGuest ? (_jsxs(_Fragment, { children: [_jsx(Spacer, { y: "md" }), _jsx(Line, {}), continueAsGuest && (_jsxs(Container, { p: "lg", children: [" ", continueAsGuest] })), tos && _jsxs(Container, { p: "md", children: [" ", tos, " "] })] })) : (_jsx(Spacer, { y: "sm" }));
                }
                // social login + eoa wallets
                else {
                    // social login + More than 1 eoa wallets
                    if (eoaWallets.length > 1) {
                        bottomSection = (_jsxs(Container, { flex: "column", gap: "sm", children: [_jsxs(Container, { px: "lg", flex: "column", gap: "md", children: [connectAWallet, continueAsGuest] }), tos ? (_jsxs(Container, { p: "md", children: [" ", tos, " "] })) : (_jsx(Spacer, { y: "md" }))] }));
                    }
                    // social login + single eoa wallet
                    else {
                        bottomSection = (_jsxs(_Fragment, { children: [_jsx(Container, { px: "lg", children: _jsx(WalletSelection, { wallets: eoaWallets, selectWallet: handleSelect, done: props.done, goBack: props.goBack }) }), continueAsGuest && (_jsx(Container, { flex: "column", px: "lg", gap: "lg", children: continueAsGuest })), tos ? (_jsxs(_Fragment, { children: [continueAsGuest ? _jsx(Spacer, { y: "md" }) : _jsx(Line, {}), _jsxs(Container, { p: "md", children: [" ", tos, " "] })] })) : (_jsx(_Fragment, { children: continueAsGuest && _jsx(Spacer, { y: "xl" }) }))] }));
                    }
                }
            }
            // expanded state
            else {
                topSection = (_jsx(WalletSelection, { wallets: eoaWallets, selectWallet: handleSelect, done: props.done, goBack: props.goBack }));
                bottomSection = (_jsx(ScreenBottomContainer, { children: newToWallets }));
            }
        }
    }
    return (_jsxs(Container, { scrollY: true, flex: "column", animate: "fadein", fullHeight: true, children: [!modalConfig.isEmbed && (_jsx(Container, { p: "lg", style: {
                    paddingBottom: spacing.md,
                }, children: isWalletGroupExpanded ? (_jsx(ModalHeader, { title: twTitle, onBack: () => {
                        setIsWalletGroupExpanded(false);
                    } })) : (twTitle) })), _jsxs(Container, { expand: true, scrollY: true, px: "md", style: modalConfig.isEmbed
                    ? {
                        paddingTop: spacing.lg,
                    }
                    : {
                        paddingTop: "2px",
                    }, children: [modalConfig.isEmbed && isWalletGroupExpanded && (_jsx(Container, { flex: "row", center: "y", style: {
                            padding: spacing.sm,
                            paddingTop: 0,
                        }, children: _jsxs(IconButton, { onClick: () => {
                                setIsWalletGroupExpanded(false);
                            }, style: {
                                gap: spacing.xxs,
                                transform: `translateX(-${spacing.xs})`,
                                paddingBlock: spacing.xxs,
                                paddingRight: spacing.xs,
                            }, children: [_jsx(ChevronLeftIcon, { width: iconSize.sm, height: iconSize.sm }), locale.goBackButton] }) })), topSection] }), bottomSection, isCompact && modalConfig.showThirdwebBranding !== false && (_jsx(Container, { py: "md", children: _jsx(PoweredByThirdweb, {}) }))] }));
};
let _installedWallets = [];
function getInstalledWallets() {
    if (_installedWallets.length === 0) {
        const providers = getMIPDStore().getProviders();
        const walletIds = providers.map((provider) => provider.info.rdns);
        _installedWallets = walletIds.map((w) => createWallet(w));
    }
    return _installedWallets;
}
/**
 * @internal
 */
const WalletSelection = (props) => {
    const { recommendedWallets } = useWalletConnectionCtx();
    const wallets = sortWallets(props.wallets, recommendedWallets);
    // const modalConfig = useContext(ModalConfigCtx);
    // const setModalConfig = useContext(SetModalConfigCtx);
    // const saveData = useCallback(
    //   (data: any) => {
    //     setModalConfig({
    //       ...modalConfig,
    //       data,
    //     });
    //   },
    //   [modalConfig, setModalConfig],
    // );
    return (_jsx(WalletList, { children: wallets.map((wallet) => {
            return (_jsx("li", { children: wallet.id === "embedded" ? (_jsx(Suspense, { fallback: _jsx(LoadingScreen, { height: "195px" }), children: _jsx(EmbeddedWalletSelectionUI, { done: () => props.done(wallet), select: () => props.selectWallet(wallet), wallet: wallet, goBack: props.goBack }) })) : (_jsx(WalletEntryButton, { wallet: wallet, selectWallet: () => {
                        props.selectWallet(wallet);
                    } })) }, wallet.id));
        }) }));
};
const WalletList = /* @__PURE__ */ StyledUl({
    all: "unset",
    listStyleType: "none",
    display: "flex",
    flexDirection: "column",
    gap: "2px",
    boxSizing: "border-box",
    overflowY: "auto",
    flex: 1,
    ...noScrollBar,
    // to show the box-shadow of inputs that overflows
    padding: "2px",
    margin: "-2px",
    marginBottom: 0,
    paddingBottom: spacing.lg,
});
/**
 *
 * @internal
 */
function sortWallets(wallets, recommendedWallets) {
    const providers = getMIPDStore().getProviders();
    return (wallets
        // show the installed wallets first
        .sort((a, b) => {
        const aInstalled = providers.find((p) => p.info.rdns === a.id);
        const bInstalled = providers.find((p) => p.info.rdns === b.id);
        if (aInstalled && !bInstalled) {
            return -1;
        }
        if (!aInstalled && bInstalled) {
            return 1;
        }
        return 0;
    })
        // show the recommended wallets even before that
        .sort((a, b) => {
        const aIsRecommended = recommendedWallets?.find((w) => w === a);
        const bIsRecommended = recommendedWallets?.find((w) => w === b);
        if (aIsRecommended && !bIsRecommended) {
            return -1;
        }
        if (!aIsRecommended && bIsRecommended) {
            return 1;
        }
        return 0;
    })
        // show wallets with select ui first ( currently only embedded )
        .sort((a, b) => {
        const aIsEmbedded = a.id === "embedded";
        const bIsEmbedded = b.id === "embedded";
        if (aIsEmbedded && !bIsEmbedded) {
            return -1;
        }
        if (!aIsEmbedded && bIsEmbedded) {
            return 1;
        }
        return 0;
    }));
}
//# sourceMappingURL=WalletSelector.js.map