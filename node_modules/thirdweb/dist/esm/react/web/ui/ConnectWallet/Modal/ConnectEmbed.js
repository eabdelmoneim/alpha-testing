import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { SetModalConfigCtx, WalletUIStatesProvider, } from "../../../providers/wallet-ui-states-provider.js";
import { modalMaxWidthCompact, defaultTheme } from "../constants.js";
import { useSetupScreen } from "./screen.js";
import { useContext, useEffect, useState } from "react";
import { radius } from "../../design-system/index.js";
import { StyledDiv } from "../../design-system/elements.js";
import { useCustomTheme, CustomThemeProvider, } from "../../design-system/CustomThemeProvider.js";
import { DynamicHeight } from "../../components/DynamicHeight.js";
import { useActiveAccount, useIsAutoConnecting, } from "../../../../core/hooks/wallets/wallet-hooks.js";
import { ConnectModalContent } from "./ConnectModalContent.js";
import { canFitWideModal } from "../../../utils/canFitWideModal.js";
import { useWalletConnectionCtx } from "../../../../core/hooks/others/useWalletConnectionCtx.js";
import { WalletConnectionContext } from "../../../../core/providers/wallet-connection.js";
import { getDefaultWallets } from "../../../wallets/defaultWallets.js";
import { LoadingScreen } from "../../../wallets/shared/LoadingScreen.js";
import { getConnectLocale } from "../locale/getConnectLocale.js";
import { AutoConnect } from "../../../../core/hooks/connection/useAutoConnect.js";
/**
 * A component that allows the user to connect their wallet.
 *
 * it renders the same UI as the [`ConnectButton`](https://portal.thirdweb.com/react/v4/components/ConnectButton) component's modal - but directly on the page instead of being in a modal.
 *
 * It only renders UI if wallet is not connected
 * @example
 * ```tsx
 * <ConnectEmbed
 *    client={client}
 *    appMetadata={{
 *      name: "Example",
 *      url: "https://example.com",
 *    }}
 * />
 * ```
 * @param props -
 * The props for the `ConnectEmbed` component.
 *
 * Refer to the [`ConnectEmbedProps`](https://portal.thirdweb.com/references/typescript/v5/ConnectEmbedProps) type for more details
 * @component
 */
export function ConnectEmbed(props) {
    const activeAccount = useActiveAccount();
    const show = !activeAccount;
    const wallets = props.wallets || getDefaultWallets();
    const localeId = props.locale || "en_US";
    const [locale, setLocale] = useState();
    useEffect(() => {
        getConnectLocale(localeId).then(setLocale);
    }, [localeId]);
    const contextTheme = useCustomTheme();
    const walletUIStatesProps = {
        theme: props.theme || contextTheme || defaultTheme,
        modalSize: "compact",
        title: undefined,
        termsOfServiceUrl: props.termsOfServiceUrl,
        privacyPolicyUrl: props.privacyPolicyUrl,
        isEmbed: true,
        // auth: props.auth,
        onConnect: props.onConnect,
        showThirdwebBranding: props.showThirdwebBranding,
    };
    const autoConnectComp = props.autoConnect !== false && (_jsx(AutoConnect, { appMetadata: props.appMetadata, client: props.client, wallets: wallets, timeout: typeof props.autoConnect === "boolean"
            ? undefined
            : props.autoConnect?.timeout }));
    if (show) {
        if (!locale) {
            return (_jsxs(_Fragment, { children: [autoConnectComp, _jsx(LoadingScreen, {}), ";"] }));
        }
        return (_jsx(WalletConnectionContext.Provider, { value: {
                appMetadata: props.appMetadata,
                client: props.client,
                wallets: wallets,
                locale: localeId,
                connectLocale: locale,
                chain: props.chain,
                chains: props.chains,
                walletConnect: props.walletConnect,
                accountAbstraction: props.accountAbstraction,
                recommendedWallets: props.recommendedWallets,
                showAllWallets: props.showAllWallets,
            }, children: _jsx(WalletUIStatesProvider, { ...walletUIStatesProps, children: _jsxs(CustomThemeProvider, { theme: walletUIStatesProps.theme, children: [_jsx(ConnectEmbedContent, { ...props, onConnect: props.onConnect }), _jsx(SyncedWalletUIStates, { ...walletUIStatesProps }), autoConnectComp] }) }) }));
    }
    return _jsx("div", { children: autoConnectComp });
}
/**
 * @internal
 */
const ConnectEmbedContent = (props) => {
    // const requiresSignIn = false;
    const screenSetup = useSetupScreen();
    const { setScreen, initialScreen } = screenSetup;
    const isAutoConnecting = useIsAutoConnecting();
    let content = null;
    // show spinner on page load and during auto connecting a wallet
    if (isAutoConnecting) {
        content = _jsx(LoadingScreen, {});
    }
    else {
        content = (_jsx(ConnectModalContent, { screenSetup: screenSetup, isOpen: true, onClose: () => {
                setScreen(initialScreen);
            }, onHide: () => {
                // no op
            }, onShow: () => {
                // no op
            } }));
    }
    return (_jsx(EmbedContainer, { className: props.className, style: {
            height: "auto",
            maxWidth: modalMaxWidthCompact,
            ...props.style,
        }, children: _jsxs(DynamicHeight, { children: [" ", content, " "] }) }));
};
/**
 * @internal
 */
export function SyncedWalletUIStates(props) {
    const setModalConfig = useContext(SetModalConfigCtx);
    const locale = useWalletConnectionCtx().connectLocale;
    // update modalConfig on props change
    useEffect(() => {
        setModalConfig((c) => ({
            ...c,
            title: props.title || locale.defaultModalTitle,
            theme: props.theme || "dark",
            modalSize: (!canFitWideModal() ? "compact" : props.modalSize) || "wide",
            termsOfServiceUrl: props.termsOfServiceUrl,
            privacyPolicyUrl: props.privacyPolicyUrl,
            welcomeScreen: props.welcomeScreen,
            titleIconUrl: props.titleIconUrl,
            showThirdwebBranding: props.showThirdwebBranding,
        }));
    }, [
        props.title,
        props.theme,
        props.modalSize,
        props.termsOfServiceUrl,
        props.privacyPolicyUrl,
        props.welcomeScreen,
        props.titleIconUrl,
        setModalConfig,
        locale.defaultModalTitle,
        props.showThirdwebBranding,
    ]);
    return _jsx(WalletUIStatesProvider, { ...props });
}
const EmbedContainer = /* @__PURE__ */ StyledDiv(() => {
    const theme = useCustomTheme();
    return {
        color: theme.colors.primaryText,
        background: theme.colors.modalBg,
        width: "100%",
        boxSizing: "border-box",
        position: "relative",
        lineHeight: "normal",
        borderRadius: radius.xl,
        border: `1px solid ${theme.colors.borderColor}`,
        overflow: "hidden",
        fontFamily: theme.fontFamily,
        "& *::selection": {
            backgroundColor: theme.colors.primaryText,
            color: theme.colors.modalBg,
        },
    };
});
//# sourceMappingURL=ConnectEmbed.js.map