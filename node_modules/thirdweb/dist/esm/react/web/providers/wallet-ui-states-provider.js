import { jsx as _jsx } from "react/jsx-runtime";
import { useState, createContext, useContext } from "react";
import { canFitWideModal } from "../utils/canFitWideModal.js";
import { useWalletConnectionCtx } from "../../core/hooks/others/useWalletConnectionCtx.js";
const WalletModalOpen = /* @__PURE__ */ createContext(false);
const SetWalletModalOpen = /* @__PURE__ */ createContext(undefined);
export const ModalConfigCtx = /* @__PURE__ */ createContext({
    title: "",
    theme: "dark",
    data: undefined,
    modalSize: "wide",
});
export const SetModalConfigCtx = /* @__PURE__ */ createContext(() => { });
/**
 * @internal
 */
export const WalletUIStatesProvider = (props) => {
    const [isWalletModalOpen, setIsWalletModalOpen] = useState(false);
    const enforceCompact = !canFitWideModal();
    const { connectLocale } = useWalletConnectionCtx();
    const [modalConfig, setModalConfig] = useState({
        title: props.title || connectLocale.defaultModalTitle,
        theme: props.theme || "dark",
        data: undefined,
        modalSize: (enforceCompact ? "compact" : props.modalSize) || "wide",
        termsOfServiceUrl: props.termsOfServiceUrl,
        privacyPolicyUrl: props.privacyPolicyUrl,
        welcomeScreen: props.welcomeScreen,
        titleIconUrl: props.titleIconUrl,
        isEmbed: props.isEmbed,
        auth: props.auth,
        onConnect: props.onConnect,
        chain: props.chain,
        chains: props.chains,
        showThirdwebBranding: props.showThirdwebBranding,
    });
    return (_jsx(WalletModalOpen.Provider, { value: isWalletModalOpen, children: _jsx(SetWalletModalOpen.Provider, { value: setIsWalletModalOpen, children: _jsx(ModalConfigCtx.Provider, { value: modalConfig, children: _jsx(SetModalConfigCtx.Provider, { value: setModalConfig, children: props.children }) }) }) }));
};
/**
 * Check if the [`ConnectButton`](https://portal.thirdweb.com/react/v4/components/ConnectButton)'s Modal is open or not
 * @example
 * ```tsx
 * const isOpen = useIsWalletModalOpen();
 * ```
 * @returns `true` if the [`ConnectButton`](https://portal.thirdweb.com/react/v4/components/ConnectButton) modal is open, `false` otherwise
 * @connectWallet
 */
export const useIsWalletModalOpen = () => {
    return useContext(WalletModalOpen);
};
/**
 * Open or close the [`ConnectButton`](https://portal.thirdweb.com/react/v4/components/ConnectButton) Modal
 * @example
 * ```tsx
 * const setIsWalletModalOpen = useSetIsWalletModalOpen();
 *
 * function openModal() {
 *  setIsWalletModalOpen(true);
 * }
 *
 * function closeModal() {
 *  setIsWalletModalOpen(false);
 * }
 *
 * return (
 *   <div>
 *    <button onClick={openModal}>Open Modal</button>
 *    <button onClick={closeModal}>Close Modal</button>
 *   </div>
 * )
 * ```
 * @returns Function to open or close the modal
 * @connectWallet
 */
export const useSetIsWalletModalOpen = () => {
    const context = useContext(SetWalletModalOpen);
    if (context === undefined) {
        throw new Error("useSetWalletModalOpen must be used within a ThirdwebProvider");
    }
    return context;
};
//# sourceMappingURL=wallet-ui-states-provider.js.map