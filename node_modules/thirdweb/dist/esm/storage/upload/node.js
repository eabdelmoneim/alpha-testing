/* eslint-disable jsdoc/require-jsdoc */
import { getThirdwebDomains } from "../../utils/domains.js";
import { getClientFetch } from "../../utils/fetch.js";
export async function uploadBatchNode(client, form, fileNames, options) {
    // if (options?.onProgress) {
    //   console.warn("The onProgress option is only supported in the browser");
    // }
    const headers = {};
    if (client.secretKey) {
        headers["x-secret-key"] = client.secretKey;
    }
    else if (client.clientId) {
        headers["x-client-id"] = client.clientId;
    }
    // if we have a bundle id on global context then add that to the headers
    if (typeof globalThis !== "undefined" && "APP_BUNDLE_ID" in globalThis) {
        headers["x-bundle-id"] = globalThis.APP_BUNDLE_ID;
    }
    // if we have a authorization token on global context then add that to the headers, this is for the dashboard.
    if (typeof globalThis !== "undefined" &&
        "TW_AUTH_TOKEN" in globalThis &&
        typeof globalThis.TW_AUTH_TOKEN === "string") {
        headers["authorization"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;
    }
    // CLI auth token
    if (typeof globalThis !== "undefined" &&
        "TW_CLI_AUTH_TOKEN" in globalThis &&
        typeof globalThis.TW_CLI_AUTH_TOKEN === "string") {
        headers["authorization"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;
        headers["x-authorize-wallet"] = "true";
    }
    const res = await getClientFetch(client)(`https://${getThirdwebDomains().storage}/ipfs/upload`, {
        method: "POST",
        headers: {
            ...headers,
            // ...form.getHeaders(),
        },
        body: form,
    });
    if (!res.ok) {
        res.body?.cancel();
        if (res.status === 401) {
            throw new Error("Unauthorized - You don't have permission to use this service.");
        }
        throw new Error(`Failed to upload files to IPFS - ${res.status} - ${res.statusText} - ${await res.text()}`);
    }
    const body = await res.json();
    const cid = body.IpfsHash;
    if (!cid) {
        throw new Error("Failed to upload files to IPFS - Bad CID");
    }
    if (options?.uploadWithoutDirectory) {
        return [`ipfs://${cid}`];
    }
    else {
        return fileNames.map((name) => `ipfs://${cid}/${name}`);
    }
}
//# sourceMappingURL=node.js.map