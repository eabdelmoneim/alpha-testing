import { prepareContractCall } from "../../../../../transaction/prepare-contract-call.js";
import { encodeAbiParameters } from "../../../../../utils/abi/encodeAbiParameters.js";
const FN_SELECTOR = "0x59e5fd04";
const FN_INPUTS = [
    {
        type: "address",
        name: "_deployer",
    },
    {
        type: "address",
        name: "_deployment",
    },
    {
        type: "uint256",
        name: "_chainId",
    },
];
const FN_OUTPUTS = [];
/**
 * Encodes the parameters for the "remove" function.
 * @param options - The options for the remove function.
 * @returns The encoded ABI parameters.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { encodeRemoveParams } "thirdweb/extensions/thirdweb";
 * const result = encodeRemoveParams({
 *  deployer: ...,
 *  deployment: ...,
 *  chainId: ...,
 * });
 * ```
 */
export function encodeRemoveParams(options) {
    return encodeAbiParameters(FN_INPUTS, [
        options.deployer,
        options.deployment,
        options.chainId,
    ]);
}
/**
 * Calls the "remove" function on the contract.
 * @param options - The options for the "remove" function.
 * @returns A prepared transaction object.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { remove } from "thirdweb/extensions/thirdweb";
 *
 * const transaction = remove({
 *  contract,
 *  deployer: ...,
 *  deployment: ...,
 *  chainId: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function remove(options) {
    return prepareContractCall({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.deployer,
                    resolvedParams.deployment,
                    resolvedParams.chainId,
                ];
            }
            : [options.deployer, options.deployment, options.chainId],
    });
}
//# sourceMappingURL=remove.js.map