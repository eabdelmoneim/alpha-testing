import { prepareContractCall } from "../../../../../transaction/prepare-contract-call.js";
import { encodeAbiParameters } from "../../../../../utils/abi/encodeAbiParameters.js";
const FN_SELECTOR = "0xd50299e6";
const FN_INPUTS = [
    {
        type: "address",
        name: "publisher",
    },
    {
        type: "string",
        name: "contractId",
    },
    {
        type: "string",
        name: "publishMetadataUri",
    },
    {
        type: "string",
        name: "compilerMetadataUri",
    },
    {
        type: "bytes32",
        name: "bytecodeHash",
    },
    {
        type: "address",
        name: "implementation",
    },
];
const FN_OUTPUTS = [];
/**
 * Encodes the parameters for the "publishContract" function.
 * @param options - The options for the publishContract function.
 * @returns The encoded ABI parameters.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { encodePublishContractParams } "thirdweb/extensions/thirdweb";
 * const result = encodePublishContractParams({
 *  publisher: ...,
 *  contractId: ...,
 *  publishMetadataUri: ...,
 *  compilerMetadataUri: ...,
 *  bytecodeHash: ...,
 *  implementation: ...,
 * });
 * ```
 */
export function encodePublishContractParams(options) {
    return encodeAbiParameters(FN_INPUTS, [
        options.publisher,
        options.contractId,
        options.publishMetadataUri,
        options.compilerMetadataUri,
        options.bytecodeHash,
        options.implementation,
    ]);
}
/**
 * Calls the "publishContract" function on the contract.
 * @param options - The options for the "publishContract" function.
 * @returns A prepared transaction object.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { publishContract } from "thirdweb/extensions/thirdweb";
 *
 * const transaction = publishContract({
 *  contract,
 *  publisher: ...,
 *  contractId: ...,
 *  publishMetadataUri: ...,
 *  compilerMetadataUri: ...,
 *  bytecodeHash: ...,
 *  implementation: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function publishContract(options) {
    return prepareContractCall({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.publisher,
                    resolvedParams.contractId,
                    resolvedParams.publishMetadataUri,
                    resolvedParams.compilerMetadataUri,
                    resolvedParams.bytecodeHash,
                    resolvedParams.implementation,
                ];
            }
            : [
                options.publisher,
                options.contractId,
                options.publishMetadataUri,
                options.compilerMetadataUri,
                options.bytecodeHash,
                options.implementation,
            ],
    });
}
//# sourceMappingURL=publishContract.js.map