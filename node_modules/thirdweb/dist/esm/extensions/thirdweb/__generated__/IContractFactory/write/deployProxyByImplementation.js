import { prepareContractCall } from "../../../../../transaction/prepare-contract-call.js";
import { encodeAbiParameters } from "../../../../../utils/abi/encodeAbiParameters.js";
const FN_SELECTOR = "0x11b804ab";
const FN_INPUTS = [
    {
        type: "address",
        name: "implementation",
    },
    {
        type: "bytes",
        name: "data",
    },
    {
        type: "bytes32",
        name: "salt",
    },
];
const FN_OUTPUTS = [
    {
        type: "address",
    },
];
/**
 * Encodes the parameters for the "deployProxyByImplementation" function.
 * @param options - The options for the deployProxyByImplementation function.
 * @returns The encoded ABI parameters.
 * @extension THIRDWEB
 * @example
 * ```
 * import { encodeDeployProxyByImplementationParams } "thirdweb/extensions/thirdweb";
 * const result = encodeDeployProxyByImplementationParams({
 *  implementation: ...,
 *  data: ...,
 *  salt: ...,
 * });
 * ```
 */
export function encodeDeployProxyByImplementationParams(options) {
    return encodeAbiParameters(FN_INPUTS, [
        options.implementation,
        options.data,
        options.salt,
    ]);
}
/**
 * Calls the "deployProxyByImplementation" function on the contract.
 * @param options - The options for the "deployProxyByImplementation" function.
 * @returns A prepared transaction object.
 * @extension THIRDWEB
 * @example
 * ```
 * import { deployProxyByImplementation } from "thirdweb/extensions/thirdweb";
 *
 * const transaction = deployProxyByImplementation({
 *  implementation: ...,
 *  data: ...,
 *  salt: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function deployProxyByImplementation(options) {
    return prepareContractCall({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.implementation,
                    resolvedParams.data,
                    resolvedParams.salt,
                ];
            }
            : [options.implementation, options.data, options.salt],
    });
}
//# sourceMappingURL=deployProxyByImplementation.js.map