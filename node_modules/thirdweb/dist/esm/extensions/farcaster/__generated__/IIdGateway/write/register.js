import { prepareContractCall } from "../../../../../transaction/prepare-contract-call.js";
import { encodeAbiParameters } from "../../../../../utils/abi/encodeAbiParameters.js";
const FN_SELECTOR = "0x6d705ebb";
const FN_INPUTS = [
    {
        type: "address",
        name: "recovery",
    },
    {
        type: "uint256",
        name: "extraStorage",
    },
];
const FN_OUTPUTS = [
    {
        type: "uint256",
        name: "fid",
    },
    {
        type: "uint256",
        name: "overpayment",
    },
];
/**
 * Encodes the parameters for the "register" function.
 * @param options - The options for the register function.
 * @returns The encoded ABI parameters.
 * @extension FARCASTER
 * @example
 * ```
 * import { encodeRegisterParams } "thirdweb/extensions/farcaster";
 * const result = encodeRegisterParams({
 *  recovery: ...,
 *  extraStorage: ...,
 * });
 * ```
 */
export function encodeRegisterParams(options) {
    return encodeAbiParameters(FN_INPUTS, [
        options.recovery,
        options.extraStorage,
    ]);
}
/**
 * Calls the "register" function on the contract.
 * @param options - The options for the "register" function.
 * @returns A prepared transaction object.
 * @extension FARCASTER
 * @example
 * ```
 * import { register } from "thirdweb/extensions/farcaster";
 *
 * const transaction = register({
 *  recovery: ...,
 *  extraStorage: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function register(options) {
    return prepareContractCall({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.recovery,
                    resolvedParams.extraStorage,
                ];
            }
            : [options.recovery, options.extraStorage],
    });
}
//# sourceMappingURL=register.js.map