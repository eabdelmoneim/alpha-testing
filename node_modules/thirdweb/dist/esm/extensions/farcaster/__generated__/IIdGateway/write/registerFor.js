import { prepareContractCall } from "../../../../../transaction/prepare-contract-call.js";
import { encodeAbiParameters } from "../../../../../utils/abi/encodeAbiParameters.js";
const FN_SELECTOR = "0xa0c7529c";
const FN_INPUTS = [
    {
        type: "address",
        name: "to",
    },
    {
        type: "address",
        name: "recovery",
    },
    {
        type: "uint256",
        name: "deadline",
    },
    {
        type: "bytes",
        name: "sig",
    },
    {
        type: "uint256",
        name: "extraStorage",
    },
];
const FN_OUTPUTS = [
    {
        type: "uint256",
        name: "fid",
    },
    {
        type: "uint256",
        name: "overpayment",
    },
];
/**
 * Encodes the parameters for the "registerFor" function.
 * @param options - The options for the registerFor function.
 * @returns The encoded ABI parameters.
 * @extension FARCASTER
 * @example
 * ```
 * import { encodeRegisterForParams } "thirdweb/extensions/farcaster";
 * const result = encodeRegisterForParams({
 *  to: ...,
 *  recovery: ...,
 *  deadline: ...,
 *  sig: ...,
 *  extraStorage: ...,
 * });
 * ```
 */
export function encodeRegisterForParams(options) {
    return encodeAbiParameters(FN_INPUTS, [
        options.to,
        options.recovery,
        options.deadline,
        options.sig,
        options.extraStorage,
    ]);
}
/**
 * Calls the "registerFor" function on the contract.
 * @param options - The options for the "registerFor" function.
 * @returns A prepared transaction object.
 * @extension FARCASTER
 * @example
 * ```
 * import { registerFor } from "thirdweb/extensions/farcaster";
 *
 * const transaction = registerFor({
 *  to: ...,
 *  recovery: ...,
 *  deadline: ...,
 *  sig: ...,
 *  extraStorage: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function registerFor(options) {
    return prepareContractCall({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.to,
                    resolvedParams.recovery,
                    resolvedParams.deadline,
                    resolvedParams.sig,
                    resolvedParams.extraStorage,
                ];
            }
            : [
                options.to,
                options.recovery,
                options.deadline,
                options.sig,
                options.extraStorage,
            ],
    });
}
//# sourceMappingURL=registerFor.js.map