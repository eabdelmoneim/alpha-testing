import { readContract } from "../../../../../transaction/read-contract.js";
import { encodeAbiParameters } from "../../../../../utils/abi/encodeAbiParameters.js";
import { decodeAbiParameters } from "viem";
const FN_SELECTOR = "0x6840b75e";
const FN_INPUTS = [
    {
        type: "uint256",
        name: "fid",
    },
    {
        type: "uint8",
        name: "state",
    },
];
const FN_OUTPUTS = [
    {
        type: "uint256",
    },
];
/**
 * Encodes the parameters for the "totalKeys" function.
 * @param options - The options for the totalKeys function.
 * @returns The encoded ABI parameters.
 * @extension FARCASTER
 * @example
 * ```
 * import { encodeTotalKeysParams } "thirdweb/extensions/farcaster";
 * const result = encodeTotalKeysParams({
 *  fid: ...,
 *  state: ...,
 * });
 * ```
 */
export function encodeTotalKeysParams(options) {
    return encodeAbiParameters(FN_INPUTS, [options.fid, options.state]);
}
/**
 * Decodes the result of the totalKeys function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension FARCASTER
 * @example
 * ```
 * import { decodeTotalKeysResult } from "thirdweb/extensions/farcaster";
 * const result = decodeTotalKeysResult("...");
 * ```
 */
export function decodeTotalKeysResult(result) {
    return decodeAbiParameters(FN_OUTPUTS, result)[0];
}
/**
 * Calls the "totalKeys" function on the contract.
 * @param options - The options for the totalKeys function.
 * @returns The parsed result of the function call.
 * @extension FARCASTER
 * @example
 * ```
 * import { totalKeys } from "thirdweb/extensions/farcaster";
 *
 * const result = await totalKeys({
 *  fid: ...,
 *  state: ...,
 * });
 *
 * ```
 */
export async function totalKeys(options) {
    return readContract({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.fid, options.state],
    });
}
//# sourceMappingURL=totalKeys.js.map