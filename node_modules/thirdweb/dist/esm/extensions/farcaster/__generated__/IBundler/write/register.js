import { prepareContractCall } from "../../../../../transaction/prepare-contract-call.js";
import { encodeAbiParameters } from "../../../../../utils/abi/encodeAbiParameters.js";
const FN_SELECTOR = "0xa44c9ce7";
const FN_INPUTS = [
    {
        type: "tuple",
        name: "registerParams",
        components: [
            {
                type: "address",
                name: "to",
            },
            {
                type: "address",
                name: "recovery",
            },
            {
                type: "uint256",
                name: "deadline",
            },
            {
                type: "bytes",
                name: "sig",
            },
        ],
    },
    {
        type: "tuple[]",
        name: "signerParams",
        components: [
            {
                type: "uint32",
                name: "keyType",
            },
            {
                type: "bytes",
                name: "key",
            },
            {
                type: "uint8",
                name: "metadataType",
            },
            {
                type: "bytes",
                name: "metadata",
            },
            {
                type: "uint256",
                name: "deadline",
            },
            {
                type: "bytes",
                name: "sig",
            },
        ],
    },
    {
        type: "uint256",
        name: "extraStorage",
    },
];
const FN_OUTPUTS = [
    {
        type: "uint256",
        name: "fid",
    },
];
/**
 * Encodes the parameters for the "register" function.
 * @param options - The options for the register function.
 * @returns The encoded ABI parameters.
 * @extension FARCASTER
 * @example
 * ```
 * import { encodeRegisterParams } "thirdweb/extensions/farcaster";
 * const result = encodeRegisterParams({
 *  registerParams: ...,
 *  signerParams: ...,
 *  extraStorage: ...,
 * });
 * ```
 */
export function encodeRegisterParams(options) {
    return encodeAbiParameters(FN_INPUTS, [
        options.registerParams,
        options.signerParams,
        options.extraStorage,
    ]);
}
/**
 * Calls the "register" function on the contract.
 * @param options - The options for the "register" function.
 * @returns A prepared transaction object.
 * @extension FARCASTER
 * @example
 * ```
 * import { register } from "thirdweb/extensions/farcaster";
 *
 * const transaction = register({
 *  registerParams: ...,
 *  signerParams: ...,
 *  extraStorage: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function register(options) {
    return prepareContractCall({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.registerParams,
                    resolvedParams.signerParams,
                    resolvedParams.extraStorage,
                ];
            }
            : [options.registerParams, options.signerParams, options.extraStorage],
    });
}
//# sourceMappingURL=register.js.map