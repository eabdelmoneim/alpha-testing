import { prepareContractCall } from "../../../../../transaction/prepare-contract-call.js";
import { encodeAbiParameters } from "../../../../../utils/abi/encodeAbiParameters.js";
const FN_SELECTOR = "0xba656434";
const FN_INPUTS = [
    {
        type: "address",
        name: "from",
    },
    {
        type: "address",
        name: "to",
    },
    {
        type: "uint256",
        name: "recoveryDeadline",
    },
    {
        type: "bytes",
        name: "recoverySig",
    },
    {
        type: "uint256",
        name: "toDeadline",
    },
    {
        type: "bytes",
        name: "toSig",
    },
];
const FN_OUTPUTS = [];
/**
 * Encodes the parameters for the "recoverFor" function.
 * @param options - The options for the recoverFor function.
 * @returns The encoded ABI parameters.
 * @extension FARCASTER
 * @example
 * ```
 * import { encodeRecoverForParams } "thirdweb/extensions/farcaster";
 * const result = encodeRecoverForParams({
 *  from: ...,
 *  to: ...,
 *  recoveryDeadline: ...,
 *  recoverySig: ...,
 *  toDeadline: ...,
 *  toSig: ...,
 * });
 * ```
 */
export function encodeRecoverForParams(options) {
    return encodeAbiParameters(FN_INPUTS, [
        options.from,
        options.to,
        options.recoveryDeadline,
        options.recoverySig,
        options.toDeadline,
        options.toSig,
    ]);
}
/**
 * Calls the "recoverFor" function on the contract.
 * @param options - The options for the "recoverFor" function.
 * @returns A prepared transaction object.
 * @extension FARCASTER
 * @example
 * ```
 * import { recoverFor } from "thirdweb/extensions/farcaster";
 *
 * const transaction = recoverFor({
 *  from: ...,
 *  to: ...,
 *  recoveryDeadline: ...,
 *  recoverySig: ...,
 *  toDeadline: ...,
 *  toSig: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function recoverFor(options) {
    return prepareContractCall({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.from,
                    resolvedParams.to,
                    resolvedParams.recoveryDeadline,
                    resolvedParams.recoverySig,
                    resolvedParams.toDeadline,
                    resolvedParams.toSig,
                ];
            }
            : [
                options.from,
                options.to,
                options.recoveryDeadline,
                options.recoverySig,
                options.toDeadline,
                options.toSig,
            ],
    });
}
//# sourceMappingURL=recoverFor.js.map