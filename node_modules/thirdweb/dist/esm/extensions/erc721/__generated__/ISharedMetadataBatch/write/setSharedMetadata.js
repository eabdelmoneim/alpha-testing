import { prepareContractCall } from "../../../../../transaction/prepare-contract-call.js";
import { encodeAbiParameters } from "../../../../../utils/abi/encodeAbiParameters.js";
const FN_SELECTOR = "0x696b0c1a";
const FN_INPUTS = [
    {
        type: "tuple",
        name: "metadata",
        components: [
            {
                type: "string",
                name: "name",
            },
            {
                type: "string",
                name: "description",
            },
            {
                type: "string",
                name: "imageURI",
            },
            {
                type: "string",
                name: "animationURI",
            },
        ],
    },
    {
        type: "bytes32",
        name: "id",
    },
];
const FN_OUTPUTS = [];
/**
 * Encodes the parameters for the "setSharedMetadata" function.
 * @param options - The options for the setSharedMetadata function.
 * @returns The encoded ABI parameters.
 * @extension ERC721
 * @example
 * ```
 * import { encodeSetSharedMetadataParams } "thirdweb/extensions/erc721";
 * const result = encodeSetSharedMetadataParams({
 *  metadata: ...,
 *  id: ...,
 * });
 * ```
 */
export function encodeSetSharedMetadataParams(options) {
    return encodeAbiParameters(FN_INPUTS, [options.metadata, options.id]);
}
/**
 * Calls the "setSharedMetadata" function on the contract.
 * @param options - The options for the "setSharedMetadata" function.
 * @returns A prepared transaction object.
 * @extension ERC721
 * @example
 * ```
 * import { setSharedMetadata } from "thirdweb/extensions/erc721";
 *
 * const transaction = setSharedMetadata({
 *  metadata: ...,
 *  id: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function setSharedMetadata(options) {
    return prepareContractCall({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [resolvedParams.metadata, resolvedParams.id];
            }
            : [options.metadata, options.id],
    });
}
//# sourceMappingURL=setSharedMetadata.js.map