import { readContract } from "../../../../../transaction/read-contract.js";
import { encodeAbiParameters } from "../../../../../utils/abi/encodeAbiParameters.js";
import { decodeAbiParameters } from "viem";
const FN_SELECTOR = "0xde903774";
const FN_INPUTS = [
    {
        type: "tuple",
        name: "payload",
        components: [
            {
                type: "address",
                name: "to",
            },
            {
                type: "address",
                name: "royaltyRecipient",
            },
            {
                type: "uint256",
                name: "royaltyBps",
            },
            {
                type: "address",
                name: "primarySaleRecipient",
            },
            {
                type: "string",
                name: "uri",
            },
            {
                type: "uint256",
                name: "price",
            },
            {
                type: "address",
                name: "currency",
            },
            {
                type: "uint128",
                name: "validityStartTimestamp",
            },
            {
                type: "uint128",
                name: "validityEndTimestamp",
            },
            {
                type: "bytes32",
                name: "uid",
            },
        ],
    },
    {
        type: "bytes",
        name: "signature",
    },
];
const FN_OUTPUTS = [
    {
        type: "bool",
        name: "success",
    },
    {
        type: "address",
        name: "signer",
    },
];
/**
 * Encodes the parameters for the "verify" function.
 * @param options - The options for the verify function.
 * @returns The encoded ABI parameters.
 * @extension ERC721
 * @example
 * ```ts
 * import { encodeVerifyParams } "thirdweb/extensions/erc721";
 * const result = encodeVerifyParams({
 *  payload: ...,
 *  signature: ...,
 * });
 * ```
 */
export function encodeVerifyParams(options) {
    return encodeAbiParameters(FN_INPUTS, [options.payload, options.signature]);
}
/**
 * Decodes the result of the verify function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC721
 * @example
 * ```ts
 * import { decodeVerifyResult } from "thirdweb/extensions/erc721";
 * const result = decodeVerifyResult("...");
 * ```
 */
export function decodeVerifyResult(result) {
    return decodeAbiParameters(FN_OUTPUTS, result);
}
/**
 * Calls the "verify" function on the contract.
 * @param options - The options for the verify function.
 * @returns The parsed result of the function call.
 * @extension ERC721
 * @example
 * ```ts
 * import { verify } from "thirdweb/extensions/erc721";
 *
 * const result = await verify({
 *  payload: ...,
 *  signature: ...,
 * });
 *
 * ```
 */
export async function verify(options) {
    return readContract({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.payload, options.signature],
    });
}
//# sourceMappingURL=verify.js.map