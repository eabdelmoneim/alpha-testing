import { prepareContractCall } from "../../../../../transaction/prepare-contract-call.js";
import { encodeAbiParameters } from "../../../../../utils/abi/encodeAbiParameters.js";
const FN_SELECTOR = "0xf242432a";
const FN_INPUTS = [
    {
        type: "address",
        name: "_from",
    },
    {
        type: "address",
        name: "_to",
    },
    {
        type: "uint256",
        name: "tokenId",
    },
    {
        type: "uint256",
        name: "_value",
    },
    {
        type: "bytes",
        name: "_data",
    },
];
const FN_OUTPUTS = [];
/**
 * Encodes the parameters for the "safeTransferFrom" function.
 * @param options - The options for the safeTransferFrom function.
 * @returns The encoded ABI parameters.
 * @extension ERC1155
 * @example
 * ```ts
 * import { encodeSafeTransferFromParams } "thirdweb/extensions/erc1155";
 * const result = encodeSafeTransferFromParams({
 *  from: ...,
 *  to: ...,
 *  tokenId: ...,
 *  value: ...,
 *  data: ...,
 * });
 * ```
 */
export function encodeSafeTransferFromParams(options) {
    return encodeAbiParameters(FN_INPUTS, [
        options.from,
        options.to,
        options.tokenId,
        options.value,
        options.data,
    ]);
}
/**
 * Calls the "safeTransferFrom" function on the contract.
 * @param options - The options for the "safeTransferFrom" function.
 * @returns A prepared transaction object.
 * @extension ERC1155
 * @example
 * ```ts
 * import { safeTransferFrom } from "thirdweb/extensions/erc1155";
 *
 * const transaction = safeTransferFrom({
 *  contract,
 *  from: ...,
 *  to: ...,
 *  tokenId: ...,
 *  value: ...,
 *  data: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function safeTransferFrom(options) {
    return prepareContractCall({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.from,
                    resolvedParams.to,
                    resolvedParams.tokenId,
                    resolvedParams.value,
                    resolvedParams.data,
                ];
            }
            : [
                options.from,
                options.to,
                options.tokenId,
                options.value,
                options.data,
            ],
    });
}
//# sourceMappingURL=safeTransferFrom.js.map