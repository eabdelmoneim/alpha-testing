import { prepareContractCall } from "../../../../../transaction/prepare-contract-call.js";
import { encodeAbiParameters } from "../../../../../utils/abi/encodeAbiParameters.js";
const FN_SELECTOR = "0xe23b8164";
const FN_INPUTS = [
    {
        type: "tuple[]",
        name: "phases",
        components: [
            {
                type: "uint256",
                name: "startTimestamp",
            },
            {
                type: "uint256",
                name: "maxClaimableSupply",
            },
            {
                type: "uint256",
                name: "supplyClaimed",
            },
            {
                type: "uint256",
                name: "quantityLimitPerWallet",
            },
            {
                type: "uint256",
                name: "waitTimeInSecondsBetweenClaims",
            },
            {
                type: "bytes32",
                name: "merkleRoot",
            },
            {
                type: "uint256",
                name: "pricePerToken",
            },
            {
                type: "address",
                name: "currency",
            },
        ],
    },
    {
        type: "bool",
        name: "resetClaimEligibility",
    },
];
const FN_OUTPUTS = [];
/**
 * Encodes the parameters for the "setClaimConditions" function.
 * @param options - The options for the setClaimConditions function.
 * @returns The encoded ABI parameters.
 * @extension ERC20
 * @example
 * ```
 * import { encodeSetClaimConditionsParams } "thirdweb/extensions/erc20";
 * const result = encodeSetClaimConditionsParams({
 *  phases: ...,
 *  resetClaimEligibility: ...,
 * });
 * ```
 */
export function encodeSetClaimConditionsParams(options) {
    return encodeAbiParameters(FN_INPUTS, [
        options.phases,
        options.resetClaimEligibility,
    ]);
}
/**
 * Calls the "setClaimConditions" function on the contract.
 * @param options - The options for the "setClaimConditions" function.
 * @returns A prepared transaction object.
 * @extension ERC20
 * @example
 * ```
 * import { setClaimConditions } from "thirdweb/extensions/erc20";
 *
 * const transaction = setClaimConditions({
 *  phases: ...,
 *  resetClaimEligibility: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function setClaimConditions(options) {
    return prepareContractCall({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.phases,
                    resolvedParams.resetClaimEligibility,
                ];
            }
            : [options.phases, options.resetClaimEligibility],
    });
}
//# sourceMappingURL=setClaimConditions.js.map