import { prepareContractCall } from "../../../../../transaction/prepare-contract-call.js";
import { encodeAbiParameters } from "../../../../../utils/abi/encodeAbiParameters.js";
const FN_SELECTOR = "0xd505accf";
const FN_INPUTS = [
    {
        type: "address",
        name: "owner",
    },
    {
        type: "address",
        name: "spender",
    },
    {
        type: "uint256",
        name: "value",
    },
    {
        type: "uint256",
        name: "deadline",
    },
    {
        type: "uint8",
        name: "v",
    },
    {
        type: "bytes32",
        name: "r",
    },
    {
        type: "bytes32",
        name: "s",
    },
];
const FN_OUTPUTS = [];
/**
 * Encodes the parameters for the "permit" function.
 * @param options - The options for the permit function.
 * @returns The encoded ABI parameters.
 * @extension ERC20
 * @example
 * ```ts
 * import { encodePermitParams } "thirdweb/extensions/erc20";
 * const result = encodePermitParams({
 *  owner: ...,
 *  spender: ...,
 *  value: ...,
 *  deadline: ...,
 *  v: ...,
 *  r: ...,
 *  s: ...,
 * });
 * ```
 */
export function encodePermitParams(options) {
    return encodeAbiParameters(FN_INPUTS, [
        options.owner,
        options.spender,
        options.value,
        options.deadline,
        options.v,
        options.r,
        options.s,
    ]);
}
/**
 * Calls the "permit" function on the contract.
 * @param options - The options for the "permit" function.
 * @returns A prepared transaction object.
 * @extension ERC20
 * @example
 * ```ts
 * import { permit } from "thirdweb/extensions/erc20";
 *
 * const transaction = permit({
 *  contract,
 *  owner: ...,
 *  spender: ...,
 *  value: ...,
 *  deadline: ...,
 *  v: ...,
 *  r: ...,
 *  s: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function permit(options) {
    return prepareContractCall({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.owner,
                    resolvedParams.spender,
                    resolvedParams.value,
                    resolvedParams.deadline,
                    resolvedParams.v,
                    resolvedParams.r,
                    resolvedParams.s,
                ];
            }
            : [
                options.owner,
                options.spender,
                options.value,
                options.deadline,
                options.v,
                options.r,
                options.s,
            ],
    });
}
//# sourceMappingURL=permit.js.map