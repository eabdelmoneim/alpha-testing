import { prepareContractCall } from "../../../../../transaction/prepare-contract-call.js";
import { encodeAbiParameters } from "../../../../../utils/abi/encodeAbiParameters.js";
const FN_SELECTOR = "0x23b872dd";
const FN_INPUTS = [
    {
        type: "address",
        name: "from",
    },
    {
        type: "address",
        name: "to",
    },
    {
        type: "uint256",
        name: "value",
    },
];
const FN_OUTPUTS = [
    {
        type: "bool",
    },
];
/**
 * Encodes the parameters for the "transferFrom" function.
 * @param options - The options for the transferFrom function.
 * @returns The encoded ABI parameters.
 * @extension ERC20
 * @example
 * ```
 * import { encodeTransferFromParams } "thirdweb/extensions/erc20";
 * const result = encodeTransferFromParams({
 *  from: ...,
 *  to: ...,
 *  value: ...,
 * });
 * ```
 */
export function encodeTransferFromParams(options) {
    return encodeAbiParameters(FN_INPUTS, [
        options.from,
        options.to,
        options.value,
    ]);
}
/**
 * Calls the "transferFrom" function on the contract.
 * @param options - The options for the "transferFrom" function.
 * @returns A prepared transaction object.
 * @extension ERC20
 * @example
 * ```
 * import { transferFrom } from "thirdweb/extensions/erc20";
 *
 * const transaction = transferFrom({
 *  from: ...,
 *  to: ...,
 *  value: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function transferFrom(options) {
    return prepareContractCall({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.from,
                    resolvedParams.to,
                    resolvedParams.value,
                ];
            }
            : [options.from, options.to, options.value],
    });
}
//# sourceMappingURL=transferFrom.js.map