import { prepareContractCall } from "../../../../../transaction/prepare-contract-call.js";
import { encodeAbiParameters } from "../../../../../utils/abi/encodeAbiParameters.js";
const FN_SELECTOR = "0xa1671295";
const FN_INPUTS = [
    {
        type: "address",
        name: "tokenA",
    },
    {
        type: "address",
        name: "tokenB",
    },
    {
        type: "uint24",
        name: "fee",
    },
];
const FN_OUTPUTS = [
    {
        type: "address",
        name: "pool",
    },
];
/**
 * Encodes the parameters for the "createPool" function.
 * @param options - The options for the createPool function.
 * @returns The encoded ABI parameters.
 * @extension UNISWAP
 * @example
 * ```
 * import { encodeCreatePoolParams } "thirdweb/extensions/uniswap";
 * const result = encodeCreatePoolParams({
 *  tokenA: ...,
 *  tokenB: ...,
 *  fee: ...,
 * });
 * ```
 */
export function encodeCreatePoolParams(options) {
    return encodeAbiParameters(FN_INPUTS, [
        options.tokenA,
        options.tokenB,
        options.fee,
    ]);
}
/**
 * Calls the "createPool" function on the contract.
 * @param options - The options for the "createPool" function.
 * @returns A prepared transaction object.
 * @extension UNISWAP
 * @example
 * ```
 * import { createPool } from "thirdweb/extensions/uniswap";
 *
 * const transaction = createPool({
 *  tokenA: ...,
 *  tokenB: ...,
 *  fee: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function createPool(options) {
    return prepareContractCall({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.tokenA,
                    resolvedParams.tokenB,
                    resolvedParams.fee,
                ];
            }
            : [options.tokenA, options.tokenB, options.fee],
    });
}
//# sourceMappingURL=createPool.js.map