import { prepareContractCall } from "../../../../../transaction/prepare-contract-call.js";
import { encodeAbiParameters } from "../../../../../utils/abi/encodeAbiParameters.js";
const FN_SELECTOR = "0x30d07f21";
const FN_INPUTS = [
    {
        type: "address",
        name: "tokenIn",
    },
    {
        type: "address",
        name: "tokenOut",
    },
    {
        type: "uint24",
        name: "fee",
    },
    {
        type: "uint256",
        name: "amountOut",
    },
    {
        type: "uint160",
        name: "sqrtPriceLimitX96",
    },
];
const FN_OUTPUTS = [
    {
        type: "uint256",
        name: "amountIn",
    },
];
/**
 * Encodes the parameters for the "quoteExactOutputSingle" function.
 * @param options - The options for the quoteExactOutputSingle function.
 * @returns The encoded ABI parameters.
 * @extension UNISWAP
 * @example
 * ```ts
 * import { encodeQuoteExactOutputSingleParams } "thirdweb/extensions/uniswap";
 * const result = encodeQuoteExactOutputSingleParams({
 *  tokenIn: ...,
 *  tokenOut: ...,
 *  fee: ...,
 *  amountOut: ...,
 *  sqrtPriceLimitX96: ...,
 * });
 * ```
 */
export function encodeQuoteExactOutputSingleParams(options) {
    return encodeAbiParameters(FN_INPUTS, [
        options.tokenIn,
        options.tokenOut,
        options.fee,
        options.amountOut,
        options.sqrtPriceLimitX96,
    ]);
}
/**
 * Calls the "quoteExactOutputSingle" function on the contract.
 * @param options - The options for the "quoteExactOutputSingle" function.
 * @returns A prepared transaction object.
 * @extension UNISWAP
 * @example
 * ```ts
 * import { quoteExactOutputSingle } from "thirdweb/extensions/uniswap";
 *
 * const transaction = quoteExactOutputSingle({
 *  contract,
 *  tokenIn: ...,
 *  tokenOut: ...,
 *  fee: ...,
 *  amountOut: ...,
 *  sqrtPriceLimitX96: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function quoteExactOutputSingle(options) {
    return prepareContractCall({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.tokenIn,
                    resolvedParams.tokenOut,
                    resolvedParams.fee,
                    resolvedParams.amountOut,
                    resolvedParams.sqrtPriceLimitX96,
                ];
            }
            : [
                options.tokenIn,
                options.tokenOut,
                options.fee,
                options.amountOut,
                options.sqrtPriceLimitX96,
            ],
    });
}
//# sourceMappingURL=quoteExactOutputSingle.js.map