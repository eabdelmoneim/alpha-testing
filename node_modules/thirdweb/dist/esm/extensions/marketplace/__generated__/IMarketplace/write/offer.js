import { prepareContractCall } from "../../../../../transaction/prepare-contract-call.js";
import { encodeAbiParameters } from "../../../../../utils/abi/encodeAbiParameters.js";
const FN_SELECTOR = "0x5fef45e7";
const FN_INPUTS = [
    {
        type: "uint256",
        name: "_listingId",
    },
    {
        type: "uint256",
        name: "_quantityWanted",
    },
    {
        type: "address",
        name: "_currency",
    },
    {
        type: "uint256",
        name: "_pricePerToken",
    },
    {
        type: "uint256",
        name: "_expirationTimestamp",
    },
];
const FN_OUTPUTS = [];
/**
 * Encodes the parameters for the "offer" function.
 * @param options - The options for the offer function.
 * @returns The encoded ABI parameters.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { encodeOfferParams } "thirdweb/extensions/marketplace";
 * const result = encodeOfferParams({
 *  listingId: ...,
 *  quantityWanted: ...,
 *  currency: ...,
 *  pricePerToken: ...,
 *  expirationTimestamp: ...,
 * });
 * ```
 */
export function encodeOfferParams(options) {
    return encodeAbiParameters(FN_INPUTS, [
        options.listingId,
        options.quantityWanted,
        options.currency,
        options.pricePerToken,
        options.expirationTimestamp,
    ]);
}
/**
 * Calls the "offer" function on the contract.
 * @param options - The options for the "offer" function.
 * @returns A prepared transaction object.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { offer } from "thirdweb/extensions/marketplace";
 *
 * const transaction = offer({
 *  contract,
 *  listingId: ...,
 *  quantityWanted: ...,
 *  currency: ...,
 *  pricePerToken: ...,
 *  expirationTimestamp: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function offer(options) {
    return prepareContractCall({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.listingId,
                    resolvedParams.quantityWanted,
                    resolvedParams.currency,
                    resolvedParams.pricePerToken,
                    resolvedParams.expirationTimestamp,
                ];
            }
            : [
                options.listingId,
                options.quantityWanted,
                options.currency,
                options.pricePerToken,
                options.expirationTimestamp,
            ],
    });
}
//# sourceMappingURL=offer.js.map