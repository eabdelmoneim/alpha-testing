import { prepareContractCall } from "../../../../../transaction/prepare-contract-call.js";
import { encodeAbiParameters } from "../../../../../utils/abi/encodeAbiParameters.js";
const FN_SELECTOR = "0xc4b5b15f";
const FN_INPUTS = [
    {
        type: "uint256",
        name: "_listingId",
    },
    {
        type: "uint256",
        name: "_quantityToList",
    },
    {
        type: "uint256",
        name: "_reservePricePerToken",
    },
    {
        type: "uint256",
        name: "_buyoutPricePerToken",
    },
    {
        type: "address",
        name: "_currencyToAccept",
    },
    {
        type: "uint256",
        name: "_startTime",
    },
    {
        type: "uint256",
        name: "_secondsUntilEndTime",
    },
];
const FN_OUTPUTS = [];
/**
 * Encodes the parameters for the "updateListing" function.
 * @param options - The options for the updateListing function.
 * @returns The encoded ABI parameters.
 * @extension MARKETPLACE
 * @example
 * ```
 * import { encodeUpdateListingParams } "thirdweb/extensions/marketplace";
 * const result = encodeUpdateListingParams({
 *  listingId: ...,
 *  quantityToList: ...,
 *  reservePricePerToken: ...,
 *  buyoutPricePerToken: ...,
 *  currencyToAccept: ...,
 *  startTime: ...,
 *  secondsUntilEndTime: ...,
 * });
 * ```
 */
export function encodeUpdateListingParams(options) {
    return encodeAbiParameters(FN_INPUTS, [
        options.listingId,
        options.quantityToList,
        options.reservePricePerToken,
        options.buyoutPricePerToken,
        options.currencyToAccept,
        options.startTime,
        options.secondsUntilEndTime,
    ]);
}
/**
 * Calls the "updateListing" function on the contract.
 * @param options - The options for the "updateListing" function.
 * @returns A prepared transaction object.
 * @extension MARKETPLACE
 * @example
 * ```
 * import { updateListing } from "thirdweb/extensions/marketplace";
 *
 * const transaction = updateListing({
 *  listingId: ...,
 *  quantityToList: ...,
 *  reservePricePerToken: ...,
 *  buyoutPricePerToken: ...,
 *  currencyToAccept: ...,
 *  startTime: ...,
 *  secondsUntilEndTime: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function updateListing(options) {
    return prepareContractCall({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.listingId,
                    resolvedParams.quantityToList,
                    resolvedParams.reservePricePerToken,
                    resolvedParams.buyoutPricePerToken,
                    resolvedParams.currencyToAccept,
                    resolvedParams.startTime,
                    resolvedParams.secondsUntilEndTime,
                ];
            }
            : [
                options.listingId,
                options.quantityToList,
                options.reservePricePerToken,
                options.buyoutPricePerToken,
                options.currencyToAccept,
                options.startTime,
                options.secondsUntilEndTime,
            ],
    });
}
//# sourceMappingURL=updateListing.js.map