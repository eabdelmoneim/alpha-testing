import { readContract } from "../../../../../transaction/read-contract.js";
import { encodeAbiParameters } from "../../../../../utils/abi/encodeAbiParameters.js";
import { decodeAbiParameters } from "viem";
const FN_SELECTOR = "0x35567e1a";
const FN_INPUTS = [
    {
        type: "address",
        name: "sender",
    },
    {
        type: "uint192",
        name: "key",
    },
];
const FN_OUTPUTS = [
    {
        type: "uint256",
        name: "nonce",
    },
];
/**
 * Encodes the parameters for the "getNonce" function.
 * @param options - The options for the getNonce function.
 * @returns The encoded ABI parameters.
 * @extension ERC4337
 * @example
 * ```
 * import { encodeGetNonceParams } "thirdweb/extensions/erc4337";
 * const result = encodeGetNonceParams({
 *  sender: ...,
 *  key: ...,
 * });
 * ```
 */
export function encodeGetNonceParams(options) {
    return encodeAbiParameters(FN_INPUTS, [options.sender, options.key]);
}
/**
 * Decodes the result of the getNonce function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC4337
 * @example
 * ```
 * import { decodeGetNonceResult } from "thirdweb/extensions/erc4337";
 * const result = decodeGetNonceResult("...");
 * ```
 */
export function decodeGetNonceResult(result) {
    return decodeAbiParameters(FN_OUTPUTS, result)[0];
}
/**
 * Calls the "getNonce" function on the contract.
 * @param options - The options for the getNonce function.
 * @returns The parsed result of the function call.
 * @extension ERC4337
 * @example
 * ```
 * import { getNonce } from "thirdweb/extensions/erc4337";
 *
 * const result = await getNonce({
 *  sender: ...,
 *  key: ...,
 * });
 *
 * ```
 */
export async function getNonce(options) {
    return readContract({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.sender, options.key],
    });
}
//# sourceMappingURL=getNonce.js.map