import { prepareContractCall } from "../../../../../transaction/prepare-contract-call.js";
import { encodeAbiParameters } from "../../../../../utils/abi/encodeAbiParameters.js";
const FN_SELECTOR = "0xa9a23409";
const FN_INPUTS = [
    {
        type: "uint8",
        name: "mode",
    },
    {
        type: "bytes",
        name: "context",
    },
    {
        type: "uint256",
        name: "actualGasCost",
    },
];
const FN_OUTPUTS = [];
/**
 * Encodes the parameters for the "postOp" function.
 * @param options - The options for the postOp function.
 * @returns The encoded ABI parameters.
 * @extension ERC4337
 * @example
 * ```
 * import { encodePostOpParams } "thirdweb/extensions/erc4337";
 * const result = encodePostOpParams({
 *  mode: ...,
 *  context: ...,
 *  actualGasCost: ...,
 * });
 * ```
 */
export function encodePostOpParams(options) {
    return encodeAbiParameters(FN_INPUTS, [
        options.mode,
        options.context,
        options.actualGasCost,
    ]);
}
/**
 * Calls the "postOp" function on the contract.
 * @param options - The options for the "postOp" function.
 * @returns A prepared transaction object.
 * @extension ERC4337
 * @example
 * ```
 * import { postOp } from "thirdweb/extensions/erc4337";
 *
 * const transaction = postOp({
 *  mode: ...,
 *  context: ...,
 *  actualGasCost: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function postOp(options) {
    return prepareContractCall({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.mode,
                    resolvedParams.context,
                    resolvedParams.actualGasCost,
                ];
            }
            : [options.mode, options.context, options.actualGasCost],
    });
}
//# sourceMappingURL=postOp.js.map