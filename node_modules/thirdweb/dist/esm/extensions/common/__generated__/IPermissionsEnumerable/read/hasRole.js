import { readContract } from "../../../../../transaction/read-contract.js";
import { encodeAbiParameters } from "../../../../../utils/abi/encodeAbiParameters.js";
import { decodeAbiParameters } from "viem";
const FN_SELECTOR = "0x91d14854";
const FN_INPUTS = [
    {
        type: "bytes32",
        name: "role",
    },
    {
        type: "address",
        name: "account",
    },
];
const FN_OUTPUTS = [
    {
        type: "bool",
    },
];
/**
 * Encodes the parameters for the "hasRole" function.
 * @param options - The options for the hasRole function.
 * @returns The encoded ABI parameters.
 * @extension COMMON
 * @example
 * ```
 * import { encodeHasRoleParams } "thirdweb/extensions/common";
 * const result = encodeHasRoleParams({
 *  role: ...,
 *  account: ...,
 * });
 * ```
 */
export function encodeHasRoleParams(options) {
    return encodeAbiParameters(FN_INPUTS, [options.role, options.account]);
}
/**
 * Decodes the result of the hasRole function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension COMMON
 * @example
 * ```
 * import { decodeHasRoleResult } from "thirdweb/extensions/common";
 * const result = decodeHasRoleResult("...");
 * ```
 */
export function decodeHasRoleResult(result) {
    return decodeAbiParameters(FN_OUTPUTS, result)[0];
}
/**
 * Calls the "hasRole" function on the contract.
 * @param options - The options for the hasRole function.
 * @returns The parsed result of the function call.
 * @extension COMMON
 * @example
 * ```
 * import { hasRole } from "thirdweb/extensions/common";
 *
 * const result = await hasRole({
 *  role: ...,
 *  account: ...,
 * });
 *
 * ```
 */
export async function hasRole(options) {
    return readContract({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.role, options.account],
    });
}
//# sourceMappingURL=hasRole.js.map