import { prepareContractCall } from "../../../../../transaction/prepare-contract-call.js";
import { encodeAbiParameters } from "../../../../../utils/abi/encodeAbiParameters.js";
const FN_SELECTOR = "0x9bcf7a15";
const FN_INPUTS = [
    {
        type: "uint256",
        name: "tokenId",
    },
    {
        type: "address",
        name: "recipient",
    },
    {
        type: "uint256",
        name: "bps",
    },
];
const FN_OUTPUTS = [];
/**
 * Encodes the parameters for the "setRoyaltyInfoForToken" function.
 * @param options - The options for the setRoyaltyInfoForToken function.
 * @returns The encoded ABI parameters.
 * @extension COMMON
 * @example
 * ```ts
 * import { encodeSetRoyaltyInfoForTokenParams } "thirdweb/extensions/common";
 * const result = encodeSetRoyaltyInfoForTokenParams({
 *  tokenId: ...,
 *  recipient: ...,
 *  bps: ...,
 * });
 * ```
 */
export function encodeSetRoyaltyInfoForTokenParams(options) {
    return encodeAbiParameters(FN_INPUTS, [
        options.tokenId,
        options.recipient,
        options.bps,
    ]);
}
/**
 * Calls the "setRoyaltyInfoForToken" function on the contract.
 * @param options - The options for the "setRoyaltyInfoForToken" function.
 * @returns A prepared transaction object.
 * @extension COMMON
 * @example
 * ```ts
 * import { setRoyaltyInfoForToken } from "thirdweb/extensions/common";
 *
 * const transaction = setRoyaltyInfoForToken({
 *  contract,
 *  tokenId: ...,
 *  recipient: ...,
 *  bps: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function setRoyaltyInfoForToken(options) {
    return prepareContractCall({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.tokenId,
                    resolvedParams.recipient,
                    resolvedParams.bps,
                ];
            }
            : [options.tokenId, options.recipient, options.bps],
    });
}
//# sourceMappingURL=setRoyaltyInfoForToken.js.map