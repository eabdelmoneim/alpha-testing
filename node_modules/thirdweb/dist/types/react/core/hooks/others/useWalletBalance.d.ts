import { type UseQueryOptions, type UseQueryResult } from "@tanstack/react-query";
import type { Chain } from "../../../../chains/types.js";
import type { Prettify } from "../../../../utils/type-utils.js";
import { type GetWalletBalanceOptions, type GetWalletBalanceResult } from "../../../../wallets/utils/getWalletBalance.js";
export type UseWalletBalanceOptions = Prettify<Omit<GetWalletBalanceOptions, "address" | "chain"> & {
    address: string | undefined;
    chain: Chain | undefined;
}>;
export type UseWalletBalanceQueryOptions = Omit<UseQueryOptions<GetWalletBalanceResult>, "queryFn" | "queryKey" | "enabled">;
/**
 * Fetch the balance of a wallet for a specific token.
 * @note Leave `tokenAddress` undefined to fetch the native token balance.
 * @param options {@link GetWalletBalanceOptions} - The options for fetching the wallet balance.
 * @param options.chain - The chain to fetch the wallet balance from.
 * @param options.address - The address of the wallet to fetch the balance from.
 * @param options.client - The client to use to fetch the wallet balance.
 * @param [options.tokenAddress] - The address of the token to fetch the balance for.
 * @returns {@link GetWalletBalanceResult} The result of the query.
 *
 * @example
 * ```ts
 * import { useWalletBalance } from "thirdweb/react";
 *
 * const { data, isLoading, isError } = useWalletBalance({ chain, address, client, tokenAddress });
 * ```
 * @wallet
 */
export declare function useWalletBalance(options: UseWalletBalanceOptions, queryOptions?: UseWalletBalanceQueryOptions): UseQueryResult<GetWalletBalanceResult>;
//# sourceMappingURL=useWalletBalance.d.ts.map