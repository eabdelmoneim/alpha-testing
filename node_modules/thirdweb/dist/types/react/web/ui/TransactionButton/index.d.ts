/// <reference types="react" />
import { type WaitForReceiptOptions } from "../../../../transaction/actions/wait-for-tx-receipt.js";
import type { PreparedTransaction } from "../../../../transaction/prepare-transaction.js";
import type { TransactionReceipt } from "../../../../transaction/types.js";
/**
 * Props for the [`TransactionButton`](https://portal.thirdweb.com/references/typescript/v5/TransactionButton) component.
 */
export type TransactionButtonProps = {
    /**
     * The a function returning a prepared transaction of type [`PreparedTransaction`](https://portal.thirdweb.com/references/typescript/v5/PreparedTransaction) to be sent when the button is clicked
     */
    transaction: () => PreparedTransaction<any> | Promise<PreparedTransaction<any>>;
    /**
     * Callback that will be called when the transaction is submitted onchain
     * @param transactionResult - The object of type [`WaitForReceiptOptions`](https://portal.thirdweb.com/references/typescript/v5/WaitForReceiptOptions)
     */
    onTransactionSent?: (transactionResult: WaitForReceiptOptions) => void;
    /**
     *
     * Callback that will be called when the transaction is confirmed onchain.
     * If this callback is set, the component will wait for the transaction to be confirmed.
     * @param receipt - The transaction receipt object of type [`TransactionReceipt`](https://portal.thirdweb.com/references/typescript/v5/TransactionReceipt)
     */
    onTransactionConfirmed?: (receipt: TransactionReceipt) => void;
    /**
     * The Error thrown when trying to send the transaction
     * @param error - The `Error` object thrown
     */
    onError?: (error: Error) => void;
    /**
     * Callback to be called when the button is clicked
     */
    onClick?: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
    /**
     * The className to apply to the button element for custom styling
     */
    className?: string;
    /**
     * The style to apply to the button element for custom styling
     */
    style?: React.CSSProperties;
    /**
     * The `React.ReactNode` to be rendered inside the button
     */
    children: React.ReactNode;
};
/**
 * TransactionButton component is used to render a button that triggers a transaction.
 * - It shows a "Switch Network" button if the connected wallet is on a different chain than the transaction.
 * @param props - The props for this component.
 * Refer to [TransactionButtonProps](https://portal.thirdweb.com/references/typescript/v5/TransactionButtonProps) for details.
 * @example
 * ```tsx
 * <TransactionButton
 *   transaction={() => {}}
 *   onSuccess={handleSuccess}
 *   onError={handleError}
 * >
 *   Confirm Transaction
 * </TransactionButton>
 * ```
 * @component
 */
export declare function TransactionButton(props: TransactionButtonProps): import("react/jsx-runtime.js").JSX.Element;
//# sourceMappingURL=index.d.ts.map