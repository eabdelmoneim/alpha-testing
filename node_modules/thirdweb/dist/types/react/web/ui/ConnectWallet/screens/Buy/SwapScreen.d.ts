import type { Chain } from "../../../../../../chains/types.js";
import type { ThirdwebClient } from "../../../../../../client/client.js";
import type { PreparedTransaction } from "../../../../../../transaction/prepare-transaction.js";
import type { Account, Wallet } from "../../../../../../wallets/interfaces/wallet.js";
import type { SupportedTokens } from "../../defaultTokens.js";
import type { ConnectLocale } from "../../locale/types.js";
type BuyForTx = {
    cost: bigint;
    balance: bigint;
    tx: PreparedTransaction;
    tokenSymbol: string;
};
/**
 * @internal
 */
export declare function BuyScreen(props: {
    onBack: () => void;
    supportedTokens: SupportedTokens;
    onViewPendingTx: () => void;
    client: ThirdwebClient;
    connectLocale: ConnectLocale;
    buyForTx?: BuyForTx;
}): import("react/jsx-runtime.js").JSX.Element;
/**
 *
 * @internal
 */
export declare function BuyScreenContent(props: {
    client: ThirdwebClient;
    onBack: () => void;
    supportedTokens: SupportedTokens;
    activeChain: Chain;
    activeWallet: Wallet;
    account: Account;
    onViewPendingTx: () => void;
    supportedChains: Chain[];
    connectLocale: ConnectLocale;
    buyForTx?: BuyForTx;
}): import("react/jsx-runtime.js").JSX.Element;
export {};
//# sourceMappingURL=SwapScreen.d.ts.map