import { type Abi, type AbiFunction, type ExtractAbiFunctionNames } from "abitype";
import { type TransactionRequest } from "viem";
import { type PrepareTransactionOptions } from "./prepare-transaction.js";
import type { BaseTransactionOptions, ParamsOption, ParseMethod } from "./types.js";
import type { ThirdwebContract } from "../contract/contract.js";
import { type PreparedMethod } from "../utils/abi/prepare-method.js";
export type PrepareContractCallOptions<TAbi extends Abi = [], TMethod extends AbiFunction | string | ((contract: ThirdwebContract<TAbi>) => Promise<AbiFunction>) = TAbi extends {
    length: 0;
} ? AbiFunction | string : ExtractAbiFunctionNames<TAbi>, TPreparedMethod extends PreparedMethod<ParseMethod<TAbi, TMethod>> = PreparedMethod<ParseMethod<TAbi, TMethod>>> = BaseTransactionOptions<Omit<TransactionRequest, "from" | "to" | "data" | "value"> & {
    contract: ThirdwebContract<TAbi>;
    method: TMethod | TPreparedMethod;
} & ParamsOption<TPreparedMethod[1]> & Omit<PrepareTransactionOptions, "to" | "data" | "chain" | "client">, TAbi>;
/**
 * Prepares a contract call by resolving the ABI function, parameters, and encoded data.
 * @param options - The options for preparing the contract call.
 * @returns A promise that resolves to the prepared transaction.
 * @transaction
 * @example
 * Usage with a human-readable method signature:
 * ```ts
 * import { prepareContractCall } from "thirdweb";
 *
 * const transaction = await prepareContractCall({
 *  contract,
 *  method: "function transfer(address to, uint256 value)",
 *  params: [to, value],
 * });
 * ```
 * @example
 * Usage with a JSON ABI function object:
 * ```ts
 * import { prepareContractCall } from "thirdweb";
 *
 * const transaction = await prepareContractCall({
 *  contract,
 *  method: {
 *    name: "transfer",
 *    type: "function",
 *    inputs: [
 *      { name: "to", type: "address" },
 *      { name: "value", type: "uint256" },
 *    ],
 *    outputs: [],
 *    stateMutability: "payable"
 *   },
 *  params: [to, value],
 * });
 * ```
 * @example
 * Usage with a the ABI defined on the contract:
 * ```ts
 * import { getContract, prepareContractCall } from "thirdweb";
 * const contract = getContract({
 *  ..., // chain, address, client
 *  abi: [...] // ABI with a "transfer" method
 * });
 * const transaction = prepareContractCall({
 *  contract,
 *  method: "transfer", // <- this gets inferred from the contract
 *  params: [to, value],
 * });
 * ```
 */
export declare function prepareContractCall<const TAbi extends Abi, const TMethod extends TAbi extends {
    length: 0;
} ? AbiFunction | `function ${string}` | ((contract: ThirdwebContract<TAbi>) => Promise<AbiFunction>) : ExtractAbiFunctionNames<TAbi>, const TPreparedMethod extends PreparedMethod<ParseMethod<TAbi, TMethod>> = PreparedMethod<ParseMethod<TAbi, TMethod>>>(options: PrepareContractCallOptions<TAbi, TMethod, TPreparedMethod>): import("./prepare-transaction.js").PreparedTransaction<TAbi, ParseMethod<TAbi, TMethod>>;
//# sourceMappingURL=prepare-contract-call.d.ts.map