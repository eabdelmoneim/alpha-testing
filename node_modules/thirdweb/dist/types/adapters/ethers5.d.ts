import type { Abi } from "abitype";
import type * as ethers5 from "ethers5";
import type { Chain } from "../chains/types.js";
import type { ThirdwebClient } from "../client/client.js";
import { type ThirdwebContract } from "../contract/contract.js";
import type { Account } from "../wallets/interfaces/wallet.js";
type Ethers5 = typeof ethers5;
export declare const ethers5Adapter: {
    provider: {
        /**
         * Converts a Thirdweb client and chain ID into an ethers.js provider.
         * @param options - The options for converting the Thirdweb client and chain ID into an ethers.js provider.
         * @param options.client - The Thirdweb client.
         * @param options.chain - The chain.
         * @returns The ethers.js provider.
         * @example
         * ```ts
         * import { ethers5Adapter } from "thirdweb/adapters/ethers5";
         * const provider = ethers5Adapter.provider.toEthers({ client, chainId });
         * ```
         */
        toEthers: (options: {
            client: ThirdwebClient;
            chain: Chain;
        }) => ethers5.ethers.providers.Provider;
    };
    contract: {
        /**
         * Converts a ThirdwebContract to an ethers.js Contract.
         * @param options - The options for converting the ThirdwebContract to an ethers.js Contract.
         * @param options.thirdwebContract - The ThirdwebContract to convert.
         * @returns A Promise that resolves to an ethers.js Contract.
         * @example
         * ```ts
         * import { ethers5Adapter } from "thirdweb/adapters/ethers5";
         * const ethersContract = await ethers5Adapter.contract.toEthers({
         *   thirdwebContract,
         * });
         * ```
         */
        toEthers: (options: {
            thirdwebContract: ThirdwebContract;
        }) => Promise<ethers5.ethers.Contract>;
        /**
         * Creates a ThirdwebContract instance from an ethers.js contract.
         * @param options - The options for creating the ThirdwebContract instance.
         * @returns A promise that resolves to a ThirdwebContract instance.
         * @example
         * ```ts
         * import { ethers5Adapter } from "thirdweb/adapters/ethers5";
         *
         * const twContract = await ethers5Adapter.contract.fromEthersContract({
         *  client,
         *  ethersContract,
         *  chainId,
         * });
         * ```
         */
        fromEthers: (options: FromEthersContractOptions) => Promise<Readonly<import("../contract/contract.js").ContractOptions<Abi>>>;
    };
    signer: {
        /**
         * Converts an ethers5 Signer into a Wallet object.
         * @param options - The options for converting the ethers5 Signer into a Wallet object.
         * @param options.signer - The ethers5 Signer object.
         * @returns - A Promise that resolves to aa Wallet object.
         * @example
         * ```ts
         * import { ethers5Adapter } from "thirdweb/adapters/ethers5";
         * const wallet = await ethers5Adapter.signer.fromEthersSigner({ signer });
         * ```
         */
        fromEthers: (options: {
            signer: ethers5.Signer;
        }) => Promise<Account>;
        /**
         * Converts a Thirdweb wallet to an ethers.js signer.
         * @param options - The options for converting the Thirdweb wallet to an ethers.js signer.
         * @param options.client - The thirdweb client.
         * @param options.chain - The chain.
         * @param options.account - The account.
         * @returns A promise that resolves to an ethers.js signer.
         * @example
         * ```ts
         * import { ethers5Adapter } from "thirdweb/adapters/ethers5";
         * const signer = await ethers5Adapter.signer.toEthers({ client, chain, account });
         * ```
         */
        toEthers: (options: {
            client: ThirdwebClient;
            chain: Chain;
            account: Account;
        }) => Promise<{
            /**
             * @internal
             */
            getAddress(): Promise<string>;
            /**
             * @internal
             */
            signMessage(message: string | Uint8Array): Promise<string>;
            /**
             * @internal
             */
            signTransaction(transaction: ethers5.ethers.utils.Deferrable<ethers5.ethers.providers.TransactionRequest>): Promise<string>;
            /**
             * @internal
             */
            sendTransaction(transaction: ethers5.ethers.utils.Deferrable<ethers5.ethers.providers.TransactionRequest>): Promise<ethers5.ethers.providers.TransactionResponse>;
            _signTypedData(domain: ethers5.ethers.TypedDataDomain, types: Record<string, ethers5.ethers.TypedDataField[]>, value: Record<string, any>): Promise<string>;
            /**
             * @internal
             */
            connect(): ethers5.ethers.Signer;
            readonly provider?: ethers5.ethers.providers.Provider | undefined;
            readonly _isSigner: boolean;
            getBalance(blockTag?: ethers5.ethers.providers.BlockTag | undefined): Promise<ethers5.ethers.BigNumber>;
            getTransactionCount(blockTag?: ethers5.ethers.providers.BlockTag | undefined): Promise<number>;
            estimateGas(transaction: ethers5.ethers.utils.Deferrable<ethers5.ethers.providers.TransactionRequest>): Promise<ethers5.ethers.BigNumber>;
            call(transaction: ethers5.ethers.utils.Deferrable<ethers5.ethers.providers.TransactionRequest>, blockTag?: ethers5.ethers.providers.BlockTag | undefined): Promise<string>;
            getChainId(): Promise<number>;
            getGasPrice(): Promise<ethers5.ethers.BigNumber>;
            getFeeData(): Promise<ethers5.ethers.providers.FeeData>;
            resolveName(name: string): Promise<string>;
            checkTransaction(transaction: ethers5.ethers.utils.Deferrable<ethers5.ethers.providers.TransactionRequest>): ethers5.ethers.utils.Deferrable<ethers5.ethers.providers.TransactionRequest>;
            populateTransaction(transaction: ethers5.ethers.utils.Deferrable<ethers5.ethers.providers.TransactionRequest>): Promise<ethers5.ethers.providers.TransactionRequest>;
            _checkProvider(operation?: string | undefined): void;
        }>;
    };
};
type FromEthersContractOptions = {
    client: ThirdwebClient;
    ethersContract: ethers5.Contract;
    chain: Chain;
};
/**
 * @internal
 */
export declare function toEthersSigner(ethers: Ethers5, client: ThirdwebClient, account: Account, chain: Chain): Promise<{
    /**
     * @internal
     */
    getAddress(): Promise<string>;
    /**
     * @internal
     */
    signMessage(message: string | Uint8Array): Promise<string>;
    /**
     * @internal
     */
    signTransaction(transaction: ethers5.ethers.utils.Deferrable<ethers5.ethers.providers.TransactionRequest>): Promise<string>;
    /**
     * @internal
     */
    sendTransaction(transaction: ethers5.ethers.utils.Deferrable<ethers5.ethers.providers.TransactionRequest>): Promise<ethers5.ethers.providers.TransactionResponse>;
    _signTypedData(domain: ethers5.ethers.TypedDataDomain, types: Record<string, ethers5.ethers.TypedDataField[]>, value: Record<string, any>): Promise<string>;
    /**
     * @internal
     */
    connect(): ethers5.ethers.Signer;
    readonly provider?: ethers5.ethers.providers.Provider | undefined;
    readonly _isSigner: boolean;
    getBalance(blockTag?: ethers5.ethers.providers.BlockTag | undefined): Promise<ethers5.ethers.BigNumber>;
    getTransactionCount(blockTag?: ethers5.ethers.providers.BlockTag | undefined): Promise<number>;
    estimateGas(transaction: ethers5.ethers.utils.Deferrable<ethers5.ethers.providers.TransactionRequest>): Promise<ethers5.ethers.BigNumber>;
    call(transaction: ethers5.ethers.utils.Deferrable<ethers5.ethers.providers.TransactionRequest>, blockTag?: ethers5.ethers.providers.BlockTag | undefined): Promise<string>;
    getChainId(): Promise<number>;
    getGasPrice(): Promise<ethers5.ethers.BigNumber>;
    getFeeData(): Promise<ethers5.ethers.providers.FeeData>;
    resolveName(name: string): Promise<string>;
    checkTransaction(transaction: ethers5.ethers.utils.Deferrable<ethers5.ethers.providers.TransactionRequest>): ethers5.ethers.utils.Deferrable<ethers5.ethers.providers.TransactionRequest>;
    populateTransaction(transaction: ethers5.ethers.utils.Deferrable<ethers5.ethers.providers.TransactionRequest>): Promise<ethers5.ethers.providers.TransactionRequest>;
    _checkProvider(operation?: string | undefined): void;
}>;
export {};
//# sourceMappingURL=ethers5.d.ts.map