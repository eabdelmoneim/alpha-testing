import type * as ethers6 from "ethers6";
import type { Abi } from "abitype";
import type { ThirdwebClient } from "../client/client.js";
import type { Account } from "../wallets/interfaces/wallet.js";
import type { Chain } from "../chains/types.js";
import { type ThirdwebContract } from "../contract/contract.js";
type Ethers6 = typeof ethers6;
export declare const ethers6Adapter: {
    provider: {
        /**
         * Converts a Thirdweb client and chain ID into an ethers.js provider.
         * @param client - The Thirdweb client.
         * @param chain - The chain.
         * @returns The ethers.js provider.
         * @example
         * ```ts
         * import { ethers6Adapter } from "thirdweb/adapters/ethers6";
         * const provider = ethers6Adapter.provider.toEthers(client, chainId);
         * ```
         */
        toEthers: (client: ThirdwebClient, chain: Chain) => ethers6.ethers.JsonRpcProvider;
    };
    contract: {
        /**
         * Converts a ThirdwebContract to an ethers.js Contract.
         * @param twContract - The ThirdwebContract to convert.
         * @returns A Promise that resolves to an ethers.js Contract.
         * @example
         * ```ts
         * import { ethers6Adapter } from "thirdweb/adapters/ethers6";
         * const ethersContract = await ethers6Adapter.contract.toEthers(twContract);
         * ```
         */
        toEthers: (twContract: ThirdwebContract) => Promise<ethers6.ethers.Contract>;
        /**
         * Creates a ThirdwebContract instance from an ethers.js contract.
         * @param options - The options for creating the ThirdwebContract instance.
         * @returns A promise that resolves to a ThirdwebContract instance.
         * @example
         * ```ts
         * import { ethers6Adapter } from "thirdweb/adapters/ethers6";
         *
         * const twContract = await ethers6Adapter.contract.fromEthersContract({
         *  client,
         *  ethersContract,
         *  chainId,
         * });
         * ```
         */
        fromEthers: (options: FromEthersContractOptions) => Promise<Readonly<import("../contract/contract.js").ContractOptions<Abi>>>;
    };
    signer: {
        /**
         * Converts an ethers6 Signer into an Wallet object.
         * @param signer - The ethers6 Signer object.
         * @returns - A Promise that resolves to an Wallet object.
         * @example
         * ```ts
         * import { ethers6Adapter } from "thirdweb/adapters/ethers6";
         * const wallet = await ethers6Adapter.signer.fromEthersSigner(signer);
         * ```
         */
        fromEthers: (signer: ethers6.Signer) => Promise<Account>;
        /**
         * Converts a Thirdweb wallet to an ethers.js signer.
         * @param client - The thirdweb client.
         * @param account - The account.
         * @param chain - The chain.
         * @returns A promise that resolves to an ethers.js signer.
         * @example
         * ```ts
         * import { ethers6Adapter } from "thirdweb/adapters/ethers6";
         * const signer = await ethers6Adapter.signer.toEthers(client, chain, account);
         * ```
         */
        toEthers: (client: ThirdwebClient, account: Account, chain: Chain) => Promise<ethers6.ethers.Signer>;
    };
};
type FromEthersContractOptions = {
    client: ThirdwebClient;
    ethersContract: ethers6.Contract;
    chain: Chain;
};
/**
 * Converts a Thirdweb account to an ethers.js signer.
 * @param ethers - The ethers.js library.
 * @param client - The Thirdweb client.
 * @param chain - The blockchain chain.
 * @param account - The Thirdweb account.
 * @returns A promise that resolves to an ethers.js signer.
 * @internal
 */
export declare function toEthersSigner(ethers: Ethers6, client: ThirdwebClient, account: Account, chain: Chain): Promise<ethers6.Signer>;
export {};
//# sourceMappingURL=ethers6.d.ts.map