import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
/**
 * Represents the parameters for the "withdrawRewardTokens" function.
 */
export type WithdrawRewardTokensParams = {
    amount: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_amount";
    }>;
};
/**
 * Encodes the parameters for the "withdrawRewardTokens" function.
 * @param options - The options for the withdrawRewardTokens function.
 * @returns The encoded ABI parameters.
 * @extension ERC1155
 * @example
 * ```ts
 * import { encodeWithdrawRewardTokensParams } "thirdweb/extensions/erc1155";
 * const result = encodeWithdrawRewardTokensParams({
 *  amount: ...,
 * });
 * ```
 */
export declare function encodeWithdrawRewardTokensParams(options: WithdrawRewardTokensParams): `0x${string}`;
/**
 * Calls the "withdrawRewardTokens" function on the contract.
 * @param options - The options for the "withdrawRewardTokens" function.
 * @returns A prepared transaction object.
 * @extension ERC1155
 * @example
 * ```ts
 * import { withdrawRewardTokens } from "thirdweb/extensions/erc1155";
 *
 * const transaction = withdrawRewardTokens({
 *  contract,
 *  amount: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function withdrawRewardTokens(options: BaseTransactionOptions<WithdrawRewardTokensParams | {
    asyncParams: () => Promise<WithdrawRewardTokensParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
//# sourceMappingURL=withdrawRewardTokens.d.ts.map