import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Prettify } from "../../../../../utils/type-utils.js";
/**
 * Represents the parameters for the "setClaimConditions" function.
 */
type SetClaimConditionsParamsInternal = {
    tokenId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "tokenId";
    }>;
    phases: AbiParameterToPrimitiveType<{
        type: "tuple[]";
        name: "phases";
        components: [
            {
                type: "uint256";
                name: "startTimestamp";
            },
            {
                type: "uint256";
                name: "maxClaimableSupply";
            },
            {
                type: "uint256";
                name: "supplyClaimed";
            },
            {
                type: "uint256";
                name: "quantityLimitPerWallet";
            },
            {
                type: "bytes32";
                name: "merkleRoot";
            },
            {
                type: "uint256";
                name: "pricePerToken";
            },
            {
                type: "address";
                name: "currency";
            },
            {
                type: "string";
                name: "metadata";
            }
        ];
    }>;
    resetClaimEligibility: AbiParameterToPrimitiveType<{
        type: "bool";
        name: "resetClaimEligibility";
    }>;
};
export type SetClaimConditionsParams = Prettify<SetClaimConditionsParamsInternal | {
    asyncParams: () => Promise<SetClaimConditionsParamsInternal>;
}>;
/**
 * Encodes the parameters for the "setClaimConditions" function.
 * @param options - The options for the setClaimConditions function.
 * @returns The encoded ABI parameters.
 * @extension ERC1155
 * @example
 * ```
 * import { encodeSetClaimConditionsParams } "thirdweb/extensions/erc1155";
 * const result = encodeSetClaimConditionsParams({
 *  tokenId: ...,
 *  phases: ...,
 *  resetClaimEligibility: ...,
 * });
 * ```
 */
export declare function encodeSetClaimConditionsParams(options: SetClaimConditionsParamsInternal): `0x${string}`;
/**
 * Calls the "setClaimConditions" function on the contract.
 * @param options - The options for the "setClaimConditions" function.
 * @returns A prepared transaction object.
 * @extension ERC1155
 * @example
 * ```
 * import { setClaimConditions } from "thirdweb/extensions/erc1155";
 *
 * const transaction = setClaimConditions({
 *  tokenId: ...,
 *  phases: ...,
 *  resetClaimEligibility: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function setClaimConditions(options: BaseTransactionOptions<SetClaimConditionsParams>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
export {};
//# sourceMappingURL=setClaimConditions.d.ts.map