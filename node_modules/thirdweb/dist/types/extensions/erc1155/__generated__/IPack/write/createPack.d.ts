import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Prettify } from "../../../../../utils/type-utils.js";
/**
 * Represents the parameters for the "createPack" function.
 */
type CreatePackParamsInternal = {
    contents: AbiParameterToPrimitiveType<{
        type: "tuple[]";
        name: "contents";
        components: [
            {
                type: "address";
                name: "assetContract";
            },
            {
                type: "uint8";
                name: "tokenType";
            },
            {
                type: "uint256";
                name: "tokenId";
            },
            {
                type: "uint256";
                name: "totalAmount";
            }
        ];
    }>;
    numOfRewardUnits: AbiParameterToPrimitiveType<{
        type: "uint256[]";
        name: "numOfRewardUnits";
    }>;
    packUri: AbiParameterToPrimitiveType<{
        type: "string";
        name: "packUri";
    }>;
    openStartTimestamp: AbiParameterToPrimitiveType<{
        type: "uint128";
        name: "openStartTimestamp";
    }>;
    amountDistributedPerOpen: AbiParameterToPrimitiveType<{
        type: "uint128";
        name: "amountDistributedPerOpen";
    }>;
    recipient: AbiParameterToPrimitiveType<{
        type: "address";
        name: "recipient";
    }>;
};
export type CreatePackParams = Prettify<CreatePackParamsInternal | {
    asyncParams: () => Promise<CreatePackParamsInternal>;
}>;
/**
 * Encodes the parameters for the "createPack" function.
 * @param options - The options for the createPack function.
 * @returns The encoded ABI parameters.
 * @extension ERC1155
 * @example
 * ```
 * import { encodeCreatePackParams } "thirdweb/extensions/erc1155";
 * const result = encodeCreatePackParams({
 *  contents: ...,
 *  numOfRewardUnits: ...,
 *  packUri: ...,
 *  openStartTimestamp: ...,
 *  amountDistributedPerOpen: ...,
 *  recipient: ...,
 * });
 * ```
 */
export declare function encodeCreatePackParams(options: CreatePackParamsInternal): `0x${string}`;
/**
 * Calls the "createPack" function on the contract.
 * @param options - The options for the "createPack" function.
 * @returns A prepared transaction object.
 * @extension ERC1155
 * @example
 * ```
 * import { createPack } from "thirdweb/extensions/erc1155";
 *
 * const transaction = createPack({
 *  contents: ...,
 *  numOfRewardUnits: ...,
 *  packUri: ...,
 *  openStartTimestamp: ...,
 *  amountDistributedPerOpen: ...,
 *  recipient: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function createPack(options: BaseTransactionOptions<CreatePackParams>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
export {};
//# sourceMappingURL=createPack.d.ts.map