import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Prettify } from "../../../../../utils/type-utils.js";
/**
 * Represents the parameters for the "openPack" function.
 */
type OpenPackParamsInternal = {
    packId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "packId";
    }>;
    amountToOpen: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "amountToOpen";
    }>;
};
export type OpenPackParams = Prettify<OpenPackParamsInternal | {
    asyncParams: () => Promise<OpenPackParamsInternal>;
}>;
/**
 * Encodes the parameters for the "openPack" function.
 * @param options - The options for the openPack function.
 * @returns The encoded ABI parameters.
 * @extension ERC1155
 * @example
 * ```
 * import { encodeOpenPackParams } "thirdweb/extensions/erc1155";
 * const result = encodeOpenPackParams({
 *  packId: ...,
 *  amountToOpen: ...,
 * });
 * ```
 */
export declare function encodeOpenPackParams(options: OpenPackParamsInternal): `0x${string}`;
/**
 * Calls the "openPack" function on the contract.
 * @param options - The options for the "openPack" function.
 * @returns A prepared transaction object.
 * @extension ERC1155
 * @example
 * ```
 * import { openPack } from "thirdweb/extensions/erc1155";
 *
 * const transaction = openPack({
 *  packId: ...,
 *  amountToOpen: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function openPack(options: BaseTransactionOptions<OpenPackParams>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
export {};
//# sourceMappingURL=openPack.d.ts.map