import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
/**
 * Represents the parameters for the "openPackAndClaimRewards" function.
 */
export type OpenPackAndClaimRewardsParams = {
    packId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_packId";
    }>;
    amountToOpen: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_amountToOpen";
    }>;
    callBackGasLimit: AbiParameterToPrimitiveType<{
        type: "uint32";
        name: "_callBackGasLimit";
    }>;
};
/**
 * Encodes the parameters for the "openPackAndClaimRewards" function.
 * @param options - The options for the openPackAndClaimRewards function.
 * @returns The encoded ABI parameters.
 * @extension ERC1155
 * @example
 * ```ts
 * import { encodeOpenPackAndClaimRewardsParams } "thirdweb/extensions/erc1155";
 * const result = encodeOpenPackAndClaimRewardsParams({
 *  packId: ...,
 *  amountToOpen: ...,
 *  callBackGasLimit: ...,
 * });
 * ```
 */
export declare function encodeOpenPackAndClaimRewardsParams(options: OpenPackAndClaimRewardsParams): `0x${string}`;
/**
 * Calls the "openPackAndClaimRewards" function on the contract.
 * @param options - The options for the "openPackAndClaimRewards" function.
 * @returns A prepared transaction object.
 * @extension ERC1155
 * @example
 * ```ts
 * import { openPackAndClaimRewards } from "thirdweb/extensions/erc1155";
 *
 * const transaction = openPackAndClaimRewards({
 *  contract,
 *  packId: ...,
 *  amountToOpen: ...,
 *  callBackGasLimit: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function openPackAndClaimRewards(options: BaseTransactionOptions<OpenPackAndClaimRewardsParams | {
    asyncParams: () => Promise<OpenPackAndClaimRewardsParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
//# sourceMappingURL=openPackAndClaimRewards.d.ts.map