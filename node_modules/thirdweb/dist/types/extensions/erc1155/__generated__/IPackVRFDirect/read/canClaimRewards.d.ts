import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "canClaimRewards" function.
 */
export type CanClaimRewardsParams = {
    opener: AbiParameterToPrimitiveType<{
        type: "address";
        name: "_opener";
    }>;
};
/**
 * Encodes the parameters for the "canClaimRewards" function.
 * @param options - The options for the canClaimRewards function.
 * @returns The encoded ABI parameters.
 * @extension ERC1155
 * @example
 * ```
 * import { encodeCanClaimRewardsParams } "thirdweb/extensions/erc1155";
 * const result = encodeCanClaimRewardsParams({
 *  opener: ...,
 * });
 * ```
 */
export declare function encodeCanClaimRewardsParams(options: CanClaimRewardsParams): `0x${string}`;
/**
 * Decodes the result of the canClaimRewards function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC1155
 * @example
 * ```
 * import { decodeCanClaimRewardsResult } from "thirdweb/extensions/erc1155";
 * const result = decodeCanClaimRewardsResult("...");
 * ```
 */
export declare function decodeCanClaimRewardsResult(result: Hex): boolean;
/**
 * Calls the "canClaimRewards" function on the contract.
 * @param options - The options for the canClaimRewards function.
 * @returns The parsed result of the function call.
 * @extension ERC1155
 * @example
 * ```
 * import { canClaimRewards } from "thirdweb/extensions/erc1155";
 *
 * const result = await canClaimRewards({
 *  opener: ...,
 * });
 *
 * ```
 */
export declare function canClaimRewards(options: BaseTransactionOptions<CanClaimRewardsParams>): Promise<boolean>;
//# sourceMappingURL=canClaimRewards.d.ts.map