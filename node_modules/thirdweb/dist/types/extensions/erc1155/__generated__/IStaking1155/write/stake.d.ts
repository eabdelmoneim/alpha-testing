import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Prettify } from "../../../../../utils/type-utils.js";
/**
 * Represents the parameters for the "stake" function.
 */
type StakeParamsInternal = {
    tokenId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "tokenId";
    }>;
    amount: AbiParameterToPrimitiveType<{
        type: "uint64";
        name: "amount";
    }>;
};
export type StakeParams = Prettify<StakeParamsInternal | {
    asyncParams: () => Promise<StakeParamsInternal>;
}>;
/**
 * Encodes the parameters for the "stake" function.
 * @param options - The options for the stake function.
 * @returns The encoded ABI parameters.
 * @extension ERC1155
 * @example
 * ```
 * import { encodeStakeParams } "thirdweb/extensions/erc1155";
 * const result = encodeStakeParams({
 *  tokenId: ...,
 *  amount: ...,
 * });
 * ```
 */
export declare function encodeStakeParams(options: StakeParamsInternal): `0x${string}`;
/**
 * Calls the "stake" function on the contract.
 * @param options - The options for the "stake" function.
 * @returns A prepared transaction object.
 * @extension ERC1155
 * @example
 * ```
 * import { stake } from "thirdweb/extensions/erc1155";
 *
 * const transaction = stake({
 *  tokenId: ...,
 *  amount: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function stake(options: BaseTransactionOptions<StakeParams>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
export {};
//# sourceMappingURL=stake.d.ts.map