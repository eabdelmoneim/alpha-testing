import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "getStakeInfo" function.
 */
export type GetStakeInfoParams = {
    staker: AbiParameterToPrimitiveType<{
        type: "address";
        name: "staker";
    }>;
};
/**
 * Encodes the parameters for the "getStakeInfo" function.
 * @param options - The options for the getStakeInfo function.
 * @returns The encoded ABI parameters.
 * @extension ERC1155
 * @example
 * ```
 * import { encodeGetStakeInfoParams } "thirdweb/extensions/erc1155";
 * const result = encodeGetStakeInfoParams({
 *  staker: ...,
 * });
 * ```
 */
export declare function encodeGetStakeInfoParams(options: GetStakeInfoParams): `0x${string}`;
/**
 * Decodes the result of the getStakeInfo function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC1155
 * @example
 * ```
 * import { decodeGetStakeInfoResult } from "thirdweb/extensions/erc1155";
 * const result = decodeGetStakeInfoResult("...");
 * ```
 */
export declare function decodeGetStakeInfoResult(result: Hex): readonly [readonly bigint[], readonly bigint[], bigint];
/**
 * Calls the "getStakeInfo" function on the contract.
 * @param options - The options for the getStakeInfo function.
 * @returns The parsed result of the function call.
 * @extension ERC1155
 * @example
 * ```
 * import { getStakeInfo } from "thirdweb/extensions/erc1155";
 *
 * const result = await getStakeInfo({
 *  staker: ...,
 * });
 *
 * ```
 */
export declare function getStakeInfo(options: BaseTransactionOptions<GetStakeInfoParams>): Promise<readonly [readonly bigint[], readonly bigint[], bigint]>;
//# sourceMappingURL=getStakeInfo.d.ts.map