import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Prettify } from "../../../../../utils/type-utils.js";
/**
 * Represents the parameters for the "setApprovalForAll" function.
 */
type SetApprovalForAllParamsInternal = {
    operator: AbiParameterToPrimitiveType<{
        type: "address";
        name: "_operator";
    }>;
    approved: AbiParameterToPrimitiveType<{
        type: "bool";
        name: "_approved";
    }>;
};
export type SetApprovalForAllParams = Prettify<SetApprovalForAllParamsInternal | {
    asyncParams: () => Promise<SetApprovalForAllParamsInternal>;
}>;
/**
 * Encodes the parameters for the "setApprovalForAll" function.
 * @param options - The options for the setApprovalForAll function.
 * @returns The encoded ABI parameters.
 * @extension ERC1155
 * @example
 * ```
 * import { encodeSetApprovalForAllParams } "thirdweb/extensions/erc1155";
 * const result = encodeSetApprovalForAllParams({
 *  operator: ...,
 *  approved: ...,
 * });
 * ```
 */
export declare function encodeSetApprovalForAllParams(options: SetApprovalForAllParamsInternal): `0x${string}`;
/**
 * Calls the "setApprovalForAll" function on the contract.
 * @param options - The options for the "setApprovalForAll" function.
 * @returns A prepared transaction object.
 * @extension ERC1155
 * @example
 * ```
 * import { setApprovalForAll } from "thirdweb/extensions/erc1155";
 *
 * const transaction = setApprovalForAll({
 *  operator: ...,
 *  approved: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function setApprovalForAll(options: BaseTransactionOptions<SetApprovalForAllParams>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
export {};
//# sourceMappingURL=setApprovalForAll.d.ts.map