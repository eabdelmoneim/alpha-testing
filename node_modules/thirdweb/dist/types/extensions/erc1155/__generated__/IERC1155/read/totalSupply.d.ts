import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "totalSupply" function.
 */
export type TotalSupplyParams = {
    id: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "id";
    }>;
};
/**
 * Encodes the parameters for the "totalSupply" function.
 * @param options - The options for the totalSupply function.
 * @returns The encoded ABI parameters.
 * @extension ERC1155
 * @example
 * ```
 * import { encodeTotalSupplyParams } "thirdweb/extensions/erc1155";
 * const result = encodeTotalSupplyParams({
 *  id: ...,
 * });
 * ```
 */
export declare function encodeTotalSupplyParams(options: TotalSupplyParams): `0x${string}`;
/**
 * Decodes the result of the totalSupply function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC1155
 * @example
 * ```
 * import { decodeTotalSupplyResult } from "thirdweb/extensions/erc1155";
 * const result = decodeTotalSupplyResult("...");
 * ```
 */
export declare function decodeTotalSupplyResult(result: Hex): bigint;
/**
 * Calls the "totalSupply" function on the contract.
 * @param options - The options for the totalSupply function.
 * @returns The parsed result of the function call.
 * @extension ERC1155
 * @example
 * ```
 * import { totalSupply } from "thirdweb/extensions/erc1155";
 *
 * const result = await totalSupply({
 *  id: ...,
 * });
 *
 * ```
 */
export declare function totalSupply(options: BaseTransactionOptions<TotalSupplyParams>): Promise<bigint>;
//# sourceMappingURL=totalSupply.d.ts.map