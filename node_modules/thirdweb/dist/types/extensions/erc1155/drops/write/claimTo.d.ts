import type { Address } from "abitype";
import type { BaseTransactionOptions } from "../../../../transaction/types.js";
export type ClaimToParams = {
    to: Address;
    tokenId: bigint;
    quantity: bigint;
};
/**
 * Claim ERC721 NFTs to a specified address
 * @param options - The options for the transaction
 * @extension ERC721
 * @example
 * ```ts
 * import { claimTo } from "thirdweb/extensions/erc1155";
 * const tx = await claimTo({
 *   contract,
 *   to: "0x...",
 *   tokenId: 0n,
 *   quantity: 1n,
 * });
 * ```
 * @throws If no claim condition is set
 * @returns A promise that resolves with the submitted transaction hash.
 */
export declare function claimTo(options: BaseTransactionOptions<ClaimToParams>): import("../../../../transaction/prepare-transaction.js").PreparedTransaction<any, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "receiver";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "tokenId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "quantity";
        readonly type: "uint256";
    }, {
        readonly internalType: "address";
        readonly name: "currency";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "pricePerToken";
        readonly type: "uint256";
    }, {
        readonly components: readonly [{
            readonly internalType: "bytes32[]";
            readonly name: "proof";
            readonly type: "bytes32[]";
        }, {
            readonly internalType: "uint256";
            readonly name: "quantityLimitPerWallet";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "pricePerToken";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "currency";
            readonly type: "address";
        }];
        readonly internalType: "struct IDrop.AllowlistProof";
        readonly name: "allowlistProof";
        readonly type: "tuple";
    }, {
        readonly internalType: "bytes";
        readonly name: "data";
        readonly type: "bytes";
    }];
    readonly name: "claim";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
    readonly type: "function";
}>;
//# sourceMappingURL=claimTo.d.ts.map