import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Prettify } from "../../../../../utils/type-utils.js";
/**
 * Represents the parameters for the "setPlatformFeeInfo" function.
 */
type SetPlatformFeeInfoParamsInternal = {
    platformFeeRecipient: AbiParameterToPrimitiveType<{
        type: "address";
        name: "_platformFeeRecipient";
    }>;
    platformFeeBps: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_platformFeeBps";
    }>;
};
export type SetPlatformFeeInfoParams = Prettify<SetPlatformFeeInfoParamsInternal | {
    asyncParams: () => Promise<SetPlatformFeeInfoParamsInternal>;
}>;
/**
 * Encodes the parameters for the "setPlatformFeeInfo" function.
 * @param options - The options for the setPlatformFeeInfo function.
 * @returns The encoded ABI parameters.
 * @extension MARKETPLACE
 * @example
 * ```
 * import { encodeSetPlatformFeeInfoParams } "thirdweb/extensions/marketplace";
 * const result = encodeSetPlatformFeeInfoParams({
 *  platformFeeRecipient: ...,
 *  platformFeeBps: ...,
 * });
 * ```
 */
export declare function encodeSetPlatformFeeInfoParams(options: SetPlatformFeeInfoParamsInternal): `0x${string}`;
/**
 * Calls the "setPlatformFeeInfo" function on the contract.
 * @param options - The options for the "setPlatformFeeInfo" function.
 * @returns A prepared transaction object.
 * @extension MARKETPLACE
 * @example
 * ```
 * import { setPlatformFeeInfo } from "thirdweb/extensions/marketplace";
 *
 * const transaction = setPlatformFeeInfo({
 *  platformFeeRecipient: ...,
 *  platformFeeBps: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function setPlatformFeeInfo(options: BaseTransactionOptions<SetPlatformFeeInfoParams>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
export {};
//# sourceMappingURL=setPlatformFeeInfo.d.ts.map