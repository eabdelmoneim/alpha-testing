import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Prettify } from "../../../../../utils/type-utils.js";
/**
 * Represents the parameters for the "createListing" function.
 */
type CreateListingParamsInternal = {
    params: AbiParameterToPrimitiveType<{
        type: "tuple";
        name: "_params";
        components: [
            {
                type: "address";
                name: "assetContract";
            },
            {
                type: "uint256";
                name: "tokenId";
            },
            {
                type: "uint256";
                name: "startTime";
            },
            {
                type: "uint256";
                name: "secondsUntilEndTime";
            },
            {
                type: "uint256";
                name: "quantityToList";
            },
            {
                type: "address";
                name: "currencyToAccept";
            },
            {
                type: "uint256";
                name: "reservePricePerToken";
            },
            {
                type: "uint256";
                name: "buyoutPricePerToken";
            },
            {
                type: "uint8";
                name: "listingType";
            }
        ];
    }>;
};
export type CreateListingParams = Prettify<CreateListingParamsInternal | {
    asyncParams: () => Promise<CreateListingParamsInternal>;
}>;
/**
 * Encodes the parameters for the "createListing" function.
 * @param options - The options for the createListing function.
 * @returns The encoded ABI parameters.
 * @extension MARKETPLACE
 * @example
 * ```
 * import { encodeCreateListingParams } "thirdweb/extensions/marketplace";
 * const result = encodeCreateListingParams({
 *  params: ...,
 * });
 * ```
 */
export declare function encodeCreateListingParams(options: CreateListingParamsInternal): `0x${string}`;
/**
 * Calls the "createListing" function on the contract.
 * @param options - The options for the "createListing" function.
 * @returns A prepared transaction object.
 * @extension MARKETPLACE
 * @example
 * ```
 * import { createListing } from "thirdweb/extensions/marketplace";
 *
 * const transaction = createListing({
 *  params: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function createListing(options: BaseTransactionOptions<CreateListingParams>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
export {};
//# sourceMappingURL=createListing.d.ts.map