import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
/**
 * Represents the parameters for the "updateListing" function.
 */
export type UpdateListingParams = {
    listingId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_listingId";
    }>;
    quantityToList: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_quantityToList";
    }>;
    reservePricePerToken: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_reservePricePerToken";
    }>;
    buyoutPricePerToken: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_buyoutPricePerToken";
    }>;
    currencyToAccept: AbiParameterToPrimitiveType<{
        type: "address";
        name: "_currencyToAccept";
    }>;
    startTime: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_startTime";
    }>;
    secondsUntilEndTime: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_secondsUntilEndTime";
    }>;
};
/**
 * Encodes the parameters for the "updateListing" function.
 * @param options - The options for the updateListing function.
 * @returns The encoded ABI parameters.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { encodeUpdateListingParams } "thirdweb/extensions/marketplace";
 * const result = encodeUpdateListingParams({
 *  listingId: ...,
 *  quantityToList: ...,
 *  reservePricePerToken: ...,
 *  buyoutPricePerToken: ...,
 *  currencyToAccept: ...,
 *  startTime: ...,
 *  secondsUntilEndTime: ...,
 * });
 * ```
 */
export declare function encodeUpdateListingParams(options: UpdateListingParams): `0x${string}`;
/**
 * Calls the "updateListing" function on the contract.
 * @param options - The options for the "updateListing" function.
 * @returns A prepared transaction object.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { updateListing } from "thirdweb/extensions/marketplace";
 *
 * const transaction = updateListing({
 *  contract,
 *  listingId: ...,
 *  quantityToList: ...,
 *  reservePricePerToken: ...,
 *  buyoutPricePerToken: ...,
 *  currencyToAccept: ...,
 *  startTime: ...,
 *  secondsUntilEndTime: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function updateListing(options: BaseTransactionOptions<UpdateListingParams | {
    asyncParams: () => Promise<UpdateListingParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
//# sourceMappingURL=updateListing.d.ts.map