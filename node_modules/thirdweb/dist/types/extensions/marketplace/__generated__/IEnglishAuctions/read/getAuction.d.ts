import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "getAuction" function.
 */
export type GetAuctionParams = {
    auctionId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_auctionId";
    }>;
};
/**
 * Encodes the parameters for the "getAuction" function.
 * @param options - The options for the getAuction function.
 * @returns The encoded ABI parameters.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { encodeGetAuctionParams } "thirdweb/extensions/marketplace";
 * const result = encodeGetAuctionParams({
 *  auctionId: ...,
 * });
 * ```
 */
export declare function encodeGetAuctionParams(options: GetAuctionParams): `0x${string}`;
/**
 * Decodes the result of the getAuction function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { decodeGetAuctionResult } from "thirdweb/extensions/marketplace";
 * const result = decodeGetAuctionResult("...");
 * ```
 */
export declare function decodeGetAuctionResult(result: Hex): {
    auctionId: bigint;
    tokenId: bigint;
    quantity: bigint;
    minimumBidAmount: bigint;
    buyoutBidAmount: bigint;
    timeBufferInSeconds: bigint;
    bidBufferBps: bigint;
    startTimestamp: bigint;
    endTimestamp: bigint;
    auctionCreator: string;
    assetContract: string;
    currency: string;
    tokenType: number;
    status: number;
};
/**
 * Calls the "getAuction" function on the contract.
 * @param options - The options for the getAuction function.
 * @returns The parsed result of the function call.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { getAuction } from "thirdweb/extensions/marketplace";
 *
 * const result = await getAuction({
 *  auctionId: ...,
 * });
 *
 * ```
 */
export declare function getAuction(options: BaseTransactionOptions<GetAuctionParams>): Promise<{
    auctionId: bigint;
    tokenId: bigint;
    quantity: bigint;
    minimumBidAmount: bigint;
    buyoutBidAmount: bigint;
    timeBufferInSeconds: bigint;
    bidBufferBps: bigint;
    startTimestamp: bigint;
    endTimestamp: bigint;
    auctionCreator: string;
    assetContract: string;
    currency: string;
    tokenType: number;
    status: number;
}>;
//# sourceMappingURL=getAuction.d.ts.map