import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "getWinningBid" function.
 */
export type GetWinningBidParams = {
    auctionId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_auctionId";
    }>;
};
/**
 * Encodes the parameters for the "getWinningBid" function.
 * @param options - The options for the getWinningBid function.
 * @returns The encoded ABI parameters.
 * @extension MARKETPLACE
 * @example
 * ```
 * import { encodeGetWinningBidParams } "thirdweb/extensions/marketplace";
 * const result = encodeGetWinningBidParams({
 *  auctionId: ...,
 * });
 * ```
 */
export declare function encodeGetWinningBidParams(options: GetWinningBidParams): `0x${string}`;
/**
 * Decodes the result of the getWinningBid function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MARKETPLACE
 * @example
 * ```
 * import { decodeGetWinningBidResult } from "thirdweb/extensions/marketplace";
 * const result = decodeGetWinningBidResult("...");
 * ```
 */
export declare function decodeGetWinningBidResult(result: Hex): readonly [string, string, bigint];
/**
 * Calls the "getWinningBid" function on the contract.
 * @param options - The options for the getWinningBid function.
 * @returns The parsed result of the function call.
 * @extension MARKETPLACE
 * @example
 * ```
 * import { getWinningBid } from "thirdweb/extensions/marketplace";
 *
 * const result = await getWinningBid({
 *  auctionId: ...,
 * });
 *
 * ```
 */
export declare function getWinningBid(options: BaseTransactionOptions<GetWinningBidParams>): Promise<readonly [string, string, bigint]>;
//# sourceMappingURL=getWinningBid.d.ts.map