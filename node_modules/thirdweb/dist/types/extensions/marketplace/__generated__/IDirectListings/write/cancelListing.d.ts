import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Prettify } from "../../../../../utils/type-utils.js";
/**
 * Represents the parameters for the "cancelListing" function.
 */
type CancelListingParamsInternal = {
    listingId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_listingId";
    }>;
};
export type CancelListingParams = Prettify<CancelListingParamsInternal | {
    asyncParams: () => Promise<CancelListingParamsInternal>;
}>;
/**
 * Encodes the parameters for the "cancelListing" function.
 * @param options - The options for the cancelListing function.
 * @returns The encoded ABI parameters.
 * @extension MARKETPLACE
 * @example
 * ```
 * import { encodeCancelListingParams } "thirdweb/extensions/marketplace";
 * const result = encodeCancelListingParams({
 *  listingId: ...,
 * });
 * ```
 */
export declare function encodeCancelListingParams(options: CancelListingParamsInternal): `0x${string}`;
/**
 * Calls the "cancelListing" function on the contract.
 * @param options - The options for the "cancelListing" function.
 * @returns A prepared transaction object.
 * @extension MARKETPLACE
 * @example
 * ```
 * import { cancelListing } from "thirdweb/extensions/marketplace";
 *
 * const transaction = cancelListing({
 *  listingId: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function cancelListing(options: BaseTransactionOptions<CancelListingParams>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
export {};
//# sourceMappingURL=cancelListing.d.ts.map