import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "getAllValidListings" function.
 */
export type GetAllValidListingsParams = {
    startId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_startId";
    }>;
    endId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_endId";
    }>;
};
/**
 * Encodes the parameters for the "getAllValidListings" function.
 * @param options - The options for the getAllValidListings function.
 * @returns The encoded ABI parameters.
 * @extension MARKETPLACE
 * @example
 * ```
 * import { encodeGetAllValidListingsParams } "thirdweb/extensions/marketplace";
 * const result = encodeGetAllValidListingsParams({
 *  startId: ...,
 *  endId: ...,
 * });
 * ```
 */
export declare function encodeGetAllValidListingsParams(options: GetAllValidListingsParams): `0x${string}`;
/**
 * Decodes the result of the getAllValidListings function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MARKETPLACE
 * @example
 * ```
 * import { decodeGetAllValidListingsResult } from "thirdweb/extensions/marketplace";
 * const result = decodeGetAllValidListingsResult("...");
 * ```
 */
export declare function decodeGetAllValidListingsResult(result: Hex): readonly {
    listingId: bigint;
    tokenId: bigint;
    quantity: bigint;
    pricePerToken: bigint;
    startTimestamp: bigint;
    endTimestamp: bigint;
    listingCreator: string;
    assetContract: string;
    currency: string;
    tokenType: number;
    status: number;
    reserved: boolean;
}[];
/**
 * Calls the "getAllValidListings" function on the contract.
 * @param options - The options for the getAllValidListings function.
 * @returns The parsed result of the function call.
 * @extension MARKETPLACE
 * @example
 * ```
 * import { getAllValidListings } from "thirdweb/extensions/marketplace";
 *
 * const result = await getAllValidListings({
 *  startId: ...,
 *  endId: ...,
 * });
 *
 * ```
 */
export declare function getAllValidListings(options: BaseTransactionOptions<GetAllValidListingsParams>): Promise<readonly {
    listingId: bigint;
    tokenId: bigint;
    quantity: bigint;
    pricePerToken: bigint;
    startTimestamp: bigint;
    endTimestamp: bigint;
    listingCreator: string;
    assetContract: string;
    currency: string;
    tokenType: number;
    status: number;
    reserved: boolean;
}[]>;
//# sourceMappingURL=getAllValidListings.d.ts.map