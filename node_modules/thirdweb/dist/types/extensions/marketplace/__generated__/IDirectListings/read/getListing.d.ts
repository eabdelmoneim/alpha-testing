import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "getListing" function.
 */
export type GetListingParams = {
    listingId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_listingId";
    }>;
};
/**
 * Encodes the parameters for the "getListing" function.
 * @param options - The options for the getListing function.
 * @returns The encoded ABI parameters.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { encodeGetListingParams } "thirdweb/extensions/marketplace";
 * const result = encodeGetListingParams({
 *  listingId: ...,
 * });
 * ```
 */
export declare function encodeGetListingParams(options: GetListingParams): `0x${string}`;
/**
 * Decodes the result of the getListing function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { decodeGetListingResult } from "thirdweb/extensions/marketplace";
 * const result = decodeGetListingResult("...");
 * ```
 */
export declare function decodeGetListingResult(result: Hex): {
    listingId: bigint;
    tokenId: bigint;
    quantity: bigint;
    pricePerToken: bigint;
    startTimestamp: bigint;
    endTimestamp: bigint;
    listingCreator: string;
    assetContract: string;
    currency: string;
    tokenType: number;
    status: number;
    reserved: boolean;
};
/**
 * Calls the "getListing" function on the contract.
 * @param options - The options for the getListing function.
 * @returns The parsed result of the function call.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { getListing } from "thirdweb/extensions/marketplace";
 *
 * const result = await getListing({
 *  listingId: ...,
 * });
 *
 * ```
 */
export declare function getListing(options: BaseTransactionOptions<GetListingParams>): Promise<{
    listingId: bigint;
    tokenId: bigint;
    quantity: bigint;
    pricePerToken: bigint;
    startTimestamp: bigint;
    endTimestamp: bigint;
    listingCreator: string;
    assetContract: string;
    currency: string;
    tokenType: number;
    status: number;
    reserved: boolean;
}>;
//# sourceMappingURL=getListing.d.ts.map