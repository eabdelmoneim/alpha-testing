import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "getAllOffers" function.
 */
export type GetAllOffersParams = {
    startId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_startId";
    }>;
    endId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_endId";
    }>;
};
/**
 * Encodes the parameters for the "getAllOffers" function.
 * @param options - The options for the getAllOffers function.
 * @returns The encoded ABI parameters.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { encodeGetAllOffersParams } "thirdweb/extensions/marketplace";
 * const result = encodeGetAllOffersParams({
 *  startId: ...,
 *  endId: ...,
 * });
 * ```
 */
export declare function encodeGetAllOffersParams(options: GetAllOffersParams): `0x${string}`;
/**
 * Decodes the result of the getAllOffers function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { decodeGetAllOffersResult } from "thirdweb/extensions/marketplace";
 * const result = decodeGetAllOffersResult("...");
 * ```
 */
export declare function decodeGetAllOffersResult(result: Hex): readonly {
    offerId: bigint;
    tokenId: bigint;
    quantity: bigint;
    totalPrice: bigint;
    expirationTimestamp: bigint;
    offeror: string;
    assetContract: string;
    currency: string;
    tokenType: number;
    status: number;
}[];
/**
 * Calls the "getAllOffers" function on the contract.
 * @param options - The options for the getAllOffers function.
 * @returns The parsed result of the function call.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { getAllOffers } from "thirdweb/extensions/marketplace";
 *
 * const result = await getAllOffers({
 *  startId: ...,
 *  endId: ...,
 * });
 *
 * ```
 */
export declare function getAllOffers(options: BaseTransactionOptions<GetAllOffersParams>): Promise<readonly {
    offerId: bigint;
    tokenId: bigint;
    quantity: bigint;
    totalPrice: bigint;
    expirationTimestamp: bigint;
    offeror: string;
    assetContract: string;
    currency: string;
    tokenType: number;
    status: number;
}[]>;
//# sourceMappingURL=getAllOffers.d.ts.map