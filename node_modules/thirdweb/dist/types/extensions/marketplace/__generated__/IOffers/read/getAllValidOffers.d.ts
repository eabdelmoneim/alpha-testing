import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "getAllValidOffers" function.
 */
export type GetAllValidOffersParams = {
    startId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_startId";
    }>;
    endId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_endId";
    }>;
};
/**
 * Encodes the parameters for the "getAllValidOffers" function.
 * @param options - The options for the getAllValidOffers function.
 * @returns The encoded ABI parameters.
 * @extension MARKETPLACE
 * @example
 * ```
 * import { encodeGetAllValidOffersParams } "thirdweb/extensions/marketplace";
 * const result = encodeGetAllValidOffersParams({
 *  startId: ...,
 *  endId: ...,
 * });
 * ```
 */
export declare function encodeGetAllValidOffersParams(options: GetAllValidOffersParams): `0x${string}`;
/**
 * Decodes the result of the getAllValidOffers function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MARKETPLACE
 * @example
 * ```
 * import { decodeGetAllValidOffersResult } from "thirdweb/extensions/marketplace";
 * const result = decodeGetAllValidOffersResult("...");
 * ```
 */
export declare function decodeGetAllValidOffersResult(result: Hex): readonly {
    offerId: bigint;
    tokenId: bigint;
    quantity: bigint;
    totalPrice: bigint;
    expirationTimestamp: bigint;
    offeror: string;
    assetContract: string;
    currency: string;
    tokenType: number;
    status: number;
}[];
/**
 * Calls the "getAllValidOffers" function on the contract.
 * @param options - The options for the getAllValidOffers function.
 * @returns The parsed result of the function call.
 * @extension MARKETPLACE
 * @example
 * ```
 * import { getAllValidOffers } from "thirdweb/extensions/marketplace";
 *
 * const result = await getAllValidOffers({
 *  startId: ...,
 *  endId: ...,
 * });
 *
 * ```
 */
export declare function getAllValidOffers(options: BaseTransactionOptions<GetAllValidOffersParams>): Promise<readonly {
    offerId: bigint;
    tokenId: bigint;
    quantity: bigint;
    totalPrice: bigint;
    expirationTimestamp: bigint;
    offeror: string;
    assetContract: string;
    currency: string;
    tokenType: number;
    status: number;
}[]>;
//# sourceMappingURL=getAllValidOffers.d.ts.map