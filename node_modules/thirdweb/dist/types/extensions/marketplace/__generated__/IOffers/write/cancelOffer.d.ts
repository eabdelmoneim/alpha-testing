import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Prettify } from "../../../../../utils/type-utils.js";
/**
 * Represents the parameters for the "cancelOffer" function.
 */
type CancelOfferParamsInternal = {
    offerId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_offerId";
    }>;
};
export type CancelOfferParams = Prettify<CancelOfferParamsInternal | {
    asyncParams: () => Promise<CancelOfferParamsInternal>;
}>;
/**
 * Encodes the parameters for the "cancelOffer" function.
 * @param options - The options for the cancelOffer function.
 * @returns The encoded ABI parameters.
 * @extension MARKETPLACE
 * @example
 * ```
 * import { encodeCancelOfferParams } "thirdweb/extensions/marketplace";
 * const result = encodeCancelOfferParams({
 *  offerId: ...,
 * });
 * ```
 */
export declare function encodeCancelOfferParams(options: CancelOfferParamsInternal): `0x${string}`;
/**
 * Calls the "cancelOffer" function on the contract.
 * @param options - The options for the "cancelOffer" function.
 * @returns A prepared transaction object.
 * @extension MARKETPLACE
 * @example
 * ```
 * import { cancelOffer } from "thirdweb/extensions/marketplace";
 *
 * const transaction = cancelOffer({
 *  offerId: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function cancelOffer(options: BaseTransactionOptions<CancelOfferParams>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
export {};
//# sourceMappingURL=cancelOffer.d.ts.map