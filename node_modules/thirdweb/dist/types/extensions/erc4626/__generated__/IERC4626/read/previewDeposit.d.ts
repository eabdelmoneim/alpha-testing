import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "previewDeposit" function.
 */
export type PreviewDepositParams = {
    assets: AbiParameterToPrimitiveType<{
        name: "assets";
        type: "uint256";
        internalType: "uint256";
    }>;
};
/**
 * Encodes the parameters for the "previewDeposit" function.
 * @param options - The options for the previewDeposit function.
 * @returns The encoded ABI parameters.
 * @extension ERC4626
 * @example
 * ```ts
 * import { encodePreviewDepositParams } "thirdweb/extensions/erc4626";
 * const result = encodePreviewDepositParams({
 *  assets: ...,
 * });
 * ```
 */
export declare function encodePreviewDepositParams(options: PreviewDepositParams): `0x${string}`;
/**
 * Decodes the result of the previewDeposit function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC4626
 * @example
 * ```ts
 * import { decodePreviewDepositResult } from "thirdweb/extensions/erc4626";
 * const result = decodePreviewDepositResult("...");
 * ```
 */
export declare function decodePreviewDepositResult(result: Hex): bigint;
/**
 * Calls the "previewDeposit" function on the contract.
 * @param options - The options for the previewDeposit function.
 * @returns The parsed result of the function call.
 * @extension ERC4626
 * @example
 * ```ts
 * import { previewDeposit } from "thirdweb/extensions/erc4626";
 *
 * const result = await previewDeposit({
 *  assets: ...,
 * });
 *
 * ```
 */
export declare function previewDeposit(options: BaseTransactionOptions<PreviewDepositParams>): Promise<bigint>;
//# sourceMappingURL=previewDeposit.d.ts.map