import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Prettify } from "../../../../../utils/type-utils.js";
/**
 * Represents the parameters for the "deposit" function.
 */
type DepositParamsInternal = {
    assets: AbiParameterToPrimitiveType<{
        name: "assets";
        type: "uint256";
        internalType: "uint256";
    }>;
    receiver: AbiParameterToPrimitiveType<{
        name: "receiver";
        type: "address";
        internalType: "address";
    }>;
};
export type DepositParams = Prettify<DepositParamsInternal | {
    asyncParams: () => Promise<DepositParamsInternal>;
}>;
/**
 * Encodes the parameters for the "deposit" function.
 * @param options - The options for the deposit function.
 * @returns The encoded ABI parameters.
 * @extension ERC4626
 * @example
 * ```
 * import { encodeDepositParams } "thirdweb/extensions/erc4626";
 * const result = encodeDepositParams({
 *  assets: ...,
 *  receiver: ...,
 * });
 * ```
 */
export declare function encodeDepositParams(options: DepositParamsInternal): `0x${string}`;
/**
 * Calls the "deposit" function on the contract.
 * @param options - The options for the "deposit" function.
 * @returns A prepared transaction object.
 * @extension ERC4626
 * @example
 * ```
 * import { deposit } from "thirdweb/extensions/erc4626";
 *
 * const transaction = deposit({
 *  assets: ...,
 *  receiver: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function deposit(options: BaseTransactionOptions<DepositParams>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
export {};
//# sourceMappingURL=deposit.d.ts.map