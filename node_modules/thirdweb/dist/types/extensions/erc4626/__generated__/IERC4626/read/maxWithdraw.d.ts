import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "maxWithdraw" function.
 */
export type MaxWithdrawParams = {
    owner: AbiParameterToPrimitiveType<{
        name: "owner";
        type: "address";
        internalType: "address";
    }>;
};
/**
 * Encodes the parameters for the "maxWithdraw" function.
 * @param options - The options for the maxWithdraw function.
 * @returns The encoded ABI parameters.
 * @extension ERC4626
 * @example
 * ```ts
 * import { encodeMaxWithdrawParams } "thirdweb/extensions/erc4626";
 * const result = encodeMaxWithdrawParams({
 *  owner: ...,
 * });
 * ```
 */
export declare function encodeMaxWithdrawParams(options: MaxWithdrawParams): `0x${string}`;
/**
 * Decodes the result of the maxWithdraw function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC4626
 * @example
 * ```ts
 * import { decodeMaxWithdrawResult } from "thirdweb/extensions/erc4626";
 * const result = decodeMaxWithdrawResult("...");
 * ```
 */
export declare function decodeMaxWithdrawResult(result: Hex): bigint;
/**
 * Calls the "maxWithdraw" function on the contract.
 * @param options - The options for the maxWithdraw function.
 * @returns The parsed result of the function call.
 * @extension ERC4626
 * @example
 * ```ts
 * import { maxWithdraw } from "thirdweb/extensions/erc4626";
 *
 * const result = await maxWithdraw({
 *  owner: ...,
 * });
 *
 * ```
 */
export declare function maxWithdraw(options: BaseTransactionOptions<MaxWithdrawParams>): Promise<bigint>;
//# sourceMappingURL=maxWithdraw.d.ts.map