import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Prettify } from "../../../../../utils/type-utils.js";
/**
 * Represents the parameters for the "mint" function.
 */
type MintParamsInternal = {
    shares: AbiParameterToPrimitiveType<{
        name: "shares";
        type: "uint256";
        internalType: "uint256";
    }>;
    receiver: AbiParameterToPrimitiveType<{
        name: "receiver";
        type: "address";
        internalType: "address";
    }>;
};
export type MintParams = Prettify<MintParamsInternal | {
    asyncParams: () => Promise<MintParamsInternal>;
}>;
/**
 * Encodes the parameters for the "mint" function.
 * @param options - The options for the mint function.
 * @returns The encoded ABI parameters.
 * @extension ERC4626
 * @example
 * ```
 * import { encodeMintParams } "thirdweb/extensions/erc4626";
 * const result = encodeMintParams({
 *  shares: ...,
 *  receiver: ...,
 * });
 * ```
 */
export declare function encodeMintParams(options: MintParamsInternal): `0x${string}`;
/**
 * Calls the "mint" function on the contract.
 * @param options - The options for the "mint" function.
 * @returns A prepared transaction object.
 * @extension ERC4626
 * @example
 * ```
 * import { mint } from "thirdweb/extensions/erc4626";
 *
 * const transaction = mint({
 *  shares: ...,
 *  receiver: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function mint(options: BaseTransactionOptions<MintParams>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
export {};
//# sourceMappingURL=mint.d.ts.map