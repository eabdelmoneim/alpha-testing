import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Prettify } from "../../../../../utils/type-utils.js";
/**
 * Represents the parameters for the "redeem" function.
 */
type RedeemParamsInternal = {
    shares: AbiParameterToPrimitiveType<{
        name: "shares";
        type: "uint256";
        internalType: "uint256";
    }>;
    receiver: AbiParameterToPrimitiveType<{
        name: "receiver";
        type: "address";
        internalType: "address";
    }>;
    owner: AbiParameterToPrimitiveType<{
        name: "owner";
        type: "address";
        internalType: "address";
    }>;
};
export type RedeemParams = Prettify<RedeemParamsInternal | {
    asyncParams: () => Promise<RedeemParamsInternal>;
}>;
/**
 * Encodes the parameters for the "redeem" function.
 * @param options - The options for the redeem function.
 * @returns The encoded ABI parameters.
 * @extension ERC4626
 * @example
 * ```
 * import { encodeRedeemParams } "thirdweb/extensions/erc4626";
 * const result = encodeRedeemParams({
 *  shares: ...,
 *  receiver: ...,
 *  owner: ...,
 * });
 * ```
 */
export declare function encodeRedeemParams(options: RedeemParamsInternal): `0x${string}`;
/**
 * Calls the "redeem" function on the contract.
 * @param options - The options for the "redeem" function.
 * @returns A prepared transaction object.
 * @extension ERC4626
 * @example
 * ```
 * import { redeem } from "thirdweb/extensions/erc4626";
 *
 * const transaction = redeem({
 *  shares: ...,
 *  receiver: ...,
 *  owner: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function redeem(options: BaseTransactionOptions<RedeemParams>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
export {};
//# sourceMappingURL=redeem.d.ts.map