import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "maxDeposit" function.
 */
export type MaxDepositParams = {
    receiver: AbiParameterToPrimitiveType<{
        name: "receiver";
        type: "address";
        internalType: "address";
    }>;
};
/**
 * Encodes the parameters for the "maxDeposit" function.
 * @param options - The options for the maxDeposit function.
 * @returns The encoded ABI parameters.
 * @extension ERC4626
 * @example
 * ```
 * import { encodeMaxDepositParams } "thirdweb/extensions/erc4626";
 * const result = encodeMaxDepositParams({
 *  receiver: ...,
 * });
 * ```
 */
export declare function encodeMaxDepositParams(options: MaxDepositParams): `0x${string}`;
/**
 * Decodes the result of the maxDeposit function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC4626
 * @example
 * ```
 * import { decodeMaxDepositResult } from "thirdweb/extensions/erc4626";
 * const result = decodeMaxDepositResult("...");
 * ```
 */
export declare function decodeMaxDepositResult(result: Hex): bigint;
/**
 * Calls the "maxDeposit" function on the contract.
 * @param options - The options for the maxDeposit function.
 * @returns The parsed result of the function call.
 * @extension ERC4626
 * @example
 * ```
 * import { maxDeposit } from "thirdweb/extensions/erc4626";
 *
 * const result = await maxDeposit({
 *  receiver: ...,
 * });
 *
 * ```
 */
export declare function maxDeposit(options: BaseTransactionOptions<MaxDepositParams>): Promise<bigint>;
//# sourceMappingURL=maxDeposit.d.ts.map