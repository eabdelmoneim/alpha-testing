import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Decodes the result of the proxiableUUID function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC1822
 * @example
 * ```ts
 * import { decodeProxiableUUIDResult } from "thirdweb/extensions/erc1822";
 * const result = decodeProxiableUUIDResult("...");
 * ```
 */
export declare function decodeProxiableUUIDResult(result: Hex): `0x${string}`;
/**
 * Calls the "proxiableUUID" function on the contract.
 * @param options - The options for the proxiableUUID function.
 * @returns The parsed result of the function call.
 * @extension ERC1822
 * @example
 * ```ts
 * import { proxiableUUID } from "thirdweb/extensions/erc1822";
 *
 * const result = await proxiableUUID();
 *
 * ```
 */
export declare function proxiableUUID(options: BaseTransactionOptions): Promise<`0x${string}`>;
//# sourceMappingURL=proxiableUUID.d.ts.map