import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "isValidSigner" function.
 */
export type IsValidSignerParams = {
    signer: AbiParameterToPrimitiveType<{
        type: "address";
        name: "signer";
    }>;
    context: AbiParameterToPrimitiveType<{
        type: "bytes";
        name: "context";
    }>;
};
/**
 * Encodes the parameters for the "isValidSigner" function.
 * @param options - The options for the isValidSigner function.
 * @returns The encoded ABI parameters.
 * @extension ERC6551
 * @example
 * ```ts
 * import { encodeIsValidSignerParams } "thirdweb/extensions/erc6551";
 * const result = encodeIsValidSignerParams({
 *  signer: ...,
 *  context: ...,
 * });
 * ```
 */
export declare function encodeIsValidSignerParams(options: IsValidSignerParams): `0x${string}`;
/**
 * Decodes the result of the isValidSigner function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC6551
 * @example
 * ```ts
 * import { decodeIsValidSignerResult } from "thirdweb/extensions/erc6551";
 * const result = decodeIsValidSignerResult("...");
 * ```
 */
export declare function decodeIsValidSignerResult(result: Hex): `0x${string}`;
/**
 * Calls the "isValidSigner" function on the contract.
 * @param options - The options for the isValidSigner function.
 * @returns The parsed result of the function call.
 * @extension ERC6551
 * @example
 * ```ts
 * import { isValidSigner } from "thirdweb/extensions/erc6551";
 *
 * const result = await isValidSigner({
 *  signer: ...,
 *  context: ...,
 * });
 *
 * ```
 */
export declare function isValidSigner(options: BaseTransactionOptions<IsValidSignerParams>): Promise<`0x${string}`>;
//# sourceMappingURL=isValidSigner.d.ts.map