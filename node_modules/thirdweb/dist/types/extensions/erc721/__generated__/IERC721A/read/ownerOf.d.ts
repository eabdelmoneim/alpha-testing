import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "ownerOf" function.
 */
export type OwnerOfParams = {
    tokenId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "tokenId";
    }>;
};
/**
 * Encodes the parameters for the "ownerOf" function.
 * @param options - The options for the ownerOf function.
 * @returns The encoded ABI parameters.
 * @extension ERC721
 * @example
 * ```
 * import { encodeOwnerOfParams } "thirdweb/extensions/erc721";
 * const result = encodeOwnerOfParams({
 *  tokenId: ...,
 * });
 * ```
 */
export declare function encodeOwnerOfParams(options: OwnerOfParams): `0x${string}`;
/**
 * Decodes the result of the ownerOf function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC721
 * @example
 * ```
 * import { decodeOwnerOfResult } from "thirdweb/extensions/erc721";
 * const result = decodeOwnerOfResult("...");
 * ```
 */
export declare function decodeOwnerOfResult(result: Hex): string;
/**
 * Calls the "ownerOf" function on the contract.
 * @param options - The options for the ownerOf function.
 * @returns The parsed result of the function call.
 * @extension ERC721
 * @example
 * ```
 * import { ownerOf } from "thirdweb/extensions/erc721";
 *
 * const result = await ownerOf({
 *  tokenId: ...,
 * });
 *
 * ```
 */
export declare function ownerOf(options: BaseTransactionOptions<OwnerOfParams>): Promise<string>;
//# sourceMappingURL=ownerOf.d.ts.map