import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "tokenURI" function.
 */
export type TokenURIParams = {
    tokenId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_tokenId";
    }>;
};
/**
 * Encodes the parameters for the "tokenURI" function.
 * @param options - The options for the tokenURI function.
 * @returns The encoded ABI parameters.
 * @extension ERC721
 * @example
 * ```
 * import { encodeTokenURIParams } "thirdweb/extensions/erc721";
 * const result = encodeTokenURIParams({
 *  tokenId: ...,
 * });
 * ```
 */
export declare function encodeTokenURIParams(options: TokenURIParams): `0x${string}`;
/**
 * Decodes the result of the tokenURI function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC721
 * @example
 * ```
 * import { decodeTokenURIResult } from "thirdweb/extensions/erc721";
 * const result = decodeTokenURIResult("...");
 * ```
 */
export declare function decodeTokenURIResult(result: Hex): string;
/**
 * Calls the "tokenURI" function on the contract.
 * @param options - The options for the tokenURI function.
 * @returns The parsed result of the function call.
 * @extension ERC721
 * @example
 * ```
 * import { tokenURI } from "thirdweb/extensions/erc721";
 *
 * const result = await tokenURI({
 *  tokenId: ...,
 * });
 *
 * ```
 */
export declare function tokenURI(options: BaseTransactionOptions<TokenURIParams>): Promise<string>;
//# sourceMappingURL=tokenURI.d.ts.map