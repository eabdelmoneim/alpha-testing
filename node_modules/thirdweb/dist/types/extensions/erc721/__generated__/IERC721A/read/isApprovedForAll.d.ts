import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "isApprovedForAll" function.
 */
export type IsApprovedForAllParams = {
    owner: AbiParameterToPrimitiveType<{
        type: "address";
        name: "owner";
    }>;
    operator: AbiParameterToPrimitiveType<{
        type: "address";
        name: "operator";
    }>;
};
/**
 * Encodes the parameters for the "isApprovedForAll" function.
 * @param options - The options for the isApprovedForAll function.
 * @returns The encoded ABI parameters.
 * @extension ERC721
 * @example
 * ```ts
 * import { encodeIsApprovedForAllParams } "thirdweb/extensions/erc721";
 * const result = encodeIsApprovedForAllParams({
 *  owner: ...,
 *  operator: ...,
 * });
 * ```
 */
export declare function encodeIsApprovedForAllParams(options: IsApprovedForAllParams): `0x${string}`;
/**
 * Decodes the result of the isApprovedForAll function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC721
 * @example
 * ```ts
 * import { decodeIsApprovedForAllResult } from "thirdweb/extensions/erc721";
 * const result = decodeIsApprovedForAllResult("...");
 * ```
 */
export declare function decodeIsApprovedForAllResult(result: Hex): boolean;
/**
 * Calls the "isApprovedForAll" function on the contract.
 * @param options - The options for the isApprovedForAll function.
 * @returns The parsed result of the function call.
 * @extension ERC721
 * @example
 * ```ts
 * import { isApprovedForAll } from "thirdweb/extensions/erc721";
 *
 * const result = await isApprovedForAll({
 *  owner: ...,
 *  operator: ...,
 * });
 *
 * ```
 */
export declare function isApprovedForAll(options: BaseTransactionOptions<IsApprovedForAllParams>): Promise<boolean>;
//# sourceMappingURL=isApprovedForAll.d.ts.map