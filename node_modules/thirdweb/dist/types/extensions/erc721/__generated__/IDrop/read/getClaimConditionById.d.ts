import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "getClaimConditionById" function.
 */
export type GetClaimConditionByIdParams = {
    conditionId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_conditionId";
    }>;
};
/**
 * Encodes the parameters for the "getClaimConditionById" function.
 * @param options - The options for the getClaimConditionById function.
 * @returns The encoded ABI parameters.
 * @extension ERC721
 * @example
 * ```ts
 * import { encodeGetClaimConditionByIdParams } "thirdweb/extensions/erc721";
 * const result = encodeGetClaimConditionByIdParams({
 *  conditionId: ...,
 * });
 * ```
 */
export declare function encodeGetClaimConditionByIdParams(options: GetClaimConditionByIdParams): `0x${string}`;
/**
 * Decodes the result of the getClaimConditionById function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC721
 * @example
 * ```ts
 * import { decodeGetClaimConditionByIdResult } from "thirdweb/extensions/erc721";
 * const result = decodeGetClaimConditionByIdResult("...");
 * ```
 */
export declare function decodeGetClaimConditionByIdResult(result: Hex): {
    startTimestamp: bigint;
    maxClaimableSupply: bigint;
    supplyClaimed: bigint;
    quantityLimitPerWallet: bigint;
    merkleRoot: `0x${string}`;
    pricePerToken: bigint;
    currency: string;
    metadata: string;
};
/**
 * Calls the "getClaimConditionById" function on the contract.
 * @param options - The options for the getClaimConditionById function.
 * @returns The parsed result of the function call.
 * @extension ERC721
 * @example
 * ```ts
 * import { getClaimConditionById } from "thirdweb/extensions/erc721";
 *
 * const result = await getClaimConditionById({
 *  conditionId: ...,
 * });
 *
 * ```
 */
export declare function getClaimConditionById(options: BaseTransactionOptions<GetClaimConditionByIdParams>): Promise<{
    startTimestamp: bigint;
    maxClaimableSupply: bigint;
    supplyClaimed: bigint;
    quantityLimitPerWallet: bigint;
    merkleRoot: `0x${string}`;
    pricePerToken: bigint;
    currency: string;
    metadata: string;
}>;
//# sourceMappingURL=getClaimConditionById.d.ts.map