import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Prettify } from "../../../../../utils/type-utils.js";
/**
 * Represents the parameters for the "claim" function.
 */
type ClaimParamsInternal = {
    receiver: AbiParameterToPrimitiveType<{
        type: "address";
        name: "receiver";
    }>;
    quantity: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "quantity";
    }>;
    currency: AbiParameterToPrimitiveType<{
        type: "address";
        name: "currency";
    }>;
    pricePerToken: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "pricePerToken";
    }>;
    allowlistProof: AbiParameterToPrimitiveType<{
        type: "tuple";
        name: "allowlistProof";
        components: [
            {
                type: "bytes32[]";
                name: "proof";
            },
            {
                type: "uint256";
                name: "quantityLimitPerWallet";
            },
            {
                type: "uint256";
                name: "pricePerToken";
            },
            {
                type: "address";
                name: "currency";
            }
        ];
    }>;
    data: AbiParameterToPrimitiveType<{
        type: "bytes";
        name: "data";
    }>;
};
export type ClaimParams = Prettify<ClaimParamsInternal | {
    asyncParams: () => Promise<ClaimParamsInternal>;
}>;
/**
 * Encodes the parameters for the "claim" function.
 * @param options - The options for the claim function.
 * @returns The encoded ABI parameters.
 * @extension ERC721
 * @example
 * ```
 * import { encodeClaimParams } "thirdweb/extensions/erc721";
 * const result = encodeClaimParams({
 *  receiver: ...,
 *  quantity: ...,
 *  currency: ...,
 *  pricePerToken: ...,
 *  allowlistProof: ...,
 *  data: ...,
 * });
 * ```
 */
export declare function encodeClaimParams(options: ClaimParamsInternal): `0x${string}`;
/**
 * Calls the "claim" function on the contract.
 * @param options - The options for the "claim" function.
 * @returns A prepared transaction object.
 * @extension ERC721
 * @example
 * ```
 * import { claim } from "thirdweb/extensions/erc721";
 *
 * const transaction = claim({
 *  receiver: ...,
 *  quantity: ...,
 *  currency: ...,
 *  pricePerToken: ...,
 *  allowlistProof: ...,
 *  data: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function claim(options: BaseTransactionOptions<ClaimParams>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
export {};
//# sourceMappingURL=claim.d.ts.map