import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Decodes the result of the getAllSharedMetadata function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC721
 * @example
 * ```ts
 * import { decodeGetAllSharedMetadataResult } from "thirdweb/extensions/erc721";
 * const result = decodeGetAllSharedMetadataResult("...");
 * ```
 */
export declare function decodeGetAllSharedMetadataResult(result: Hex): readonly {
    id: `0x${string}`;
    metadata: {
        name: string;
        description: string;
        imageURI: string;
        animationURI: string;
    };
}[];
/**
 * Calls the "getAllSharedMetadata" function on the contract.
 * @param options - The options for the getAllSharedMetadata function.
 * @returns The parsed result of the function call.
 * @extension ERC721
 * @example
 * ```ts
 * import { getAllSharedMetadata } from "thirdweb/extensions/erc721";
 *
 * const result = await getAllSharedMetadata();
 *
 * ```
 */
export declare function getAllSharedMetadata(options: BaseTransactionOptions): Promise<readonly {
    id: `0x${string}`;
    metadata: {
        name: string;
        description: string;
        imageURI: string;
        animationURI: string;
    };
}[]>;
//# sourceMappingURL=getAllSharedMetadata.d.ts.map