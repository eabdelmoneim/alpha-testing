import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "tokenByIndex" function.
 */
export type TokenByIndexParams = {
    index: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_index";
    }>;
};
/**
 * Encodes the parameters for the "tokenByIndex" function.
 * @param options - The options for the tokenByIndex function.
 * @returns The encoded ABI parameters.
 * @extension ERC721
 * @example
 * ```ts
 * import { encodeTokenByIndexParams } "thirdweb/extensions/erc721";
 * const result = encodeTokenByIndexParams({
 *  index: ...,
 * });
 * ```
 */
export declare function encodeTokenByIndexParams(options: TokenByIndexParams): `0x${string}`;
/**
 * Decodes the result of the tokenByIndex function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC721
 * @example
 * ```ts
 * import { decodeTokenByIndexResult } from "thirdweb/extensions/erc721";
 * const result = decodeTokenByIndexResult("...");
 * ```
 */
export declare function decodeTokenByIndexResult(result: Hex): bigint;
/**
 * Calls the "tokenByIndex" function on the contract.
 * @param options - The options for the tokenByIndex function.
 * @returns The parsed result of the function call.
 * @extension ERC721
 * @example
 * ```ts
 * import { tokenByIndex } from "thirdweb/extensions/erc721";
 *
 * const result = await tokenByIndex({
 *  index: ...,
 * });
 *
 * ```
 */
export declare function tokenByIndex(options: BaseTransactionOptions<TokenByIndexParams>): Promise<bigint>;
//# sourceMappingURL=tokenByIndex.d.ts.map