import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "tokensOfOwner" function.
 */
export type TokensOfOwnerParams = {
    owner: AbiParameterToPrimitiveType<{
        type: "address";
        name: "owner";
    }>;
};
/**
 * Encodes the parameters for the "tokensOfOwner" function.
 * @param options - The options for the tokensOfOwner function.
 * @returns The encoded ABI parameters.
 * @extension ERC721
 * @example
 * ```ts
 * import { encodeTokensOfOwnerParams } "thirdweb/extensions/erc721";
 * const result = encodeTokensOfOwnerParams({
 *  owner: ...,
 * });
 * ```
 */
export declare function encodeTokensOfOwnerParams(options: TokensOfOwnerParams): `0x${string}`;
/**
 * Decodes the result of the tokensOfOwner function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC721
 * @example
 * ```ts
 * import { decodeTokensOfOwnerResult } from "thirdweb/extensions/erc721";
 * const result = decodeTokensOfOwnerResult("...");
 * ```
 */
export declare function decodeTokensOfOwnerResult(result: Hex): readonly bigint[];
/**
 * Calls the "tokensOfOwner" function on the contract.
 * @param options - The options for the tokensOfOwner function.
 * @returns The parsed result of the function call.
 * @extension ERC721
 * @example
 * ```ts
 * import { tokensOfOwner } from "thirdweb/extensions/erc721";
 *
 * const result = await tokensOfOwner({
 *  owner: ...,
 * });
 *
 * ```
 */
export declare function tokensOfOwner(options: BaseTransactionOptions<TokensOfOwnerParams>): Promise<readonly bigint[]>;
//# sourceMappingURL=tokensOfOwner.d.ts.map