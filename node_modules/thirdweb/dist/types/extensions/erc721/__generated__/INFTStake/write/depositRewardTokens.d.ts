import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Prettify } from "../../../../../utils/type-utils.js";
/**
 * Represents the parameters for the "depositRewardTokens" function.
 */
type DepositRewardTokensParamsInternal = {
    amount: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_amount";
    }>;
};
export type DepositRewardTokensParams = Prettify<DepositRewardTokensParamsInternal | {
    asyncParams: () => Promise<DepositRewardTokensParamsInternal>;
}>;
/**
 * Encodes the parameters for the "depositRewardTokens" function.
 * @param options - The options for the depositRewardTokens function.
 * @returns The encoded ABI parameters.
 * @extension ERC721
 * @example
 * ```
 * import { encodeDepositRewardTokensParams } "thirdweb/extensions/erc721";
 * const result = encodeDepositRewardTokensParams({
 *  amount: ...,
 * });
 * ```
 */
export declare function encodeDepositRewardTokensParams(options: DepositRewardTokensParamsInternal): `0x${string}`;
/**
 * Calls the "depositRewardTokens" function on the contract.
 * @param options - The options for the "depositRewardTokens" function.
 * @returns A prepared transaction object.
 * @extension ERC721
 * @example
 * ```
 * import { depositRewardTokens } from "thirdweb/extensions/erc721";
 *
 * const transaction = depositRewardTokens({
 *  amount: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function depositRewardTokens(options: BaseTransactionOptions<DepositRewardTokensParams>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
export {};
//# sourceMappingURL=depositRewardTokens.d.ts.map