import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Prettify } from "../../../../../utils/type-utils.js";
/**
 * Represents the parameters for the "withdraw" function.
 */
type WithdrawParamsInternal = {
    tokenIds: AbiParameterToPrimitiveType<{
        type: "uint256[]";
        name: "tokenIds";
    }>;
};
export type WithdrawParams = Prettify<WithdrawParamsInternal | {
    asyncParams: () => Promise<WithdrawParamsInternal>;
}>;
/**
 * Encodes the parameters for the "withdraw" function.
 * @param options - The options for the withdraw function.
 * @returns The encoded ABI parameters.
 * @extension ERC721
 * @example
 * ```
 * import { encodeWithdrawParams } "thirdweb/extensions/erc721";
 * const result = encodeWithdrawParams({
 *  tokenIds: ...,
 * });
 * ```
 */
export declare function encodeWithdrawParams(options: WithdrawParamsInternal): `0x${string}`;
/**
 * Calls the "withdraw" function on the contract.
 * @param options - The options for the "withdraw" function.
 * @returns A prepared transaction object.
 * @extension ERC721
 * @example
 * ```
 * import { withdraw } from "thirdweb/extensions/erc721";
 *
 * const transaction = withdraw({
 *  tokenIds: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function withdraw(options: BaseTransactionOptions<WithdrawParams>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
export {};
//# sourceMappingURL=withdraw.d.ts.map