import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
/**
 * Represents the parameters for the "reveal" function.
 */
export type RevealParams = {
    identifier: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "identifier";
    }>;
    key: AbiParameterToPrimitiveType<{
        type: "bytes";
        name: "key";
    }>;
};
/**
 * Encodes the parameters for the "reveal" function.
 * @param options - The options for the reveal function.
 * @returns The encoded ABI parameters.
 * @extension ERC721
 * @example
 * ```ts
 * import { encodeRevealParams } "thirdweb/extensions/erc721";
 * const result = encodeRevealParams({
 *  identifier: ...,
 *  key: ...,
 * });
 * ```
 */
export declare function encodeRevealParams(options: RevealParams): `0x${string}`;
/**
 * Calls the "reveal" function on the contract.
 * @param options - The options for the "reveal" function.
 * @returns A prepared transaction object.
 * @extension ERC721
 * @example
 * ```ts
 * import { reveal } from "thirdweb/extensions/erc721";
 *
 * const transaction = reveal({
 *  contract,
 *  identifier: ...,
 *  key: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function reveal(options: BaseTransactionOptions<RevealParams | {
    asyncParams: () => Promise<RevealParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
//# sourceMappingURL=reveal.d.ts.map