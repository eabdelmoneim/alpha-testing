import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Prettify } from "../../../../../utils/type-utils.js";
/**
 * Represents the parameters for the "quoteExactInput" function.
 */
type QuoteExactInputParamsInternal = {
    path: AbiParameterToPrimitiveType<{
        type: "bytes";
        name: "path";
    }>;
    amountIn: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "amountIn";
    }>;
};
export type QuoteExactInputParams = Prettify<QuoteExactInputParamsInternal | {
    asyncParams: () => Promise<QuoteExactInputParamsInternal>;
}>;
/**
 * Encodes the parameters for the "quoteExactInput" function.
 * @param options - The options for the quoteExactInput function.
 * @returns The encoded ABI parameters.
 * @extension UNISWAP
 * @example
 * ```
 * import { encodeQuoteExactInputParams } "thirdweb/extensions/uniswap";
 * const result = encodeQuoteExactInputParams({
 *  path: ...,
 *  amountIn: ...,
 * });
 * ```
 */
export declare function encodeQuoteExactInputParams(options: QuoteExactInputParamsInternal): `0x${string}`;
/**
 * Calls the "quoteExactInput" function on the contract.
 * @param options - The options for the "quoteExactInput" function.
 * @returns A prepared transaction object.
 * @extension UNISWAP
 * @example
 * ```
 * import { quoteExactInput } from "thirdweb/extensions/uniswap";
 *
 * const transaction = quoteExactInput({
 *  path: ...,
 *  amountIn: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function quoteExactInput(options: BaseTransactionOptions<QuoteExactInputParams>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
export {};
//# sourceMappingURL=quoteExactInput.d.ts.map