import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
/**
 * Represents the parameters for the "enableFeeAmount" function.
 */
export type EnableFeeAmountParams = {
    fee: AbiParameterToPrimitiveType<{
        type: "uint24";
        name: "fee";
    }>;
    tickSpacing: AbiParameterToPrimitiveType<{
        type: "int24";
        name: "tickSpacing";
    }>;
};
/**
 * Encodes the parameters for the "enableFeeAmount" function.
 * @param options - The options for the enableFeeAmount function.
 * @returns The encoded ABI parameters.
 * @extension UNISWAP
 * @example
 * ```ts
 * import { encodeEnableFeeAmountParams } "thirdweb/extensions/uniswap";
 * const result = encodeEnableFeeAmountParams({
 *  fee: ...,
 *  tickSpacing: ...,
 * });
 * ```
 */
export declare function encodeEnableFeeAmountParams(options: EnableFeeAmountParams): `0x${string}`;
/**
 * Calls the "enableFeeAmount" function on the contract.
 * @param options - The options for the "enableFeeAmount" function.
 * @returns A prepared transaction object.
 * @extension UNISWAP
 * @example
 * ```ts
 * import { enableFeeAmount } from "thirdweb/extensions/uniswap";
 *
 * const transaction = enableFeeAmount({
 *  contract,
 *  fee: ...,
 *  tickSpacing: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function enableFeeAmount(options: BaseTransactionOptions<EnableFeeAmountParams | {
    asyncParams: () => Promise<EnableFeeAmountParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
//# sourceMappingURL=enableFeeAmount.d.ts.map