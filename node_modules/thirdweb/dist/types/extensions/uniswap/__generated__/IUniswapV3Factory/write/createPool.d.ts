import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Prettify } from "../../../../../utils/type-utils.js";
/**
 * Represents the parameters for the "createPool" function.
 */
type CreatePoolParamsInternal = {
    tokenA: AbiParameterToPrimitiveType<{
        type: "address";
        name: "tokenA";
    }>;
    tokenB: AbiParameterToPrimitiveType<{
        type: "address";
        name: "tokenB";
    }>;
    fee: AbiParameterToPrimitiveType<{
        type: "uint24";
        name: "fee";
    }>;
};
export type CreatePoolParams = Prettify<CreatePoolParamsInternal | {
    asyncParams: () => Promise<CreatePoolParamsInternal>;
}>;
/**
 * Encodes the parameters for the "createPool" function.
 * @param options - The options for the createPool function.
 * @returns The encoded ABI parameters.
 * @extension UNISWAP
 * @example
 * ```
 * import { encodeCreatePoolParams } "thirdweb/extensions/uniswap";
 * const result = encodeCreatePoolParams({
 *  tokenA: ...,
 *  tokenB: ...,
 *  fee: ...,
 * });
 * ```
 */
export declare function encodeCreatePoolParams(options: CreatePoolParamsInternal): `0x${string}`;
/**
 * Calls the "createPool" function on the contract.
 * @param options - The options for the "createPool" function.
 * @returns A prepared transaction object.
 * @extension UNISWAP
 * @example
 * ```
 * import { createPool } from "thirdweb/extensions/uniswap";
 *
 * const transaction = createPool({
 *  tokenA: ...,
 *  tokenB: ...,
 *  fee: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function createPool(options: BaseTransactionOptions<CreatePoolParams>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
export {};
//# sourceMappingURL=createPool.d.ts.map