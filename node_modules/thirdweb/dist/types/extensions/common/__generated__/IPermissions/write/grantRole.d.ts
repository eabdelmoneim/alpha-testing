import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
/**
 * Represents the parameters for the "grantRole" function.
 */
export type GrantRoleParams = {
    role: AbiParameterToPrimitiveType<{
        type: "bytes32";
        name: "role";
    }>;
    account: AbiParameterToPrimitiveType<{
        type: "address";
        name: "account";
    }>;
};
/**
 * Encodes the parameters for the "grantRole" function.
 * @param options - The options for the grantRole function.
 * @returns The encoded ABI parameters.
 * @extension COMMON
 * @example
 * ```ts
 * import { encodeGrantRoleParams } "thirdweb/extensions/common";
 * const result = encodeGrantRoleParams({
 *  role: ...,
 *  account: ...,
 * });
 * ```
 */
export declare function encodeGrantRoleParams(options: GrantRoleParams): `0x${string}`;
/**
 * Calls the "grantRole" function on the contract.
 * @param options - The options for the "grantRole" function.
 * @returns A prepared transaction object.
 * @extension COMMON
 * @example
 * ```ts
 * import { grantRole } from "thirdweb/extensions/common";
 *
 * const transaction = grantRole({
 *  contract,
 *  role: ...,
 *  account: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function grantRole(options: BaseTransactionOptions<GrantRoleParams | {
    asyncParams: () => Promise<GrantRoleParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
//# sourceMappingURL=grantRole.d.ts.map