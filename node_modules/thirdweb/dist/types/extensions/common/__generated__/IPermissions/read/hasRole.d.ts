import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "hasRole" function.
 */
export type HasRoleParams = {
    role: AbiParameterToPrimitiveType<{
        type: "bytes32";
        name: "role";
    }>;
    account: AbiParameterToPrimitiveType<{
        type: "address";
        name: "account";
    }>;
};
/**
 * Encodes the parameters for the "hasRole" function.
 * @param options - The options for the hasRole function.
 * @returns The encoded ABI parameters.
 * @extension COMMON
 * @example
 * ```
 * import { encodeHasRoleParams } "thirdweb/extensions/common";
 * const result = encodeHasRoleParams({
 *  role: ...,
 *  account: ...,
 * });
 * ```
 */
export declare function encodeHasRoleParams(options: HasRoleParams): `0x${string}`;
/**
 * Decodes the result of the hasRole function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension COMMON
 * @example
 * ```
 * import { decodeHasRoleResult } from "thirdweb/extensions/common";
 * const result = decodeHasRoleResult("...");
 * ```
 */
export declare function decodeHasRoleResult(result: Hex): boolean;
/**
 * Calls the "hasRole" function on the contract.
 * @param options - The options for the hasRole function.
 * @returns The parsed result of the function call.
 * @extension COMMON
 * @example
 * ```
 * import { hasRole } from "thirdweb/extensions/common";
 *
 * const result = await hasRole({
 *  role: ...,
 *  account: ...,
 * });
 *
 * ```
 */
export declare function hasRole(options: BaseTransactionOptions<HasRoleParams>): Promise<boolean>;
//# sourceMappingURL=hasRole.d.ts.map