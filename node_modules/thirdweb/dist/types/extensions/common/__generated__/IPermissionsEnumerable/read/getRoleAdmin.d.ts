import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "getRoleAdmin" function.
 */
export type GetRoleAdminParams = {
    role: AbiParameterToPrimitiveType<{
        type: "bytes32";
        name: "role";
    }>;
};
/**
 * Encodes the parameters for the "getRoleAdmin" function.
 * @param options - The options for the getRoleAdmin function.
 * @returns The encoded ABI parameters.
 * @extension COMMON
 * @example
 * ```
 * import { encodeGetRoleAdminParams } "thirdweb/extensions/common";
 * const result = encodeGetRoleAdminParams({
 *  role: ...,
 * });
 * ```
 */
export declare function encodeGetRoleAdminParams(options: GetRoleAdminParams): `0x${string}`;
/**
 * Decodes the result of the getRoleAdmin function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension COMMON
 * @example
 * ```
 * import { decodeGetRoleAdminResult } from "thirdweb/extensions/common";
 * const result = decodeGetRoleAdminResult("...");
 * ```
 */
export declare function decodeGetRoleAdminResult(result: Hex): `0x${string}`;
/**
 * Calls the "getRoleAdmin" function on the contract.
 * @param options - The options for the getRoleAdmin function.
 * @returns The parsed result of the function call.
 * @extension COMMON
 * @example
 * ```
 * import { getRoleAdmin } from "thirdweb/extensions/common";
 *
 * const result = await getRoleAdmin({
 *  role: ...,
 * });
 *
 * ```
 */
export declare function getRoleAdmin(options: BaseTransactionOptions<GetRoleAdminParams>): Promise<`0x${string}`>;
//# sourceMappingURL=getRoleAdmin.d.ts.map