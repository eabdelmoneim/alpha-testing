import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "getRoleMember" function.
 */
export type GetRoleMemberParams = {
    role: AbiParameterToPrimitiveType<{
        type: "bytes32";
        name: "role";
    }>;
    index: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "index";
    }>;
};
/**
 * Encodes the parameters for the "getRoleMember" function.
 * @param options - The options for the getRoleMember function.
 * @returns The encoded ABI parameters.
 * @extension COMMON
 * @example
 * ```ts
 * import { encodeGetRoleMemberParams } "thirdweb/extensions/common";
 * const result = encodeGetRoleMemberParams({
 *  role: ...,
 *  index: ...,
 * });
 * ```
 */
export declare function encodeGetRoleMemberParams(options: GetRoleMemberParams): `0x${string}`;
/**
 * Decodes the result of the getRoleMember function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension COMMON
 * @example
 * ```ts
 * import { decodeGetRoleMemberResult } from "thirdweb/extensions/common";
 * const result = decodeGetRoleMemberResult("...");
 * ```
 */
export declare function decodeGetRoleMemberResult(result: Hex): string;
/**
 * Calls the "getRoleMember" function on the contract.
 * @param options - The options for the getRoleMember function.
 * @returns The parsed result of the function call.
 * @extension COMMON
 * @example
 * ```ts
 * import { getRoleMember } from "thirdweb/extensions/common";
 *
 * const result = await getRoleMember({
 *  role: ...,
 *  index: ...,
 * });
 *
 * ```
 */
export declare function getRoleMember(options: BaseTransactionOptions<GetRoleMemberParams>): Promise<string>;
//# sourceMappingURL=getRoleMember.d.ts.map