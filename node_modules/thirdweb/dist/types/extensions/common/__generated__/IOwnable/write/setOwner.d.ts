import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Prettify } from "../../../../../utils/type-utils.js";
/**
 * Represents the parameters for the "setOwner" function.
 */
type SetOwnerParamsInternal = {
    newOwner: AbiParameterToPrimitiveType<{
        type: "address";
        name: "_newOwner";
    }>;
};
export type SetOwnerParams = Prettify<SetOwnerParamsInternal | {
    asyncParams: () => Promise<SetOwnerParamsInternal>;
}>;
/**
 * Encodes the parameters for the "setOwner" function.
 * @param options - The options for the setOwner function.
 * @returns The encoded ABI parameters.
 * @extension COMMON
 * @example
 * ```
 * import { encodeSetOwnerParams } "thirdweb/extensions/common";
 * const result = encodeSetOwnerParams({
 *  newOwner: ...,
 * });
 * ```
 */
export declare function encodeSetOwnerParams(options: SetOwnerParamsInternal): `0x${string}`;
/**
 * Calls the "setOwner" function on the contract.
 * @param options - The options for the "setOwner" function.
 * @returns A prepared transaction object.
 * @extension COMMON
 * @example
 * ```
 * import { setOwner } from "thirdweb/extensions/common";
 *
 * const transaction = setOwner({
 *  newOwner: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function setOwner(options: BaseTransactionOptions<SetOwnerParams>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
export {};
//# sourceMappingURL=setOwner.d.ts.map