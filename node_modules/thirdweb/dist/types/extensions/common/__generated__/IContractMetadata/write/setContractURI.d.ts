import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
/**
 * Represents the parameters for the "setContractURI" function.
 */
export type SetContractURIParams = {
    uri: AbiParameterToPrimitiveType<{
        type: "string";
        name: "_uri";
    }>;
};
/**
 * Encodes the parameters for the "setContractURI" function.
 * @param options - The options for the setContractURI function.
 * @returns The encoded ABI parameters.
 * @extension COMMON
 * @example
 * ```ts
 * import { encodeSetContractURIParams } "thirdweb/extensions/common";
 * const result = encodeSetContractURIParams({
 *  uri: ...,
 * });
 * ```
 */
export declare function encodeSetContractURIParams(options: SetContractURIParams): `0x${string}`;
/**
 * Calls the "setContractURI" function on the contract.
 * @param options - The options for the "setContractURI" function.
 * @returns A prepared transaction object.
 * @extension COMMON
 * @example
 * ```ts
 * import { setContractURI } from "thirdweb/extensions/common";
 *
 * const transaction = setContractURI({
 *  contract,
 *  uri: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function setContractURI(options: BaseTransactionOptions<SetContractURIParams | {
    asyncParams: () => Promise<SetContractURIParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
//# sourceMappingURL=setContractURI.d.ts.map