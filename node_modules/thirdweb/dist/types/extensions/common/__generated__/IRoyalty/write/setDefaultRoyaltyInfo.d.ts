import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Prettify } from "../../../../../utils/type-utils.js";
/**
 * Represents the parameters for the "setDefaultRoyaltyInfo" function.
 */
type SetDefaultRoyaltyInfoParamsInternal = {
    royaltyRecipient: AbiParameterToPrimitiveType<{
        type: "address";
        name: "_royaltyRecipient";
    }>;
    royaltyBps: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_royaltyBps";
    }>;
};
export type SetDefaultRoyaltyInfoParams = Prettify<SetDefaultRoyaltyInfoParamsInternal | {
    asyncParams: () => Promise<SetDefaultRoyaltyInfoParamsInternal>;
}>;
/**
 * Encodes the parameters for the "setDefaultRoyaltyInfo" function.
 * @param options - The options for the setDefaultRoyaltyInfo function.
 * @returns The encoded ABI parameters.
 * @extension COMMON
 * @example
 * ```
 * import { encodeSetDefaultRoyaltyInfoParams } "thirdweb/extensions/common";
 * const result = encodeSetDefaultRoyaltyInfoParams({
 *  royaltyRecipient: ...,
 *  royaltyBps: ...,
 * });
 * ```
 */
export declare function encodeSetDefaultRoyaltyInfoParams(options: SetDefaultRoyaltyInfoParamsInternal): `0x${string}`;
/**
 * Calls the "setDefaultRoyaltyInfo" function on the contract.
 * @param options - The options for the "setDefaultRoyaltyInfo" function.
 * @returns A prepared transaction object.
 * @extension COMMON
 * @example
 * ```
 * import { setDefaultRoyaltyInfo } from "thirdweb/extensions/common";
 *
 * const transaction = setDefaultRoyaltyInfo({
 *  royaltyRecipient: ...,
 *  royaltyBps: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function setDefaultRoyaltyInfo(options: BaseTransactionOptions<SetDefaultRoyaltyInfoParams>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
export {};
//# sourceMappingURL=setDefaultRoyaltyInfo.d.ts.map