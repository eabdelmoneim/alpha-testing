import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Decodes the result of the getAllExtensions function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC7504
 * @example
 * ```ts
 * import { decodeGetAllExtensionsResult } from "thirdweb/extensions/erc7504";
 * const result = decodeGetAllExtensionsResult("...");
 * ```
 */
export declare function decodeGetAllExtensionsResult(result: Hex): readonly {
    metadata: {
        name: string;
        metadataURI: string;
        implementation: string;
    };
    functions: readonly {
        functionSelector: `0x${string}`;
        functionSignature: string;
    }[];
}[];
/**
 * Calls the "getAllExtensions" function on the contract.
 * @param options - The options for the getAllExtensions function.
 * @returns The parsed result of the function call.
 * @extension ERC7504
 * @example
 * ```ts
 * import { getAllExtensions } from "thirdweb/extensions/erc7504";
 *
 * const result = await getAllExtensions();
 *
 * ```
 */
export declare function getAllExtensions(options: BaseTransactionOptions): Promise<readonly {
    metadata: {
        name: string;
        metadataURI: string;
        implementation: string;
    };
    functions: readonly {
        functionSelector: `0x${string}`;
        functionSignature: string;
    }[];
}[]>;
//# sourceMappingURL=getAllExtensions.d.ts.map