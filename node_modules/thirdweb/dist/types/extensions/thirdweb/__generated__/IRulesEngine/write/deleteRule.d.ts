import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Prettify } from "../../../../../utils/type-utils.js";
/**
 * Represents the parameters for the "deleteRule" function.
 */
type DeleteRuleParamsInternal = {
    ruleId: AbiParameterToPrimitiveType<{
        type: "bytes32";
        name: "ruleId";
    }>;
};
export type DeleteRuleParams = Prettify<DeleteRuleParamsInternal | {
    asyncParams: () => Promise<DeleteRuleParamsInternal>;
}>;
/**
 * Encodes the parameters for the "deleteRule" function.
 * @param options - The options for the deleteRule function.
 * @returns The encoded ABI parameters.
 * @extension THIRDWEB
 * @example
 * ```
 * import { encodeDeleteRuleParams } "thirdweb/extensions/thirdweb";
 * const result = encodeDeleteRuleParams({
 *  ruleId: ...,
 * });
 * ```
 */
export declare function encodeDeleteRuleParams(options: DeleteRuleParamsInternal): `0x${string}`;
/**
 * Calls the "deleteRule" function on the contract.
 * @param options - The options for the "deleteRule" function.
 * @returns A prepared transaction object.
 * @extension THIRDWEB
 * @example
 * ```
 * import { deleteRule } from "thirdweb/extensions/thirdweb";
 *
 * const transaction = deleteRule({
 *  ruleId: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function deleteRule(options: BaseTransactionOptions<DeleteRuleParams>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
export {};
//# sourceMappingURL=deleteRule.d.ts.map