import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "getScore" function.
 */
export type GetScoreParams = {
    tokenOwner: AbiParameterToPrimitiveType<{
        type: "address";
        name: "_tokenOwner";
    }>;
};
/**
 * Encodes the parameters for the "getScore" function.
 * @param options - The options for the getScore function.
 * @returns The encoded ABI parameters.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { encodeGetScoreParams } "thirdweb/extensions/thirdweb";
 * const result = encodeGetScoreParams({
 *  tokenOwner: ...,
 * });
 * ```
 */
export declare function encodeGetScoreParams(options: GetScoreParams): `0x${string}`;
/**
 * Decodes the result of the getScore function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { decodeGetScoreResult } from "thirdweb/extensions/thirdweb";
 * const result = decodeGetScoreResult("...");
 * ```
 */
export declare function decodeGetScoreResult(result: Hex): bigint;
/**
 * Calls the "getScore" function on the contract.
 * @param options - The options for the getScore function.
 * @returns The parsed result of the function call.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { getScore } from "thirdweb/extensions/thirdweb";
 *
 * const result = await getScore({
 *  tokenOwner: ...,
 * });
 *
 * ```
 */
export declare function getScore(options: BaseTransactionOptions<GetScoreParams>): Promise<bigint>;
//# sourceMappingURL=getScore.d.ts.map