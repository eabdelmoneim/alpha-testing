import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Prettify } from "../../../../../utils/type-utils.js";
/**
 * Represents the parameters for the "setPublisherProfileUri" function.
 */
type SetPublisherProfileUriParamsInternal = {
    publisher: AbiParameterToPrimitiveType<{
        type: "address";
        name: "publisher";
    }>;
    uri: AbiParameterToPrimitiveType<{
        type: "string";
        name: "uri";
    }>;
};
export type SetPublisherProfileUriParams = Prettify<SetPublisherProfileUriParamsInternal | {
    asyncParams: () => Promise<SetPublisherProfileUriParamsInternal>;
}>;
/**
 * Encodes the parameters for the "setPublisherProfileUri" function.
 * @param options - The options for the setPublisherProfileUri function.
 * @returns The encoded ABI parameters.
 * @extension THIRDWEB
 * @example
 * ```
 * import { encodeSetPublisherProfileUriParams } "thirdweb/extensions/thirdweb";
 * const result = encodeSetPublisherProfileUriParams({
 *  publisher: ...,
 *  uri: ...,
 * });
 * ```
 */
export declare function encodeSetPublisherProfileUriParams(options: SetPublisherProfileUriParamsInternal): `0x${string}`;
/**
 * Calls the "setPublisherProfileUri" function on the contract.
 * @param options - The options for the "setPublisherProfileUri" function.
 * @returns A prepared transaction object.
 * @extension THIRDWEB
 * @example
 * ```
 * import { setPublisherProfileUri } from "thirdweb/extensions/thirdweb";
 *
 * const transaction = setPublisherProfileUri({
 *  publisher: ...,
 *  uri: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function setPublisherProfileUri(options: BaseTransactionOptions<SetPublisherProfileUriParams>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
export {};
//# sourceMappingURL=setPublisherProfileUri.d.ts.map