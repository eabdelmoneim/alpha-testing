import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
/**
 * Represents the parameters for the "publishContract" function.
 */
export type PublishContractParams = {
    publisher: AbiParameterToPrimitiveType<{
        type: "address";
        name: "publisher";
    }>;
    contractId: AbiParameterToPrimitiveType<{
        type: "string";
        name: "contractId";
    }>;
    publishMetadataUri: AbiParameterToPrimitiveType<{
        type: "string";
        name: "publishMetadataUri";
    }>;
    compilerMetadataUri: AbiParameterToPrimitiveType<{
        type: "string";
        name: "compilerMetadataUri";
    }>;
    bytecodeHash: AbiParameterToPrimitiveType<{
        type: "bytes32";
        name: "bytecodeHash";
    }>;
    implementation: AbiParameterToPrimitiveType<{
        type: "address";
        name: "implementation";
    }>;
};
/**
 * Encodes the parameters for the "publishContract" function.
 * @param options - The options for the publishContract function.
 * @returns The encoded ABI parameters.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { encodePublishContractParams } "thirdweb/extensions/thirdweb";
 * const result = encodePublishContractParams({
 *  publisher: ...,
 *  contractId: ...,
 *  publishMetadataUri: ...,
 *  compilerMetadataUri: ...,
 *  bytecodeHash: ...,
 *  implementation: ...,
 * });
 * ```
 */
export declare function encodePublishContractParams(options: PublishContractParams): `0x${string}`;
/**
 * Calls the "publishContract" function on the contract.
 * @param options - The options for the "publishContract" function.
 * @returns A prepared transaction object.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { publishContract } from "thirdweb/extensions/thirdweb";
 *
 * const transaction = publishContract({
 *  contract,
 *  publisher: ...,
 *  contractId: ...,
 *  publishMetadataUri: ...,
 *  compilerMetadataUri: ...,
 *  bytecodeHash: ...,
 *  implementation: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function publishContract(options: BaseTransactionOptions<PublishContractParams | {
    asyncParams: () => Promise<PublishContractParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
//# sourceMappingURL=publishContract.d.ts.map