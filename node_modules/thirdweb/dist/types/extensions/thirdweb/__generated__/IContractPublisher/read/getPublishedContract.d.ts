import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "getPublishedContract" function.
 */
export type GetPublishedContractParams = {
    publisher: AbiParameterToPrimitiveType<{
        type: "address";
        name: "publisher";
    }>;
    contractId: AbiParameterToPrimitiveType<{
        type: "string";
        name: "contractId";
    }>;
};
/**
 * Encodes the parameters for the "getPublishedContract" function.
 * @param options - The options for the getPublishedContract function.
 * @returns The encoded ABI parameters.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { encodeGetPublishedContractParams } "thirdweb/extensions/thirdweb";
 * const result = encodeGetPublishedContractParams({
 *  publisher: ...,
 *  contractId: ...,
 * });
 * ```
 */
export declare function encodeGetPublishedContractParams(options: GetPublishedContractParams): `0x${string}`;
/**
 * Decodes the result of the getPublishedContract function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { decodeGetPublishedContractResult } from "thirdweb/extensions/thirdweb";
 * const result = decodeGetPublishedContractResult("...");
 * ```
 */
export declare function decodeGetPublishedContractResult(result: Hex): {
    contractId: string;
    publishTimestamp: bigint;
    publishMetadataUri: string;
    bytecodeHash: `0x${string}`;
    implementation: string;
};
/**
 * Calls the "getPublishedContract" function on the contract.
 * @param options - The options for the getPublishedContract function.
 * @returns The parsed result of the function call.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { getPublishedContract } from "thirdweb/extensions/thirdweb";
 *
 * const result = await getPublishedContract({
 *  publisher: ...,
 *  contractId: ...,
 * });
 *
 * ```
 */
export declare function getPublishedContract(options: BaseTransactionOptions<GetPublishedContractParams>): Promise<{
    contractId: string;
    publishTimestamp: bigint;
    publishMetadataUri: string;
    bytecodeHash: `0x${string}`;
    implementation: string;
}>;
//# sourceMappingURL=getPublishedContract.d.ts.map