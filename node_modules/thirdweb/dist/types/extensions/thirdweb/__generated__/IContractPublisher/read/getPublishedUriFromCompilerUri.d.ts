import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "getPublishedUriFromCompilerUri" function.
 */
export type GetPublishedUriFromCompilerUriParams = {
    compilerMetadataUri: AbiParameterToPrimitiveType<{
        type: "string";
        name: "compilerMetadataUri";
    }>;
};
/**
 * Encodes the parameters for the "getPublishedUriFromCompilerUri" function.
 * @param options - The options for the getPublishedUriFromCompilerUri function.
 * @returns The encoded ABI parameters.
 * @extension THIRDWEB
 * @example
 * ```
 * import { encodeGetPublishedUriFromCompilerUriParams } "thirdweb/extensions/thirdweb";
 * const result = encodeGetPublishedUriFromCompilerUriParams({
 *  compilerMetadataUri: ...,
 * });
 * ```
 */
export declare function encodeGetPublishedUriFromCompilerUriParams(options: GetPublishedUriFromCompilerUriParams): `0x${string}`;
/**
 * Decodes the result of the getPublishedUriFromCompilerUri function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension THIRDWEB
 * @example
 * ```
 * import { decodeGetPublishedUriFromCompilerUriResult } from "thirdweb/extensions/thirdweb";
 * const result = decodeGetPublishedUriFromCompilerUriResult("...");
 * ```
 */
export declare function decodeGetPublishedUriFromCompilerUriResult(result: Hex): readonly string[];
/**
 * Calls the "getPublishedUriFromCompilerUri" function on the contract.
 * @param options - The options for the getPublishedUriFromCompilerUri function.
 * @returns The parsed result of the function call.
 * @extension THIRDWEB
 * @example
 * ```
 * import { getPublishedUriFromCompilerUri } from "thirdweb/extensions/thirdweb";
 *
 * const result = await getPublishedUriFromCompilerUri({
 *  compilerMetadataUri: ...,
 * });
 *
 * ```
 */
export declare function getPublishedUriFromCompilerUri(options: BaseTransactionOptions<GetPublishedUriFromCompilerUriParams>): Promise<readonly string[]>;
//# sourceMappingURL=getPublishedUriFromCompilerUri.d.ts.map