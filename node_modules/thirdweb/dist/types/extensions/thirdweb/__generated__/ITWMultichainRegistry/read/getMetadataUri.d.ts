import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "getMetadataUri" function.
 */
export type GetMetadataUriParams = {
    chainId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_chainId";
    }>;
    deployment: AbiParameterToPrimitiveType<{
        type: "address";
        name: "_deployment";
    }>;
};
/**
 * Encodes the parameters for the "getMetadataUri" function.
 * @param options - The options for the getMetadataUri function.
 * @returns The encoded ABI parameters.
 * @extension THIRDWEB
 * @example
 * ```
 * import { encodeGetMetadataUriParams } "thirdweb/extensions/thirdweb";
 * const result = encodeGetMetadataUriParams({
 *  chainId: ...,
 *  deployment: ...,
 * });
 * ```
 */
export declare function encodeGetMetadataUriParams(options: GetMetadataUriParams): `0x${string}`;
/**
 * Decodes the result of the getMetadataUri function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension THIRDWEB
 * @example
 * ```
 * import { decodeGetMetadataUriResult } from "thirdweb/extensions/thirdweb";
 * const result = decodeGetMetadataUriResult("...");
 * ```
 */
export declare function decodeGetMetadataUriResult(result: Hex): string;
/**
 * Calls the "getMetadataUri" function on the contract.
 * @param options - The options for the getMetadataUri function.
 * @returns The parsed result of the function call.
 * @extension THIRDWEB
 * @example
 * ```
 * import { getMetadataUri } from "thirdweb/extensions/thirdweb";
 *
 * const result = await getMetadataUri({
 *  chainId: ...,
 *  deployment: ...,
 * });
 *
 * ```
 */
export declare function getMetadataUri(options: BaseTransactionOptions<GetMetadataUriParams>): Promise<string>;
//# sourceMappingURL=getMetadataUri.d.ts.map