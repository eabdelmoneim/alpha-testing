import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
/**
 * Represents the parameters for the "remove" function.
 */
export type RemoveParams = {
    deployer: AbiParameterToPrimitiveType<{
        type: "address";
        name: "_deployer";
    }>;
    deployment: AbiParameterToPrimitiveType<{
        type: "address";
        name: "_deployment";
    }>;
    chainId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_chainId";
    }>;
};
/**
 * Encodes the parameters for the "remove" function.
 * @param options - The options for the remove function.
 * @returns The encoded ABI parameters.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { encodeRemoveParams } "thirdweb/extensions/thirdweb";
 * const result = encodeRemoveParams({
 *  deployer: ...,
 *  deployment: ...,
 *  chainId: ...,
 * });
 * ```
 */
export declare function encodeRemoveParams(options: RemoveParams): `0x${string}`;
/**
 * Calls the "remove" function on the contract.
 * @param options - The options for the "remove" function.
 * @returns A prepared transaction object.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { remove } from "thirdweb/extensions/thirdweb";
 *
 * const transaction = remove({
 *  contract,
 *  deployer: ...,
 *  deployment: ...,
 *  chainId: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function remove(options: BaseTransactionOptions<RemoveParams | {
    asyncParams: () => Promise<RemoveParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
//# sourceMappingURL=remove.d.ts.map