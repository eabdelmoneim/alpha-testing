import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "getAll" function.
 */
export type GetAllParams = {
    deployer: AbiParameterToPrimitiveType<{
        type: "address";
        name: "_deployer";
    }>;
};
/**
 * Encodes the parameters for the "getAll" function.
 * @param options - The options for the getAll function.
 * @returns The encoded ABI parameters.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { encodeGetAllParams } "thirdweb/extensions/thirdweb";
 * const result = encodeGetAllParams({
 *  deployer: ...,
 * });
 * ```
 */
export declare function encodeGetAllParams(options: GetAllParams): `0x${string}`;
/**
 * Decodes the result of the getAll function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { decodeGetAllResult } from "thirdweb/extensions/thirdweb";
 * const result = decodeGetAllResult("...");
 * ```
 */
export declare function decodeGetAllResult(result: Hex): readonly {
    deploymentAddress: string;
    chainId: bigint;
    metadataURI: string;
}[];
/**
 * Calls the "getAll" function on the contract.
 * @param options - The options for the getAll function.
 * @returns The parsed result of the function call.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { getAll } from "thirdweb/extensions/thirdweb";
 *
 * const result = await getAll({
 *  deployer: ...,
 * });
 *
 * ```
 */
export declare function getAll(options: BaseTransactionOptions<GetAllParams>): Promise<readonly {
    deploymentAddress: string;
    chainId: bigint;
    metadataURI: string;
}[]>;
//# sourceMappingURL=getAll.d.ts.map