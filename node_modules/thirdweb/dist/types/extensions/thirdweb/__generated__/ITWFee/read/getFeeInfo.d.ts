import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "getFeeInfo" function.
 */
export type GetFeeInfoParams = {
    proxy: AbiParameterToPrimitiveType<{
        type: "address";
        name: "_proxy";
    }>;
    type: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_type";
    }>;
};
/**
 * Encodes the parameters for the "getFeeInfo" function.
 * @param options - The options for the getFeeInfo function.
 * @returns The encoded ABI parameters.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { encodeGetFeeInfoParams } "thirdweb/extensions/thirdweb";
 * const result = encodeGetFeeInfoParams({
 *  proxy: ...,
 *  type: ...,
 * });
 * ```
 */
export declare function encodeGetFeeInfoParams(options: GetFeeInfoParams): `0x${string}`;
/**
 * Decodes the result of the getFeeInfo function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { decodeGetFeeInfoResult } from "thirdweb/extensions/thirdweb";
 * const result = decodeGetFeeInfoResult("...");
 * ```
 */
export declare function decodeGetFeeInfoResult(result: Hex): readonly [string, bigint];
/**
 * Calls the "getFeeInfo" function on the contract.
 * @param options - The options for the getFeeInfo function.
 * @returns The parsed result of the function call.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { getFeeInfo } from "thirdweb/extensions/thirdweb";
 *
 * const result = await getFeeInfo({
 *  proxy: ...,
 *  type: ...,
 * });
 *
 * ```
 */
export declare function getFeeInfo(options: BaseTransactionOptions<GetFeeInfoParams>): Promise<readonly [string, bigint]>;
//# sourceMappingURL=getFeeInfo.d.ts.map