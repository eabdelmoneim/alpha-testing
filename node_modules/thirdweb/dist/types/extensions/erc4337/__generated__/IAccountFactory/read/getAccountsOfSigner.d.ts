import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "getAccountsOfSigner" function.
 */
export type GetAccountsOfSignerParams = {
    signer: AbiParameterToPrimitiveType<{
        type: "address";
        name: "signer";
    }>;
};
/**
 * Encodes the parameters for the "getAccountsOfSigner" function.
 * @param options - The options for the getAccountsOfSigner function.
 * @returns The encoded ABI parameters.
 * @extension ERC4337
 * @example
 * ```ts
 * import { encodeGetAccountsOfSignerParams } "thirdweb/extensions/erc4337";
 * const result = encodeGetAccountsOfSignerParams({
 *  signer: ...,
 * });
 * ```
 */
export declare function encodeGetAccountsOfSignerParams(options: GetAccountsOfSignerParams): `0x${string}`;
/**
 * Decodes the result of the getAccountsOfSigner function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC4337
 * @example
 * ```ts
 * import { decodeGetAccountsOfSignerResult } from "thirdweb/extensions/erc4337";
 * const result = decodeGetAccountsOfSignerResult("...");
 * ```
 */
export declare function decodeGetAccountsOfSignerResult(result: Hex): readonly string[];
/**
 * Calls the "getAccountsOfSigner" function on the contract.
 * @param options - The options for the getAccountsOfSigner function.
 * @returns The parsed result of the function call.
 * @extension ERC4337
 * @example
 * ```ts
 * import { getAccountsOfSigner } from "thirdweb/extensions/erc4337";
 *
 * const result = await getAccountsOfSigner({
 *  signer: ...,
 * });
 *
 * ```
 */
export declare function getAccountsOfSigner(options: BaseTransactionOptions<GetAccountsOfSignerParams>): Promise<readonly string[]>;
//# sourceMappingURL=getAccountsOfSigner.d.ts.map