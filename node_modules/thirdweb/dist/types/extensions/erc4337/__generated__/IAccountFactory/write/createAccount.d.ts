import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Prettify } from "../../../../../utils/type-utils.js";
/**
 * Represents the parameters for the "createAccount" function.
 */
type CreateAccountParamsInternal = {
    admin: AbiParameterToPrimitiveType<{
        type: "address";
        name: "admin";
    }>;
    data: AbiParameterToPrimitiveType<{
        type: "bytes";
        name: "_data";
    }>;
};
export type CreateAccountParams = Prettify<CreateAccountParamsInternal | {
    asyncParams: () => Promise<CreateAccountParamsInternal>;
}>;
/**
 * Encodes the parameters for the "createAccount" function.
 * @param options - The options for the createAccount function.
 * @returns The encoded ABI parameters.
 * @extension ERC4337
 * @example
 * ```
 * import { encodeCreateAccountParams } "thirdweb/extensions/erc4337";
 * const result = encodeCreateAccountParams({
 *  admin: ...,
 *  data: ...,
 * });
 * ```
 */
export declare function encodeCreateAccountParams(options: CreateAccountParamsInternal): `0x${string}`;
/**
 * Calls the "createAccount" function on the contract.
 * @param options - The options for the "createAccount" function.
 * @returns A prepared transaction object.
 * @extension ERC4337
 * @example
 * ```
 * import { createAccount } from "thirdweb/extensions/erc4337";
 *
 * const transaction = createAccount({
 *  admin: ...,
 *  data: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function createAccount(options: BaseTransactionOptions<CreateAccountParams>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
export {};
//# sourceMappingURL=createAccount.d.ts.map