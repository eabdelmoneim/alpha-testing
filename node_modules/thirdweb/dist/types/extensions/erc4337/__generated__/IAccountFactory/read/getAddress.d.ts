import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "getAddress" function.
 */
export type GetAddressParams = {
    adminSigner: AbiParameterToPrimitiveType<{
        type: "address";
        name: "adminSigner";
    }>;
    data: AbiParameterToPrimitiveType<{
        type: "bytes";
        name: "data";
    }>;
};
/**
 * Encodes the parameters for the "getAddress" function.
 * @param options - The options for the getAddress function.
 * @returns The encoded ABI parameters.
 * @extension ERC4337
 * @example
 * ```ts
 * import { encodeGetAddressParams } "thirdweb/extensions/erc4337";
 * const result = encodeGetAddressParams({
 *  adminSigner: ...,
 *  data: ...,
 * });
 * ```
 */
export declare function encodeGetAddressParams(options: GetAddressParams): `0x${string}`;
/**
 * Decodes the result of the getAddress function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC4337
 * @example
 * ```ts
 * import { decodeGetAddressResult } from "thirdweb/extensions/erc4337";
 * const result = decodeGetAddressResult("...");
 * ```
 */
export declare function decodeGetAddressResult(result: Hex): string;
/**
 * Calls the "getAddress" function on the contract.
 * @param options - The options for the getAddress function.
 * @returns The parsed result of the function call.
 * @extension ERC4337
 * @example
 * ```ts
 * import { getAddress } from "thirdweb/extensions/erc4337";
 *
 * const result = await getAddress({
 *  adminSigner: ...,
 *  data: ...,
 * });
 *
 * ```
 */
export declare function getAddress(options: BaseTransactionOptions<GetAddressParams>): Promise<string>;
//# sourceMappingURL=getAddress.d.ts.map