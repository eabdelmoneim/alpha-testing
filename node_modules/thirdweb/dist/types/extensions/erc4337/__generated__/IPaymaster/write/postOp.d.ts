import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Prettify } from "../../../../../utils/type-utils.js";
/**
 * Represents the parameters for the "postOp" function.
 */
type PostOpParamsInternal = {
    mode: AbiParameterToPrimitiveType<{
        type: "uint8";
        name: "mode";
    }>;
    context: AbiParameterToPrimitiveType<{
        type: "bytes";
        name: "context";
    }>;
    actualGasCost: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "actualGasCost";
    }>;
};
export type PostOpParams = Prettify<PostOpParamsInternal | {
    asyncParams: () => Promise<PostOpParamsInternal>;
}>;
/**
 * Encodes the parameters for the "postOp" function.
 * @param options - The options for the postOp function.
 * @returns The encoded ABI parameters.
 * @extension ERC4337
 * @example
 * ```
 * import { encodePostOpParams } "thirdweb/extensions/erc4337";
 * const result = encodePostOpParams({
 *  mode: ...,
 *  context: ...,
 *  actualGasCost: ...,
 * });
 * ```
 */
export declare function encodePostOpParams(options: PostOpParamsInternal): `0x${string}`;
/**
 * Calls the "postOp" function on the contract.
 * @param options - The options for the "postOp" function.
 * @returns A prepared transaction object.
 * @extension ERC4337
 * @example
 * ```
 * import { postOp } from "thirdweb/extensions/erc4337";
 *
 * const transaction = postOp({
 *  mode: ...,
 *  context: ...,
 *  actualGasCost: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function postOp(options: BaseTransactionOptions<PostOpParams>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
export {};
//# sourceMappingURL=postOp.d.ts.map