import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Prettify } from "../../../../../utils/type-utils.js";
/**
 * Represents the parameters for the "withdrawStake" function.
 */
type WithdrawStakeParamsInternal = {
    withdrawAddress: AbiParameterToPrimitiveType<{
        type: "address";
        name: "withdrawAddress";
    }>;
};
export type WithdrawStakeParams = Prettify<WithdrawStakeParamsInternal | {
    asyncParams: () => Promise<WithdrawStakeParamsInternal>;
}>;
/**
 * Encodes the parameters for the "withdrawStake" function.
 * @param options - The options for the withdrawStake function.
 * @returns The encoded ABI parameters.
 * @extension ERC4337
 * @example
 * ```
 * import { encodeWithdrawStakeParams } "thirdweb/extensions/erc4337";
 * const result = encodeWithdrawStakeParams({
 *  withdrawAddress: ...,
 * });
 * ```
 */
export declare function encodeWithdrawStakeParams(options: WithdrawStakeParamsInternal): `0x${string}`;
/**
 * Calls the "withdrawStake" function on the contract.
 * @param options - The options for the "withdrawStake" function.
 * @returns A prepared transaction object.
 * @extension ERC4337
 * @example
 * ```
 * import { withdrawStake } from "thirdweb/extensions/erc4337";
 *
 * const transaction = withdrawStake({
 *  withdrawAddress: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function withdrawStake(options: BaseTransactionOptions<WithdrawStakeParams>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
export {};
//# sourceMappingURL=withdrawStake.d.ts.map