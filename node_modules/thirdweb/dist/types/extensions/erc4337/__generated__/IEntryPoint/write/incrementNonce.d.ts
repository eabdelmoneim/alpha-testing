import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
/**
 * Represents the parameters for the "incrementNonce" function.
 */
export type IncrementNonceParams = {
    key: AbiParameterToPrimitiveType<{
        type: "uint192";
        name: "key";
    }>;
};
/**
 * Encodes the parameters for the "incrementNonce" function.
 * @param options - The options for the incrementNonce function.
 * @returns The encoded ABI parameters.
 * @extension ERC4337
 * @example
 * ```ts
 * import { encodeIncrementNonceParams } "thirdweb/extensions/erc4337";
 * const result = encodeIncrementNonceParams({
 *  key: ...,
 * });
 * ```
 */
export declare function encodeIncrementNonceParams(options: IncrementNonceParams): `0x${string}`;
/**
 * Calls the "incrementNonce" function on the contract.
 * @param options - The options for the "incrementNonce" function.
 * @returns A prepared transaction object.
 * @extension ERC4337
 * @example
 * ```ts
 * import { incrementNonce } from "thirdweb/extensions/erc4337";
 *
 * const transaction = incrementNonce({
 *  contract,
 *  key: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function incrementNonce(options: BaseTransactionOptions<IncrementNonceParams | {
    asyncParams: () => Promise<IncrementNonceParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
//# sourceMappingURL=incrementNonce.d.ts.map