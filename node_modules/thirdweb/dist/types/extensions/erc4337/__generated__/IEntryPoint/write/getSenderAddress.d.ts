import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Prettify } from "../../../../../utils/type-utils.js";
/**
 * Represents the parameters for the "getSenderAddress" function.
 */
type GetSenderAddressParamsInternal = {
    initCode: AbiParameterToPrimitiveType<{
        type: "bytes";
        name: "initCode";
    }>;
};
export type GetSenderAddressParams = Prettify<GetSenderAddressParamsInternal | {
    asyncParams: () => Promise<GetSenderAddressParamsInternal>;
}>;
/**
 * Encodes the parameters for the "getSenderAddress" function.
 * @param options - The options for the getSenderAddress function.
 * @returns The encoded ABI parameters.
 * @extension ERC4337
 * @example
 * ```
 * import { encodeGetSenderAddressParams } "thirdweb/extensions/erc4337";
 * const result = encodeGetSenderAddressParams({
 *  initCode: ...,
 * });
 * ```
 */
export declare function encodeGetSenderAddressParams(options: GetSenderAddressParamsInternal): `0x${string}`;
/**
 * Calls the "getSenderAddress" function on the contract.
 * @param options - The options for the "getSenderAddress" function.
 * @returns A prepared transaction object.
 * @extension ERC4337
 * @example
 * ```
 * import { getSenderAddress } from "thirdweb/extensions/erc4337";
 *
 * const transaction = getSenderAddress({
 *  initCode: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function getSenderAddress(options: BaseTransactionOptions<GetSenderAddressParams>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
export {};
//# sourceMappingURL=getSenderAddress.d.ts.map