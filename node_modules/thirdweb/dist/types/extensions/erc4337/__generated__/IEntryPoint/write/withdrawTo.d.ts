import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
/**
 * Represents the parameters for the "withdrawTo" function.
 */
export type WithdrawToParams = {
    withdrawAddress: AbiParameterToPrimitiveType<{
        type: "address";
        name: "withdrawAddress";
    }>;
    withdrawAmount: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "withdrawAmount";
    }>;
};
/**
 * Encodes the parameters for the "withdrawTo" function.
 * @param options - The options for the withdrawTo function.
 * @returns The encoded ABI parameters.
 * @extension ERC4337
 * @example
 * ```ts
 * import { encodeWithdrawToParams } "thirdweb/extensions/erc4337";
 * const result = encodeWithdrawToParams({
 *  withdrawAddress: ...,
 *  withdrawAmount: ...,
 * });
 * ```
 */
export declare function encodeWithdrawToParams(options: WithdrawToParams): `0x${string}`;
/**
 * Calls the "withdrawTo" function on the contract.
 * @param options - The options for the "withdrawTo" function.
 * @returns A prepared transaction object.
 * @extension ERC4337
 * @example
 * ```ts
 * import { withdrawTo } from "thirdweb/extensions/erc4337";
 *
 * const transaction = withdrawTo({
 *  contract,
 *  withdrawAddress: ...,
 *  withdrawAmount: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function withdrawTo(options: BaseTransactionOptions<WithdrawToParams | {
    asyncParams: () => Promise<WithdrawToParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
//# sourceMappingURL=withdrawTo.d.ts.map