import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "getUserOpHash" function.
 */
export type GetUserOpHashParams = {
    userOp: AbiParameterToPrimitiveType<{
        type: "tuple";
        name: "userOp";
        components: [
            {
                type: "address";
                name: "sender";
            },
            {
                type: "uint256";
                name: "nonce";
            },
            {
                type: "bytes";
                name: "initCode";
            },
            {
                type: "bytes";
                name: "callData";
            },
            {
                type: "uint256";
                name: "callGasLimit";
            },
            {
                type: "uint256";
                name: "verificationGasLimit";
            },
            {
                type: "uint256";
                name: "preVerificationGas";
            },
            {
                type: "uint256";
                name: "maxFeePerGas";
            },
            {
                type: "uint256";
                name: "maxPriorityFeePerGas";
            },
            {
                type: "bytes";
                name: "paymasterAndData";
            },
            {
                type: "bytes";
                name: "signature";
            }
        ];
    }>;
};
/**
 * Encodes the parameters for the "getUserOpHash" function.
 * @param options - The options for the getUserOpHash function.
 * @returns The encoded ABI parameters.
 * @extension ERC4337
 * @example
 * ```
 * import { encodeGetUserOpHashParams } "thirdweb/extensions/erc4337";
 * const result = encodeGetUserOpHashParams({
 *  userOp: ...,
 * });
 * ```
 */
export declare function encodeGetUserOpHashParams(options: GetUserOpHashParams): `0x${string}`;
/**
 * Decodes the result of the getUserOpHash function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC4337
 * @example
 * ```
 * import { decodeGetUserOpHashResult } from "thirdweb/extensions/erc4337";
 * const result = decodeGetUserOpHashResult("...");
 * ```
 */
export declare function decodeGetUserOpHashResult(result: Hex): `0x${string}`;
/**
 * Calls the "getUserOpHash" function on the contract.
 * @param options - The options for the getUserOpHash function.
 * @returns The parsed result of the function call.
 * @extension ERC4337
 * @example
 * ```
 * import { getUserOpHash } from "thirdweb/extensions/erc4337";
 *
 * const result = await getUserOpHash({
 *  userOp: ...,
 * });
 *
 * ```
 */
export declare function getUserOpHash(options: BaseTransactionOptions<GetUserOpHashParams>): Promise<`0x${string}`>;
//# sourceMappingURL=getUserOpHash.d.ts.map