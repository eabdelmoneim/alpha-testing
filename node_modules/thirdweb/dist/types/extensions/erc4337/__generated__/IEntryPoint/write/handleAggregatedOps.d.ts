import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
/**
 * Represents the parameters for the "handleAggregatedOps" function.
 */
export type HandleAggregatedOpsParams = {
    opsPerAggregator: AbiParameterToPrimitiveType<{
        type: "tuple[]";
        name: "opsPerAggregator";
        components: [
            {
                type: "tuple[]";
                name: "userOps";
                components: [
                    {
                        type: "address";
                        name: "sender";
                    },
                    {
                        type: "uint256";
                        name: "nonce";
                    },
                    {
                        type: "bytes";
                        name: "initCode";
                    },
                    {
                        type: "bytes";
                        name: "callData";
                    },
                    {
                        type: "uint256";
                        name: "callGasLimit";
                    },
                    {
                        type: "uint256";
                        name: "verificationGasLimit";
                    },
                    {
                        type: "uint256";
                        name: "preVerificationGas";
                    },
                    {
                        type: "uint256";
                        name: "maxFeePerGas";
                    },
                    {
                        type: "uint256";
                        name: "maxPriorityFeePerGas";
                    },
                    {
                        type: "bytes";
                        name: "paymasterAndData";
                    },
                    {
                        type: "bytes";
                        name: "signature";
                    }
                ];
            },
            {
                type: "address";
                name: "aggregator";
            },
            {
                type: "bytes";
                name: "signature";
            }
        ];
    }>;
    beneficiary: AbiParameterToPrimitiveType<{
        type: "address";
        name: "beneficiary";
    }>;
};
/**
 * Encodes the parameters for the "handleAggregatedOps" function.
 * @param options - The options for the handleAggregatedOps function.
 * @returns The encoded ABI parameters.
 * @extension ERC4337
 * @example
 * ```ts
 * import { encodeHandleAggregatedOpsParams } "thirdweb/extensions/erc4337";
 * const result = encodeHandleAggregatedOpsParams({
 *  opsPerAggregator: ...,
 *  beneficiary: ...,
 * });
 * ```
 */
export declare function encodeHandleAggregatedOpsParams(options: HandleAggregatedOpsParams): `0x${string}`;
/**
 * Calls the "handleAggregatedOps" function on the contract.
 * @param options - The options for the "handleAggregatedOps" function.
 * @returns A prepared transaction object.
 * @extension ERC4337
 * @example
 * ```ts
 * import { handleAggregatedOps } from "thirdweb/extensions/erc4337";
 *
 * const transaction = handleAggregatedOps({
 *  contract,
 *  opsPerAggregator: ...,
 *  beneficiary: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function handleAggregatedOps(options: BaseTransactionOptions<HandleAggregatedOpsParams | {
    asyncParams: () => Promise<HandleAggregatedOpsParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
//# sourceMappingURL=handleAggregatedOps.d.ts.map