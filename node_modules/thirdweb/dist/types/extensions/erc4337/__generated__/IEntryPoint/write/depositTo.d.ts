import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Prettify } from "../../../../../utils/type-utils.js";
/**
 * Represents the parameters for the "depositTo" function.
 */
type DepositToParamsInternal = {
    account: AbiParameterToPrimitiveType<{
        type: "address";
        name: "account";
    }>;
};
export type DepositToParams = Prettify<DepositToParamsInternal | {
    asyncParams: () => Promise<DepositToParamsInternal>;
}>;
/**
 * Encodes the parameters for the "depositTo" function.
 * @param options - The options for the depositTo function.
 * @returns The encoded ABI parameters.
 * @extension ERC4337
 * @example
 * ```
 * import { encodeDepositToParams } "thirdweb/extensions/erc4337";
 * const result = encodeDepositToParams({
 *  account: ...,
 * });
 * ```
 */
export declare function encodeDepositToParams(options: DepositToParamsInternal): `0x${string}`;
/**
 * Calls the "depositTo" function on the contract.
 * @param options - The options for the "depositTo" function.
 * @returns A prepared transaction object.
 * @extension ERC4337
 * @example
 * ```
 * import { depositTo } from "thirdweb/extensions/erc4337";
 *
 * const transaction = depositTo({
 *  account: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function depositTo(options: BaseTransactionOptions<DepositToParams>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
export {};
//# sourceMappingURL=depositTo.d.ts.map