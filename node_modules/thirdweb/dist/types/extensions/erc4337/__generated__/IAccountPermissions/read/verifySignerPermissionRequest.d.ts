import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "verifySignerPermissionRequest" function.
 */
export type VerifySignerPermissionRequestParams = {
    req: AbiParameterToPrimitiveType<{
        type: "tuple";
        name: "req";
        components: [
            {
                type: "address";
                name: "signer";
            },
            {
                type: "uint8";
                name: "isAdmin";
            },
            {
                type: "address[]";
                name: "approvedTargets";
            },
            {
                type: "uint256";
                name: "nativeTokenLimitPerTransaction";
            },
            {
                type: "uint128";
                name: "permissionStartTimestamp";
            },
            {
                type: "uint128";
                name: "permissionEndTimestamp";
            },
            {
                type: "uint128";
                name: "reqValidityStartTimestamp";
            },
            {
                type: "uint128";
                name: "reqValidityEndTimestamp";
            },
            {
                type: "bytes32";
                name: "uid";
            }
        ];
    }>;
    signature: AbiParameterToPrimitiveType<{
        type: "bytes";
        name: "signature";
    }>;
};
/**
 * Encodes the parameters for the "verifySignerPermissionRequest" function.
 * @param options - The options for the verifySignerPermissionRequest function.
 * @returns The encoded ABI parameters.
 * @extension ERC4337
 * @example
 * ```
 * import { encodeVerifySignerPermissionRequestParams } "thirdweb/extensions/erc4337";
 * const result = encodeVerifySignerPermissionRequestParams({
 *  req: ...,
 *  signature: ...,
 * });
 * ```
 */
export declare function encodeVerifySignerPermissionRequestParams(options: VerifySignerPermissionRequestParams): `0x${string}`;
/**
 * Decodes the result of the verifySignerPermissionRequest function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC4337
 * @example
 * ```
 * import { decodeVerifySignerPermissionRequestResult } from "thirdweb/extensions/erc4337";
 * const result = decodeVerifySignerPermissionRequestResult("...");
 * ```
 */
export declare function decodeVerifySignerPermissionRequestResult(result: Hex): readonly [boolean, string];
/**
 * Calls the "verifySignerPermissionRequest" function on the contract.
 * @param options - The options for the verifySignerPermissionRequest function.
 * @returns The parsed result of the function call.
 * @extension ERC4337
 * @example
 * ```
 * import { verifySignerPermissionRequest } from "thirdweb/extensions/erc4337";
 *
 * const result = await verifySignerPermissionRequest({
 *  req: ...,
 *  signature: ...,
 * });
 *
 * ```
 */
export declare function verifySignerPermissionRequest(options: BaseTransactionOptions<VerifySignerPermissionRequestParams>): Promise<readonly [boolean, string]>;
//# sourceMappingURL=verifySignerPermissionRequest.d.ts.map