import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Prettify } from "../../../../../utils/type-utils.js";
/**
 * Represents the parameters for the "setPermissionsForSigner" function.
 */
type SetPermissionsForSignerParamsInternal = {
    req: AbiParameterToPrimitiveType<{
        type: "tuple";
        name: "req";
        components: [
            {
                type: "address";
                name: "signer";
            },
            {
                type: "uint8";
                name: "isAdmin";
            },
            {
                type: "address[]";
                name: "approvedTargets";
            },
            {
                type: "uint256";
                name: "nativeTokenLimitPerTransaction";
            },
            {
                type: "uint128";
                name: "permissionStartTimestamp";
            },
            {
                type: "uint128";
                name: "permissionEndTimestamp";
            },
            {
                type: "uint128";
                name: "reqValidityStartTimestamp";
            },
            {
                type: "uint128";
                name: "reqValidityEndTimestamp";
            },
            {
                type: "bytes32";
                name: "uid";
            }
        ];
    }>;
    signature: AbiParameterToPrimitiveType<{
        type: "bytes";
        name: "signature";
    }>;
};
export type SetPermissionsForSignerParams = Prettify<SetPermissionsForSignerParamsInternal | {
    asyncParams: () => Promise<SetPermissionsForSignerParamsInternal>;
}>;
/**
 * Encodes the parameters for the "setPermissionsForSigner" function.
 * @param options - The options for the setPermissionsForSigner function.
 * @returns The encoded ABI parameters.
 * @extension ERC4337
 * @example
 * ```
 * import { encodeSetPermissionsForSignerParams } "thirdweb/extensions/erc4337";
 * const result = encodeSetPermissionsForSignerParams({
 *  req: ...,
 *  signature: ...,
 * });
 * ```
 */
export declare function encodeSetPermissionsForSignerParams(options: SetPermissionsForSignerParamsInternal): `0x${string}`;
/**
 * Calls the "setPermissionsForSigner" function on the contract.
 * @param options - The options for the "setPermissionsForSigner" function.
 * @returns A prepared transaction object.
 * @extension ERC4337
 * @example
 * ```
 * import { setPermissionsForSigner } from "thirdweb/extensions/erc4337";
 *
 * const transaction = setPermissionsForSigner({
 *  req: ...,
 *  signature: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function setPermissionsForSigner(options: BaseTransactionOptions<SetPermissionsForSignerParams>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
export {};
//# sourceMappingURL=setPermissionsForSigner.d.ts.map