import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "getPermissionsForSigner" function.
 */
export type GetPermissionsForSignerParams = {
    signer: AbiParameterToPrimitiveType<{
        type: "address";
        name: "signer";
    }>;
};
/**
 * Encodes the parameters for the "getPermissionsForSigner" function.
 * @param options - The options for the getPermissionsForSigner function.
 * @returns The encoded ABI parameters.
 * @extension ERC4337
 * @example
 * ```ts
 * import { encodeGetPermissionsForSignerParams } "thirdweb/extensions/erc4337";
 * const result = encodeGetPermissionsForSignerParams({
 *  signer: ...,
 * });
 * ```
 */
export declare function encodeGetPermissionsForSignerParams(options: GetPermissionsForSignerParams): `0x${string}`;
/**
 * Decodes the result of the getPermissionsForSigner function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC4337
 * @example
 * ```ts
 * import { decodeGetPermissionsForSignerResult } from "thirdweb/extensions/erc4337";
 * const result = decodeGetPermissionsForSignerResult("...");
 * ```
 */
export declare function decodeGetPermissionsForSignerResult(result: Hex): {
    signer: string;
    approvedTargets: readonly string[];
    nativeTokenLimitPerTransaction: bigint;
    startTimestamp: bigint;
    endTimestamp: bigint;
};
/**
 * Calls the "getPermissionsForSigner" function on the contract.
 * @param options - The options for the getPermissionsForSigner function.
 * @returns The parsed result of the function call.
 * @extension ERC4337
 * @example
 * ```ts
 * import { getPermissionsForSigner } from "thirdweb/extensions/erc4337";
 *
 * const result = await getPermissionsForSigner({
 *  signer: ...,
 * });
 *
 * ```
 */
export declare function getPermissionsForSigner(options: BaseTransactionOptions<GetPermissionsForSignerParams>): Promise<{
    signer: string;
    approvedTargets: readonly string[];
    nativeTokenLimitPerTransaction: bigint;
    startTimestamp: bigint;
    endTimestamp: bigint;
}>;
//# sourceMappingURL=getPermissionsForSigner.d.ts.map