import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "isActiveSigner" function.
 */
export type IsActiveSignerParams = {
    signer: AbiParameterToPrimitiveType<{
        type: "address";
        name: "signer";
    }>;
};
/**
 * Encodes the parameters for the "isActiveSigner" function.
 * @param options - The options for the isActiveSigner function.
 * @returns The encoded ABI parameters.
 * @extension ERC4337
 * @example
 * ```ts
 * import { encodeIsActiveSignerParams } "thirdweb/extensions/erc4337";
 * const result = encodeIsActiveSignerParams({
 *  signer: ...,
 * });
 * ```
 */
export declare function encodeIsActiveSignerParams(options: IsActiveSignerParams): `0x${string}`;
/**
 * Decodes the result of the isActiveSigner function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC4337
 * @example
 * ```ts
 * import { decodeIsActiveSignerResult } from "thirdweb/extensions/erc4337";
 * const result = decodeIsActiveSignerResult("...");
 * ```
 */
export declare function decodeIsActiveSignerResult(result: Hex): boolean;
/**
 * Calls the "isActiveSigner" function on the contract.
 * @param options - The options for the isActiveSigner function.
 * @returns The parsed result of the function call.
 * @extension ERC4337
 * @example
 * ```ts
 * import { isActiveSigner } from "thirdweb/extensions/erc4337";
 *
 * const result = await isActiveSigner({
 *  signer: ...,
 * });
 *
 * ```
 */
export declare function isActiveSigner(options: BaseTransactionOptions<IsActiveSignerParams>): Promise<boolean>;
//# sourceMappingURL=isActiveSigner.d.ts.map