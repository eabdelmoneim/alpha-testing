import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "balanceOf" function.
 */
export type BalanceOfParams = {
    address: AbiParameterToPrimitiveType<{
        type: "address";
        name: "_address";
    }>;
};
/**
 * Encodes the parameters for the "balanceOf" function.
 * @param options - The options for the balanceOf function.
 * @returns The encoded ABI parameters.
 * @extension ERC20
 * @example
 * ```
 * import { encodeBalanceOfParams } "thirdweb/extensions/erc20";
 * const result = encodeBalanceOfParams({
 *  address: ...,
 * });
 * ```
 */
export declare function encodeBalanceOfParams(options: BalanceOfParams): `0x${string}`;
/**
 * Decodes the result of the balanceOf function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC20
 * @example
 * ```
 * import { decodeBalanceOfResult } from "thirdweb/extensions/erc20";
 * const result = decodeBalanceOfResult("...");
 * ```
 */
export declare function decodeBalanceOfResult(result: Hex): bigint;
/**
 * Calls the "balanceOf" function on the contract.
 * @param options - The options for the balanceOf function.
 * @returns The parsed result of the function call.
 * @extension ERC20
 * @example
 * ```
 * import { balanceOf } from "thirdweb/extensions/erc20";
 *
 * const result = await balanceOf({
 *  address: ...,
 * });
 *
 * ```
 */
export declare function balanceOf(options: BaseTransactionOptions<BalanceOfParams>): Promise<bigint>;
//# sourceMappingURL=balanceOf.d.ts.map