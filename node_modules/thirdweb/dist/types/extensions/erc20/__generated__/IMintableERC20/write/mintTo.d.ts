import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Prettify } from "../../../../../utils/type-utils.js";
/**
 * Represents the parameters for the "mintTo" function.
 */
type MintToParamsInternal = {
    to: AbiParameterToPrimitiveType<{
        type: "address";
        name: "to";
    }>;
    amount: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "amount";
    }>;
};
export type MintToParams = Prettify<MintToParamsInternal | {
    asyncParams: () => Promise<MintToParamsInternal>;
}>;
/**
 * Encodes the parameters for the "mintTo" function.
 * @param options - The options for the mintTo function.
 * @returns The encoded ABI parameters.
 * @extension ERC20
 * @example
 * ```
 * import { encodeMintToParams } "thirdweb/extensions/erc20";
 * const result = encodeMintToParams({
 *  to: ...,
 *  amount: ...,
 * });
 * ```
 */
export declare function encodeMintToParams(options: MintToParamsInternal): `0x${string}`;
/**
 * Calls the "mintTo" function on the contract.
 * @param options - The options for the "mintTo" function.
 * @returns A prepared transaction object.
 * @extension ERC20
 * @example
 * ```
 * import { mintTo } from "thirdweb/extensions/erc20";
 *
 * const transaction = mintTo({
 *  to: ...,
 *  amount: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function mintTo(options: BaseTransactionOptions<MintToParams>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
export {};
//# sourceMappingURL=mintTo.d.ts.map