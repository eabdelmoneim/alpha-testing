import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "getPastVotes" function.
 */
export type GetPastVotesParams = {
    account: AbiParameterToPrimitiveType<{
        type: "address";
        name: "account";
    }>;
    blockNumber: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "blockNumber";
    }>;
};
/**
 * Encodes the parameters for the "getPastVotes" function.
 * @param options - The options for the getPastVotes function.
 * @returns The encoded ABI parameters.
 * @extension ERC20
 * @example
 * ```
 * import { encodeGetPastVotesParams } "thirdweb/extensions/erc20";
 * const result = encodeGetPastVotesParams({
 *  account: ...,
 *  blockNumber: ...,
 * });
 * ```
 */
export declare function encodeGetPastVotesParams(options: GetPastVotesParams): `0x${string}`;
/**
 * Decodes the result of the getPastVotes function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC20
 * @example
 * ```
 * import { decodeGetPastVotesResult } from "thirdweb/extensions/erc20";
 * const result = decodeGetPastVotesResult("...");
 * ```
 */
export declare function decodeGetPastVotesResult(result: Hex): bigint;
/**
 * Calls the "getPastVotes" function on the contract.
 * @param options - The options for the getPastVotes function.
 * @returns The parsed result of the function call.
 * @extension ERC20
 * @example
 * ```
 * import { getPastVotes } from "thirdweb/extensions/erc20";
 *
 * const result = await getPastVotes({
 *  account: ...,
 *  blockNumber: ...,
 * });
 *
 * ```
 */
export declare function getPastVotes(options: BaseTransactionOptions<GetPastVotesParams>): Promise<bigint>;
//# sourceMappingURL=getPastVotes.d.ts.map