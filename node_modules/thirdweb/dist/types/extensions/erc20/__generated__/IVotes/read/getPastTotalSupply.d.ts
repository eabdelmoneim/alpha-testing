import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "getPastTotalSupply" function.
 */
export type GetPastTotalSupplyParams = {
    blockNumber: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "blockNumber";
    }>;
};
/**
 * Encodes the parameters for the "getPastTotalSupply" function.
 * @param options - The options for the getPastTotalSupply function.
 * @returns The encoded ABI parameters.
 * @extension ERC20
 * @example
 * ```
 * import { encodeGetPastTotalSupplyParams } "thirdweb/extensions/erc20";
 * const result = encodeGetPastTotalSupplyParams({
 *  blockNumber: ...,
 * });
 * ```
 */
export declare function encodeGetPastTotalSupplyParams(options: GetPastTotalSupplyParams): `0x${string}`;
/**
 * Decodes the result of the getPastTotalSupply function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC20
 * @example
 * ```
 * import { decodeGetPastTotalSupplyResult } from "thirdweb/extensions/erc20";
 * const result = decodeGetPastTotalSupplyResult("...");
 * ```
 */
export declare function decodeGetPastTotalSupplyResult(result: Hex): bigint;
/**
 * Calls the "getPastTotalSupply" function on the contract.
 * @param options - The options for the getPastTotalSupply function.
 * @returns The parsed result of the function call.
 * @extension ERC20
 * @example
 * ```
 * import { getPastTotalSupply } from "thirdweb/extensions/erc20";
 *
 * const result = await getPastTotalSupply({
 *  blockNumber: ...,
 * });
 *
 * ```
 */
export declare function getPastTotalSupply(options: BaseTransactionOptions<GetPastTotalSupplyParams>): Promise<bigint>;
//# sourceMappingURL=getPastTotalSupply.d.ts.map