import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Prettify } from "../../../../../utils/type-utils.js";
/**
 * Represents the parameters for the "delegate" function.
 */
type DelegateParamsInternal = {
    delegatee: AbiParameterToPrimitiveType<{
        type: "address";
        name: "delegatee";
    }>;
};
export type DelegateParams = Prettify<DelegateParamsInternal | {
    asyncParams: () => Promise<DelegateParamsInternal>;
}>;
/**
 * Encodes the parameters for the "delegate" function.
 * @param options - The options for the delegate function.
 * @returns The encoded ABI parameters.
 * @extension ERC20
 * @example
 * ```
 * import { encodeDelegateParams } "thirdweb/extensions/erc20";
 * const result = encodeDelegateParams({
 *  delegatee: ...,
 * });
 * ```
 */
export declare function encodeDelegateParams(options: DelegateParamsInternal): `0x${string}`;
/**
 * Calls the "delegate" function on the contract.
 * @param options - The options for the "delegate" function.
 * @returns A prepared transaction object.
 * @extension ERC20
 * @example
 * ```
 * import { delegate } from "thirdweb/extensions/erc20";
 *
 * const transaction = delegate({
 *  delegatee: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function delegate(options: BaseTransactionOptions<DelegateParams>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
export {};
//# sourceMappingURL=delegate.d.ts.map