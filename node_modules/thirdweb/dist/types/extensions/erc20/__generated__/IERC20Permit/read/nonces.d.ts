import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "nonces" function.
 */
export type NoncesParams = {
    owner: AbiParameterToPrimitiveType<{
        type: "address";
        name: "owner";
    }>;
};
/**
 * Encodes the parameters for the "nonces" function.
 * @param options - The options for the nonces function.
 * @returns The encoded ABI parameters.
 * @extension ERC20
 * @example
 * ```ts
 * import { encodeNoncesParams } "thirdweb/extensions/erc20";
 * const result = encodeNoncesParams({
 *  owner: ...,
 * });
 * ```
 */
export declare function encodeNoncesParams(options: NoncesParams): `0x${string}`;
/**
 * Decodes the result of the nonces function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC20
 * @example
 * ```ts
 * import { decodeNoncesResult } from "thirdweb/extensions/erc20";
 * const result = decodeNoncesResult("...");
 * ```
 */
export declare function decodeNoncesResult(result: Hex): bigint;
/**
 * Calls the "nonces" function on the contract.
 * @param options - The options for the nonces function.
 * @returns The parsed result of the function call.
 * @extension ERC20
 * @example
 * ```ts
 * import { nonces } from "thirdweb/extensions/erc20";
 *
 * const result = await nonces({
 *  owner: ...,
 * });
 *
 * ```
 */
export declare function nonces(options: BaseTransactionOptions<NoncesParams>): Promise<bigint>;
//# sourceMappingURL=nonces.d.ts.map