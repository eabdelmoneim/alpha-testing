import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "addr" function.
 */
export type AddrParams = {
    name: AbiParameterToPrimitiveType<{
        type: "bytes32";
        name: "name";
    }>;
};
/**
 * Encodes the parameters for the "addr" function.
 * @param options - The options for the addr function.
 * @returns The encoded ABI parameters.
 * @extension ENS
 * @example
 * ```
 * import { encodeAddrParams } "thirdweb/extensions/ens";
 * const result = encodeAddrParams({
 *  name: ...,
 * });
 * ```
 */
export declare function encodeAddrParams(options: AddrParams): `0x${string}`;
/**
 * Decodes the result of the addr function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ENS
 * @example
 * ```
 * import { decodeAddrResult } from "thirdweb/extensions/ens";
 * const result = decodeAddrResult("...");
 * ```
 */
export declare function decodeAddrResult(result: Hex): string;
/**
 * Calls the "addr" function on the contract.
 * @param options - The options for the addr function.
 * @returns The parsed result of the function call.
 * @extension ENS
 * @example
 * ```
 * import { addr } from "thirdweb/extensions/ens";
 *
 * const result = await addr({
 *  name: ...,
 * });
 *
 * ```
 */
export declare function addr(options: BaseTransactionOptions<AddrParams>): Promise<string>;
//# sourceMappingURL=addr.d.ts.map