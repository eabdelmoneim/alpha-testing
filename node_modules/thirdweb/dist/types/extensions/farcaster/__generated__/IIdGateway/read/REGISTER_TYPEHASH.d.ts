import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Decodes the result of the REGISTER_TYPEHASH function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { decodeREGISTER_TYPEHASHResult } from "thirdweb/extensions/farcaster";
 * const result = decodeREGISTER_TYPEHASHResult("...");
 * ```
 */
export declare function decodeREGISTER_TYPEHASHResult(result: Hex): `0x${string}`;
/**
 * Calls the "REGISTER_TYPEHASH" function on the contract.
 * @param options - The options for the REGISTER_TYPEHASH function.
 * @returns The parsed result of the function call.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { REGISTER_TYPEHASH } from "thirdweb/extensions/farcaster";
 *
 * const result = await REGISTER_TYPEHASH();
 *
 * ```
 */
export declare function REGISTER_TYPEHASH(options: BaseTransactionOptions): Promise<`0x${string}`>;
//# sourceMappingURL=REGISTER_TYPEHASH.d.ts.map