import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Prettify } from "../../../../../utils/type-utils.js";
/**
 * Represents the parameters for the "batchRent" function.
 */
type BatchRentParamsInternal = {
    fids: AbiParameterToPrimitiveType<{
        type: "uint256[]";
        name: "fids";
    }>;
    units: AbiParameterToPrimitiveType<{
        type: "uint256[]";
        name: "units";
    }>;
};
export type BatchRentParams = Prettify<BatchRentParamsInternal | {
    asyncParams: () => Promise<BatchRentParamsInternal>;
}>;
/**
 * Encodes the parameters for the "batchRent" function.
 * @param options - The options for the batchRent function.
 * @returns The encoded ABI parameters.
 * @extension FARCASTER
 * @example
 * ```
 * import { encodeBatchRentParams } "thirdweb/extensions/farcaster";
 * const result = encodeBatchRentParams({
 *  fids: ...,
 *  units: ...,
 * });
 * ```
 */
export declare function encodeBatchRentParams(options: BatchRentParamsInternal): `0x${string}`;
/**
 * Calls the "batchRent" function on the contract.
 * @param options - The options for the "batchRent" function.
 * @returns A prepared transaction object.
 * @extension FARCASTER
 * @example
 * ```
 * import { batchRent } from "thirdweb/extensions/farcaster";
 *
 * const transaction = batchRent({
 *  fids: ...,
 *  units: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function batchRent(options: BaseTransactionOptions<BatchRentParams>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
export {};
//# sourceMappingURL=batchRent.d.ts.map