import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Prettify } from "../../../../../utils/type-utils.js";
/**
 * Represents the parameters for the "add" function.
 */
type AddParamsInternal = {
    keyType: AbiParameterToPrimitiveType<{
        type: "uint32";
        name: "keyType";
    }>;
    key: AbiParameterToPrimitiveType<{
        type: "bytes";
        name: "key";
    }>;
    metadataType: AbiParameterToPrimitiveType<{
        type: "uint8";
        name: "metadataType";
    }>;
    metadata: AbiParameterToPrimitiveType<{
        type: "bytes";
        name: "metadata";
    }>;
};
export type AddParams = Prettify<AddParamsInternal | {
    asyncParams: () => Promise<AddParamsInternal>;
}>;
/**
 * Encodes the parameters for the "add" function.
 * @param options - The options for the add function.
 * @returns The encoded ABI parameters.
 * @extension FARCASTER
 * @example
 * ```
 * import { encodeAddParams } "thirdweb/extensions/farcaster";
 * const result = encodeAddParams({
 *  keyType: ...,
 *  key: ...,
 *  metadataType: ...,
 *  metadata: ...,
 * });
 * ```
 */
export declare function encodeAddParams(options: AddParamsInternal): `0x${string}`;
/**
 * Calls the "add" function on the contract.
 * @param options - The options for the "add" function.
 * @returns A prepared transaction object.
 * @extension FARCASTER
 * @example
 * ```
 * import { add } from "thirdweb/extensions/farcaster";
 *
 * const transaction = add({
 *  keyType: ...,
 *  key: ...,
 *  metadataType: ...,
 *  metadata: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function add(options: BaseTransactionOptions<AddParams>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
export {};
//# sourceMappingURL=add.d.ts.map