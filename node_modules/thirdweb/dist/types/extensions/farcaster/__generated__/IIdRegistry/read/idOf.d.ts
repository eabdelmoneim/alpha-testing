import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "idOf" function.
 */
export type IdOfParams = {
    owner: AbiParameterToPrimitiveType<{
        type: "address";
        name: "owner";
    }>;
};
/**
 * Encodes the parameters for the "idOf" function.
 * @param options - The options for the idOf function.
 * @returns The encoded ABI parameters.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { encodeIdOfParams } "thirdweb/extensions/farcaster";
 * const result = encodeIdOfParams({
 *  owner: ...,
 * });
 * ```
 */
export declare function encodeIdOfParams(options: IdOfParams): `0x${string}`;
/**
 * Decodes the result of the idOf function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { decodeIdOfResult } from "thirdweb/extensions/farcaster";
 * const result = decodeIdOfResult("...");
 * ```
 */
export declare function decodeIdOfResult(result: Hex): bigint;
/**
 * Calls the "idOf" function on the contract.
 * @param options - The options for the idOf function.
 * @returns The parsed result of the function call.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { idOf } from "thirdweb/extensions/farcaster";
 *
 * const result = await idOf({
 *  owner: ...,
 * });
 *
 * ```
 */
export declare function idOf(options: BaseTransactionOptions<IdOfParams>): Promise<bigint>;
//# sourceMappingURL=idOf.d.ts.map