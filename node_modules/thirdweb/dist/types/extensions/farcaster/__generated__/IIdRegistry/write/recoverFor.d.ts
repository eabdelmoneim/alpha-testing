import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Prettify } from "../../../../../utils/type-utils.js";
/**
 * Represents the parameters for the "recoverFor" function.
 */
type RecoverForParamsInternal = {
    from: AbiParameterToPrimitiveType<{
        type: "address";
        name: "from";
    }>;
    to: AbiParameterToPrimitiveType<{
        type: "address";
        name: "to";
    }>;
    recoveryDeadline: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "recoveryDeadline";
    }>;
    recoverySig: AbiParameterToPrimitiveType<{
        type: "bytes";
        name: "recoverySig";
    }>;
    toDeadline: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "toDeadline";
    }>;
    toSig: AbiParameterToPrimitiveType<{
        type: "bytes";
        name: "toSig";
    }>;
};
export type RecoverForParams = Prettify<RecoverForParamsInternal | {
    asyncParams: () => Promise<RecoverForParamsInternal>;
}>;
/**
 * Encodes the parameters for the "recoverFor" function.
 * @param options - The options for the recoverFor function.
 * @returns The encoded ABI parameters.
 * @extension FARCASTER
 * @example
 * ```
 * import { encodeRecoverForParams } "thirdweb/extensions/farcaster";
 * const result = encodeRecoverForParams({
 *  from: ...,
 *  to: ...,
 *  recoveryDeadline: ...,
 *  recoverySig: ...,
 *  toDeadline: ...,
 *  toSig: ...,
 * });
 * ```
 */
export declare function encodeRecoverForParams(options: RecoverForParamsInternal): `0x${string}`;
/**
 * Calls the "recoverFor" function on the contract.
 * @param options - The options for the "recoverFor" function.
 * @returns A prepared transaction object.
 * @extension FARCASTER
 * @example
 * ```
 * import { recoverFor } from "thirdweb/extensions/farcaster";
 *
 * const transaction = recoverFor({
 *  from: ...,
 *  to: ...,
 *  recoveryDeadline: ...,
 *  recoverySig: ...,
 *  toDeadline: ...,
 *  toSig: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function recoverFor(options: BaseTransactionOptions<RecoverForParams>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
export {};
//# sourceMappingURL=recoverFor.d.ts.map