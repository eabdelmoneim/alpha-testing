import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "recoveryOf" function.
 */
export type RecoveryOfParams = {
    fid: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "fid";
    }>;
};
/**
 * Encodes the parameters for the "recoveryOf" function.
 * @param options - The options for the recoveryOf function.
 * @returns The encoded ABI parameters.
 * @extension FARCASTER
 * @example
 * ```
 * import { encodeRecoveryOfParams } "thirdweb/extensions/farcaster";
 * const result = encodeRecoveryOfParams({
 *  fid: ...,
 * });
 * ```
 */
export declare function encodeRecoveryOfParams(options: RecoveryOfParams): `0x${string}`;
/**
 * Decodes the result of the recoveryOf function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension FARCASTER
 * @example
 * ```
 * import { decodeRecoveryOfResult } from "thirdweb/extensions/farcaster";
 * const result = decodeRecoveryOfResult("...");
 * ```
 */
export declare function decodeRecoveryOfResult(result: Hex): string;
/**
 * Calls the "recoveryOf" function on the contract.
 * @param options - The options for the recoveryOf function.
 * @returns The parsed result of the function call.
 * @extension FARCASTER
 * @example
 * ```
 * import { recoveryOf } from "thirdweb/extensions/farcaster";
 *
 * const result = await recoveryOf({
 *  fid: ...,
 * });
 *
 * ```
 */
export declare function recoveryOf(options: BaseTransactionOptions<RecoveryOfParams>): Promise<string>;
//# sourceMappingURL=recoveryOf.d.ts.map