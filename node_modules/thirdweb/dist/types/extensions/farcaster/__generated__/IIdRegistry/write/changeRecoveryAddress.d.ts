import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
/**
 * Represents the parameters for the "changeRecoveryAddress" function.
 */
export type ChangeRecoveryAddressParams = {
    recovery: AbiParameterToPrimitiveType<{
        type: "address";
        name: "recovery";
    }>;
};
/**
 * Encodes the parameters for the "changeRecoveryAddress" function.
 * @param options - The options for the changeRecoveryAddress function.
 * @returns The encoded ABI parameters.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { encodeChangeRecoveryAddressParams } "thirdweb/extensions/farcaster";
 * const result = encodeChangeRecoveryAddressParams({
 *  recovery: ...,
 * });
 * ```
 */
export declare function encodeChangeRecoveryAddressParams(options: ChangeRecoveryAddressParams): `0x${string}`;
/**
 * Calls the "changeRecoveryAddress" function on the contract.
 * @param options - The options for the "changeRecoveryAddress" function.
 * @returns A prepared transaction object.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { changeRecoveryAddress } from "thirdweb/extensions/farcaster";
 *
 * const transaction = changeRecoveryAddress({
 *  contract,
 *  recovery: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function changeRecoveryAddress(options: BaseTransactionOptions<ChangeRecoveryAddressParams | {
    asyncParams: () => Promise<ChangeRecoveryAddressParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
//# sourceMappingURL=changeRecoveryAddress.d.ts.map