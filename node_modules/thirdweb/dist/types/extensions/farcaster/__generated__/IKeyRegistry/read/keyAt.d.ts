import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "keyAt" function.
 */
export type KeyAtParams = {
    fid: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "fid";
    }>;
    state: AbiParameterToPrimitiveType<{
        type: "uint8";
        name: "state";
    }>;
    index: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "index";
    }>;
};
/**
 * Encodes the parameters for the "keyAt" function.
 * @param options - The options for the keyAt function.
 * @returns The encoded ABI parameters.
 * @extension FARCASTER
 * @example
 * ```
 * import { encodeKeyAtParams } "thirdweb/extensions/farcaster";
 * const result = encodeKeyAtParams({
 *  fid: ...,
 *  state: ...,
 *  index: ...,
 * });
 * ```
 */
export declare function encodeKeyAtParams(options: KeyAtParams): `0x${string}`;
/**
 * Decodes the result of the keyAt function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension FARCASTER
 * @example
 * ```
 * import { decodeKeyAtResult } from "thirdweb/extensions/farcaster";
 * const result = decodeKeyAtResult("...");
 * ```
 */
export declare function decodeKeyAtResult(result: Hex): `0x${string}`;
/**
 * Calls the "keyAt" function on the contract.
 * @param options - The options for the keyAt function.
 * @returns The parsed result of the function call.
 * @extension FARCASTER
 * @example
 * ```
 * import { keyAt } from "thirdweb/extensions/farcaster";
 *
 * const result = await keyAt({
 *  fid: ...,
 *  state: ...,
 *  index: ...,
 * });
 *
 * ```
 */
export declare function keyAt(options: BaseTransactionOptions<KeyAtParams>): Promise<`0x${string}`>;
//# sourceMappingURL=keyAt.d.ts.map