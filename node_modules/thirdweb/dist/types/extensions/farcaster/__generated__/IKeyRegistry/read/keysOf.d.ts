import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "keysOf" function.
 */
export type KeysOfParams = {
    fid: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "fid";
    }>;
    state: AbiParameterToPrimitiveType<{
        type: "uint8";
        name: "state";
    }>;
};
/**
 * Encodes the parameters for the "keysOf" function.
 * @param options - The options for the keysOf function.
 * @returns The encoded ABI parameters.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { encodeKeysOfParams } "thirdweb/extensions/farcaster";
 * const result = encodeKeysOfParams({
 *  fid: ...,
 *  state: ...,
 * });
 * ```
 */
export declare function encodeKeysOfParams(options: KeysOfParams): `0x${string}`;
/**
 * Decodes the result of the keysOf function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { decodeKeysOfResult } from "thirdweb/extensions/farcaster";
 * const result = decodeKeysOfResult("...");
 * ```
 */
export declare function decodeKeysOfResult(result: Hex): readonly `0x${string}`[];
/**
 * Calls the "keysOf" function on the contract.
 * @param options - The options for the keysOf function.
 * @returns The parsed result of the function call.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { keysOf } from "thirdweb/extensions/farcaster";
 *
 * const result = await keysOf({
 *  fid: ...,
 *  state: ...,
 * });
 *
 * ```
 */
export declare function keysOf(options: BaseTransactionOptions<KeysOfParams>): Promise<readonly `0x${string}`[]>;
//# sourceMappingURL=keysOf.d.ts.map