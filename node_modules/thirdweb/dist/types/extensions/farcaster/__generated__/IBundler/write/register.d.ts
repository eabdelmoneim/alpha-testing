import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Prettify } from "../../../../../utils/type-utils.js";
/**
 * Represents the parameters for the "register" function.
 */
type RegisterParamsInternal = {
    registerParams: AbiParameterToPrimitiveType<{
        type: "tuple";
        name: "registerParams";
        components: [
            {
                type: "address";
                name: "to";
            },
            {
                type: "address";
                name: "recovery";
            },
            {
                type: "uint256";
                name: "deadline";
            },
            {
                type: "bytes";
                name: "sig";
            }
        ];
    }>;
    signerParams: AbiParameterToPrimitiveType<{
        type: "tuple[]";
        name: "signerParams";
        components: [
            {
                type: "uint32";
                name: "keyType";
            },
            {
                type: "bytes";
                name: "key";
            },
            {
                type: "uint8";
                name: "metadataType";
            },
            {
                type: "bytes";
                name: "metadata";
            },
            {
                type: "uint256";
                name: "deadline";
            },
            {
                type: "bytes";
                name: "sig";
            }
        ];
    }>;
    extraStorage: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "extraStorage";
    }>;
};
export type RegisterParams = Prettify<RegisterParamsInternal | {
    asyncParams: () => Promise<RegisterParamsInternal>;
}>;
/**
 * Encodes the parameters for the "register" function.
 * @param options - The options for the register function.
 * @returns The encoded ABI parameters.
 * @extension FARCASTER
 * @example
 * ```
 * import { encodeRegisterParams } "thirdweb/extensions/farcaster";
 * const result = encodeRegisterParams({
 *  registerParams: ...,
 *  signerParams: ...,
 *  extraStorage: ...,
 * });
 * ```
 */
export declare function encodeRegisterParams(options: RegisterParamsInternal): `0x${string}`;
/**
 * Calls the "register" function on the contract.
 * @param options - The options for the "register" function.
 * @returns A prepared transaction object.
 * @extension FARCASTER
 * @example
 * ```
 * import { register } from "thirdweb/extensions/farcaster";
 *
 * const transaction = register({
 *  registerParams: ...,
 *  signerParams: ...,
 *  extraStorage: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function register(options: BaseTransactionOptions<RegisterParams>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
export {};
//# sourceMappingURL=register.d.ts.map