import { type Store } from "mipd";
import type { Ethereum } from "../interfaces/ethereum.js";
import type { WalletId } from "../wallet-types.js";
declare module "mipd" {
    interface Register {
        rdns: WalletId;
    }
}
/**
 * Get the details of Injected Provider with given a wallet ID (rdns) using [EIP-6963](https://eips.ethereum.org/EIPS/eip-6963) Provider Discovery.
 * @param walletId - The Wallet Id (rdns) to check.
 * @example
 * ```ts
 * import { isInjected } from "thirdweb/wallets";
 *
 * const metamaskProvider = injectedProvider("io.metamask");
 * const coinbaseProvider = injectedProvider("com.coinbase");
 * ```
 * @returns The details of the Injected Provider if it exists. `undefined` otherwise.
 * @walletUtils
 */
export declare function injectedProvider(walletId: WalletId): Ethereum | undefined;
/**
 * Get Injected Provider Details for given wallet ID (rdns)
 * @internal
 */
export declare function getMIPDStore(): Store;
//# sourceMappingURL=mipdStore.d.ts.map