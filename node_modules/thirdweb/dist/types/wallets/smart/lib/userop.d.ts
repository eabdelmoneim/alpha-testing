import type { SmartWalletOptions, UserOperation } from "../types.js";
import type { ThirdwebContract } from "../../../contract/contract.js";
import type { Account } from "../../interfaces/wallet.js";
import type { PreparedTransaction } from "../../../transaction/prepare-transaction.js";
import type { ThirdwebClient } from "../../../client/client.js";
/**
 * Create an unsigned user operation
 * @internal
 */
/**
 * Creates an unsigned user operation.
 * @internal
 */
export declare function createUnsignedUserOp(args: {
    factoryContract: ThirdwebContract;
    accountContract: ThirdwebContract;
    executeTx: PreparedTransaction;
    options: SmartWalletOptions & {
        personalAccount: Account;
        client: ThirdwebClient;
    };
}): Promise<UserOperation>;
/**
 * Sign the filled userOp.
 * @param userOp - The UserOperation to sign (with signature field ignored)
 * @internal
 */
export declare function signUserOp(args: {
    userOp: UserOperation;
    options: SmartWalletOptions & {
        personalAccount: Account;
    };
}): Promise<UserOperation>;
//# sourceMappingURL=userop.d.ts.map