import type { Chain } from "../../../chains/types.js";
import { type ThirdwebContract } from "../../../contract/contract.js";
import type { PreparedTransaction } from "../../../transaction/prepare-transaction.js";
import type { TransactionReceipt } from "../../../transaction/types.js";
import type { Hex } from "../../../utils/encoding/hex.js";
import type { Account } from "../../interfaces/wallet.js";
import type { BundlerOptions, SmartWalletOptions, UserOperation } from "../types.js";
/**
 * Wait for the user operation to be mined.
 * @param args - The options and user operation hash
 * @returns - The transaction receipt
 *
 * @example
 * ```ts
 * import { waitForUserOpReceipt } from "thirdweb/wallets/smart";
 *
 * const receipt = await waitForUserOpReceipt({
 *  chain,
 *  client,
 *  userOpHash,
 * });
 * ```
 * @walletUtils
 */
export declare function waitForUserOpReceipt(args: BundlerOptions & {
    userOpHash: Hex;
    timeoutMs?: number;
    intervalMs?: number;
}): Promise<TransactionReceipt>;
/**
 * Creates an unsigned user operation from a prepared transaction.
 * @param args - The prepared transaction and options
 * @returns - The unsigned user operation
 * @example
 * ```ts
 * import { createUnsignedUserOp } from "thirdweb/wallets/smart";
 *
 * const transaction = prepareContractCall(...);
 *
 * const userOp = await createUnsignedUserOp({
 *  transaction,
 *  factoryContract,
 *  accountContract,
 *  adminAddress,
 *  sponsorGas,
 *  overrides,
 * });
 * ```
 * @walletUtils
 */
export declare function createUnsignedUserOp(args: {
    transaction: PreparedTransaction;
    factoryContract: ThirdwebContract;
    accountContract: ThirdwebContract;
    adminAddress: string;
    sponsorGas: boolean;
    overrides?: SmartWalletOptions["overrides"];
}): Promise<UserOperation>;
/**
 * Sign a user operation.
 * @param userOp - The UserOperation to sign (with signature field ignored)
 * @returns - The user operation with the signature field populated
 * @example
 * ```ts
 * import { signUserOp } from "thirdweb/wallets/smart";
 *
 * const userOp = createUnsignedUserOp(...);
 *
 * const signedUserOp = await signUserOp({
 *  userOp,
 *  chain,
 *  adminAccount,
 * });
 * ```
 * @walletUtils
 */
export declare function signUserOp(args: {
    userOp: UserOperation;
    chain: Chain;
    entrypointAddress?: string;
    adminAccount: Account;
}): Promise<UserOperation>;
//# sourceMappingURL=userop.d.ts.map