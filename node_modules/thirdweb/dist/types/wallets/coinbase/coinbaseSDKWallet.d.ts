import type { Account } from "../interfaces/wallet.js";
import type { AppMetadata, DisconnectFn, SwitchChainFn } from "../types.js";
import { type CoinbaseWalletProvider } from "@coinbase/wallet-sdk";
import type { Chain } from "../../chains/types.js";
import type { WalletEmitter } from "../wallet-emitter.js";
import type { ThirdwebClient } from "../../client/client.js";
/**
 * Options for connecting to the CoinbaseSDK Wallet
 */
export type CoinbaseSDKWalletConnectionOptions = {
    /**
     * The Thirdweb client object
     */
    client: ThirdwebClient;
    /**
     * Whether to use Dark theme in the Coinbase Wallet "Onboarding Overlay" popup.
     *
     * This popup is opened when `headlessMode` is set to `true`.
     */
    darkMode?: boolean;
    /**
     * Whether to open Coinbase "Onboarding Overlay" popup or not when connecting to the wallet.
     * By default it is enabled if Coinbase Wallet extension is NOT installed and prompts the users to connect to the Coinbase Wallet mobile app by scanning a QR code
     *
     * If you want to render the QR code yourself, you should set this to `false` and use the `onUri` callback to get the QR code URI and render it in your app.
     * ```ts
     * const account = await wallet.connect({
     *  headlessMode: false,
     *  onUri: (uri) => {
     *    // render the QR code with `uri`
     *    // when user scans the QR code with Coinbase Wallet app, the promise will resolve with the connected account
     *  }
     * })
     * ```
     */
    headlessMode?: boolean;
    /**
     * Whether or not to reload dapp automatically after disconnect, defaults to `true`
     */
    reloadOnDisconnect?: boolean;
    /**
     * If you want the wallet to be connected to a specific blockchain, you can pass a `Chain` object to the `connect` method.
     * This will trigger a chain switch if the wallet provider is not already connected to the specified chain.
     *
     * You can create a `Chain` object using the [`defineChain`](https://portal.thirdweb.com/references/typescript/v5/defineChain) function.
     * At minimum, you need to pass the `id` of the blockchain.
     *
     * ```ts
     * import { defineChain } from "thirdweb";
     * const mumbai = defineChain({
     *  id: 80001,
     * });
     *
     * const address = await wallet.connect({ chain: mumbai })
     */
    chain?: Chain;
    /**
     * This is only relevant when the Coinbase Extension is not installed and you do not want to use the default Coinbase Wallet "Onboarding Overlay" popup.
     *
     * If you want to render the QR code yourself, you need to set `headlessMode` to `false` and use the `onUri` callback to get the QR code URI and render it in your app.
     * ```ts
     * const account = await wallet.connect({
     *  headlessMode: false,
     *  onUri: (uri) => {
     *    // render the QR code with `uri`
     *    // when user scans the QR code with Coinbase Wallet app, the promise will resolve with the connected account
     *  }
     * })
     * ```
     * Callback to be called with QR code URI
     * @param uri - The URI for rendering QR code
     */
    onUri?: (uri: string | undefined) => void;
    /**
     * Metadata of the dApp that will be passed to connected wallet.
     *
     * Some wallets may display this information to the user.
     *
     * Setting this property is highly recommended. If this is not set, Below default metadata will be used:
     *
     * ```ts
     * {
     *   name: "thirdweb powered dApp",
     *   url: "https://thirdweb.com",
     *   description: "thirdweb powered dApp",
     *   logoUrl: "https://thirdweb.com/favicon.ico",
     * };
     * ```
     */
    appMetadata?: AppMetadata;
};
declare function onConnect(address: string, chain: Chain, provider: CoinbaseWalletProvider, emitter: WalletEmitter<"com.coinbase.wallet">): [Account, Chain, DisconnectFn, SwitchChainFn];
/**
 * @internal
 */
export declare function connectCoinbaseWalletSDK(options: CoinbaseSDKWalletConnectionOptions, emitter: WalletEmitter<"com.coinbase.wallet">): Promise<ReturnType<typeof onConnect>>;
/**
 * @internal
 */
export declare function autoConnectCoinbaseWalletSDK(options: CoinbaseSDKWalletConnectionOptions, emitter: WalletEmitter<"com.coinbase.wallet">): Promise<ReturnType<typeof onConnect>>;
export {};
//# sourceMappingURL=coinbaseSDKWallet.d.ts.map