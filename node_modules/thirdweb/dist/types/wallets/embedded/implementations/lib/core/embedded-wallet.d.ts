import type { ClientIdWithQuerierType, GetUser, SetUpWalletRpcReturnType, WalletAddressObjectType } from "../../interfaces/embedded-wallets/embedded-wallets.js";
import { LocalStorage } from "../../utils/Storage/LocalStorage.js";
import type { EmbeddedWalletIframeCommunicator } from "../../utils/iFrameCommunication/EmbeddedWalletIframeCommunicator.js";
import type { Account } from "../../../../interfaces/wallet.js";
import type { Hex, TypedDataDefinition } from "viem";
import type * as ethers5 from "ethers5";
import type { ThirdwebClient } from "../../../../../client/client.js";
export type WalletManagementTypes = {
    createWallet: void;
    setUpNewDevice: void;
    getUserStatus: void;
};
export type WalletManagementUiTypes = {
    createWalletUi: void;
    setUpNewDeviceUi: void;
};
export type EmbeddedWalletInternalHelperType = {
    showUi: boolean;
};
export type SignerProcedureTypes = {
    getAddress: void;
    signMessage: {
        message: string | Hex;
        chainId: number;
        rpcEndpoint?: string;
    };
    signTransaction: {
        transaction: ethers5.ethers.providers.TransactionRequest;
        chainId: number;
        rpcEndpoint?: string;
    };
    signTypedDataV4: {
        domain: TypedDataDefinition["domain"];
        types: TypedDataDefinition["types"];
        message: TypedDataDefinition["message"];
        chainId: number;
        rpcEndpoint?: string;
    };
};
type PostWalletSetup = SetUpWalletRpcReturnType & {
    walletUserId: string;
};
/**
 *
 */
export declare class EmbeddedWallet {
    protected client: ThirdwebClient;
    protected walletManagerQuerier: EmbeddedWalletIframeCommunicator<WalletManagementTypes & WalletManagementUiTypes>;
    protected localStorage: LocalStorage;
    /**
     * Not meant to be initialized directly. Call {@link initializeUser} to get an instance
     * @internal
     */
    constructor({ client, querier }: ClientIdWithQuerierType);
    /**
     * Used to set-up the user device in the case that they are using incognito
     * @returns `{walletAddress : string }` The user's wallet details
     * @internal
     */
    postWalletSetUp({ deviceShareStored, walletAddress, isIframeStorageEnabled, walletUserId, }: PostWalletSetup): Promise<WalletAddressObjectType>;
    /**
     * Gets the various status states of the user
     * @example
     * ```typescript
     *  const userStatus = await Paper.getUserWalletStatus();
     *  switch (userStatus.status) {
     *  case UserWalletStatus.LOGGED_OUT: {
     *    // User is logged out, call one of the auth methods on Paper.auth to authenticate the user
     *    break;
     *  }
     *  case UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED: {
     *    // User is logged in, but does not have a wallet associated with it
     *    // you also have access to the user's details
     *    userStatus.user.authDetails;
     *    break;
     *  }
     *  case UserWalletStatus.LOGGED_IN_NEW_DEVICE: {
     *    // User is logged in and created a wallet already, but is missing the device shard
     *    // You have access to:
     *    userStatus.user.authDetails;
     *    userStatus.user.walletAddress;
     *    break;
     *  }
     *  case UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED: {
     *    // user is logged in and wallet is all set up.
     *    // You have access to:
     *    userStatus.user.authDetails;
     *    userStatus.user.walletAddress;
     *    userStatus.user.wallet;
     *    break;
     *  }
     *}
     *```
     * @returns `{GetUserWalletStatusFnReturnType}` an object to containing various information on the user statuses
     * @internal
     */
    getUserWalletStatus(): Promise<GetUser>;
    /**
     * Returns an account that communicates with the iFrame for signing operations
     * @internal
     */
    getAccount(): Promise<Account>;
}
export {};
//# sourceMappingURL=embedded-wallet.d.ts.map