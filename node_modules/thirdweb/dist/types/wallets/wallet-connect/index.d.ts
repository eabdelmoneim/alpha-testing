import type { EthereumProvider } from "@walletconnect/ethereum-provider";
import type { Chain } from "../../chains/types.js";
import type { WCSupportedWalletIds } from "../__generated__/wallet-ids.js";
import type { Account } from "../interfaces/wallet.js";
import type { DisconnectFn, SwitchChainFn } from "../types.js";
import type { WalletEmitter } from "../wallet-emitter.js";
import type { WCAutoConnectOptions, WCConnectOptions } from "./types.js";
type WCProvider = InstanceType<typeof EthereumProvider>;
/**
 * @internal
 */
export declare function connectWC(options: WCConnectOptions, emitter: WalletEmitter<WCSupportedWalletIds>, walletId: WCSupportedWalletIds | "walletConnect"): Promise<ReturnType<typeof onConnect>>;
/**
 * Auto connect to already connected wallet connect session.
 * @internal
 */
export declare function autoConnectWC(options: WCAutoConnectOptions, emitter: WalletEmitter<WCSupportedWalletIds>, walletId: WCSupportedWalletIds | "walletConnect"): Promise<ReturnType<typeof onConnect>>;
declare function onConnect(address: string, chain: Chain, provider: WCProvider, emitter: WalletEmitter<WCSupportedWalletIds>): [Account, Chain, DisconnectFn, SwitchChainFn];
export {};
//# sourceMappingURL=index.d.ts.map