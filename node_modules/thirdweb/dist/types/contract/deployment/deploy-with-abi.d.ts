import type { AbiConstructor, AbiParameter, AbiParametersToPrimitiveTypes } from "abitype";
import type { Prettify } from "../../utils/type-utils.js";
import { type Hex } from "../../utils/encoding/hex.js";
import type { ClientAndChain } from "../../utils/types.js";
export type PrepareDirectDeployTransactionOptions<TConstructor extends AbiConstructor, TParams = AbiParametersToPrimitiveTypes<TConstructor["inputs"]>> = Prettify<ClientAndChain & {
    constructorAbi: TConstructor;
    bytecode: Hex;
    constructorParams: TParams extends readonly AbiParameter[] ? TParams : readonly unknown[];
}>;
/**
 * Prepares a direct deploy transaction with ABI.
 * @template TConstructor - The type of the ABI constructor.
 * @param options - The options for preparing the transaction.
 * @returns - The prepared transaction.
 * @example
 * ```ts
 * import { prepareDirectDeployTransaction } from "thirdweb/contract";
 * import { ethereum } from "thirdweb/chains";
 * const tx = prepareDirectDeployTransaction({
 *  client,
 *  chain: ethereum,
 *  bytecode: "0x...",
 *  constructorAbi: {
 *    inputs: [{ type: "uint256", name: "value" }],
 *    type: "constructor",
 *  },
 *  constructorParams: [123],
 * });
 * ```
 * @extension DEPLOY
 */
export declare function prepareDirectDeployTransaction<const TConstructor extends AbiConstructor>(options: PrepareDirectDeployTransactionOptions<TConstructor>): import("../../transaction/prepare-transaction.js").PreparedTransaction<[], import("abitype").AbiFunction>;
//# sourceMappingURL=deploy-with-abi.d.ts.map