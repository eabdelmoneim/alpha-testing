"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveAddress = void 0;
const ethereum_js_1 = require("../../chains/chain-definitions/ethereum.js");
const contract_js_1 = require("../../contract/contract.js");
const resolve_js_1 = require("./__generated__/UniversalResolver/read/resolve.js");
const encode_js_1 = require("../../transaction/actions/encode.js");
const prepare_contract_call_js_1 = require("../../transaction/prepare-contract-call.js");
const hex_js_1 = require("../../utils/encoding/hex.js");
const namehash_js_1 = require("../../utils/ens/namehash.js");
const packetToBytes_js_1 = require("../../utils/ens/packetToBytes.js");
const address_js_1 = require("../../utils/address.js");
const lru_js_1 = require("../../utils/caching/lru.js");
const ENS_ADDRESS_CACHE = new lru_js_1.LruMap(128);
const UNIVERSAL_RESOLVER_ADDRESS = "0xce01f8eee7E479C928F8919abD53E553a36CeF67";
/**
 * Resolves an ENS address to an Ethereum address.
 * @param options - The options for resolving an ENS address.
 * @example
 * ```ts
 * import { resolveAddress } from "thirdweb/ens";
 * const address = await resolveAddress({
 *    client,
 *    name: "vitalik.eth",
 * });
 * ```
 * @extension ENS
 * @returns A promise that resolves to the Ethereum address.
 */
async function resolveAddress(options) {
    const { client, name, resolverAddress, resolverChain } = options;
    if ((0, address_js_1.isAddress)(name)) {
        return (0, address_js_1.getAddress)(name);
    }
    if (ENS_ADDRESS_CACHE.has(name)) {
        return ENS_ADDRESS_CACHE.get(name);
    }
    const contract = (0, contract_js_1.getContract)({
        client,
        chain: resolverChain || ethereum_js_1.ethereum,
        address: resolverAddress || UNIVERSAL_RESOLVER_ADDRESS,
    });
    const data = await encodeAddrCall({ contract, name });
    const result = await (0, resolve_js_1.resolve)({
        contract,
        name: (0, hex_js_1.toHex)((0, packetToBytes_js_1.packetToBytes)(name)),
        data,
    });
    const resolvedAddress = (0, address_js_1.getAddress)(`0x${result[0].slice(-40)}`);
    ENS_ADDRESS_CACHE.set(name, resolvedAddress);
    return resolvedAddress;
}
exports.resolveAddress = resolveAddress;
async function encodeAddrCall(options) {
    const { contract, name } = options;
    const call = (0, prepare_contract_call_js_1.prepareContractCall)({
        contract,
        method: [
            "0x3b3b57de",
            [
                {
                    name: "name",
                    type: "bytes32",
                },
            ],
            [
                {
                    name: "",
                    type: "address",
                },
            ],
        ],
        params: [(0, namehash_js_1.namehash)(name)],
    });
    return (0, encode_js_1.encode)(call);
}
//# sourceMappingURL=resolve-address.js.map