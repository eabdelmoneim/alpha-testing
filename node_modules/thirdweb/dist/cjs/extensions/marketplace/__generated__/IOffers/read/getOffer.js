"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOffer = exports.decodeGetOfferResult = exports.encodeGetOfferParams = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const FN_SELECTOR = "0x4579268a";
const FN_INPUTS = [
    {
        type: "uint256",
        name: "_offerId",
    },
];
const FN_OUTPUTS = [
    {
        type: "tuple",
        name: "offer",
        components: [
            {
                type: "uint256",
                name: "offerId",
            },
            {
                type: "uint256",
                name: "tokenId",
            },
            {
                type: "uint256",
                name: "quantity",
            },
            {
                type: "uint256",
                name: "totalPrice",
            },
            {
                type: "uint256",
                name: "expirationTimestamp",
            },
            {
                type: "address",
                name: "offeror",
            },
            {
                type: "address",
                name: "assetContract",
            },
            {
                type: "address",
                name: "currency",
            },
            {
                type: "uint8",
                name: "tokenType",
            },
            {
                type: "uint8",
                name: "status",
            },
        ],
    },
];
/**
 * Encodes the parameters for the "getOffer" function.
 * @param options - The options for the getOffer function.
 * @returns The encoded ABI parameters.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { encodeGetOfferParams } "thirdweb/extensions/marketplace";
 * const result = encodeGetOfferParams({
 *  offerId: ...,
 * });
 * ```
 */
function encodeGetOfferParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.offerId]);
}
exports.encodeGetOfferParams = encodeGetOfferParams;
/**
 * Decodes the result of the getOffer function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { decodeGetOfferResult } from "thirdweb/extensions/marketplace";
 * const result = decodeGetOfferResult("...");
 * ```
 */
function decodeGetOfferResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeGetOfferResult = decodeGetOfferResult;
/**
 * Calls the "getOffer" function on the contract.
 * @param options - The options for the getOffer function.
 * @returns The parsed result of the function call.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { getOffer } from "thirdweb/extensions/marketplace";
 *
 * const result = await getOffer({
 *  offerId: ...,
 * });
 *
 * ```
 */
async function getOffer(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.offerId],
    });
}
exports.getOffer = getOffer;
//# sourceMappingURL=getOffer.js.map