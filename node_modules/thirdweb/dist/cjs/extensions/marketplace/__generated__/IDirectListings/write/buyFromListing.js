"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buyFromListing = exports.encodeBuyFromListingParams = void 0;
const prepare_contract_call_js_1 = require("../../../../../transaction/prepare-contract-call.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const FN_SELECTOR = "0x704232dc";
const FN_INPUTS = [
    {
        type: "uint256",
        name: "_listingId",
    },
    {
        type: "address",
        name: "_buyFor",
    },
    {
        type: "uint256",
        name: "_quantity",
    },
    {
        type: "address",
        name: "_currency",
    },
    {
        type: "uint256",
        name: "_expectedTotalPrice",
    },
];
const FN_OUTPUTS = [];
/**
 * Encodes the parameters for the "buyFromListing" function.
 * @param options - The options for the buyFromListing function.
 * @returns The encoded ABI parameters.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { encodeBuyFromListingParams } "thirdweb/extensions/marketplace";
 * const result = encodeBuyFromListingParams({
 *  listingId: ...,
 *  buyFor: ...,
 *  quantity: ...,
 *  currency: ...,
 *  expectedTotalPrice: ...,
 * });
 * ```
 */
function encodeBuyFromListingParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [
        options.listingId,
        options.buyFor,
        options.quantity,
        options.currency,
        options.expectedTotalPrice,
    ]);
}
exports.encodeBuyFromListingParams = encodeBuyFromListingParams;
/**
 * Calls the "buyFromListing" function on the contract.
 * @param options - The options for the "buyFromListing" function.
 * @returns A prepared transaction object.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { buyFromListing } from "thirdweb/extensions/marketplace";
 *
 * const transaction = buyFromListing({
 *  contract,
 *  listingId: ...,
 *  buyFor: ...,
 *  quantity: ...,
 *  currency: ...,
 *  expectedTotalPrice: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
function buyFromListing(options) {
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.listingId,
                    resolvedParams.buyFor,
                    resolvedParams.quantity,
                    resolvedParams.currency,
                    resolvedParams.expectedTotalPrice,
                ];
            }
            : [
                options.listingId,
                options.buyFor,
                options.quantity,
                options.currency,
                options.expectedTotalPrice,
            ],
    });
}
exports.buyFromListing = buyFromListing;
//# sourceMappingURL=buyFromListing.js.map