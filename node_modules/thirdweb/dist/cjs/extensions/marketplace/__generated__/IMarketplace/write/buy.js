"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buy = exports.encodeBuyParams = void 0;
const prepare_contract_call_js_1 = require("../../../../../transaction/prepare-contract-call.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const FN_SELECTOR = "0x7687ab02";
const FN_INPUTS = [
    {
        type: "uint256",
        name: "_listingId",
    },
    {
        type: "address",
        name: "_buyFor",
    },
    {
        type: "uint256",
        name: "_quantity",
    },
    {
        type: "address",
        name: "_currency",
    },
    {
        type: "uint256",
        name: "_totalPrice",
    },
];
const FN_OUTPUTS = [];
/**
 * Encodes the parameters for the "buy" function.
 * @param options - The options for the buy function.
 * @returns The encoded ABI parameters.
 * @extension MARKETPLACE
 * @example
 * ```
 * import { encodeBuyParams } "thirdweb/extensions/marketplace";
 * const result = encodeBuyParams({
 *  listingId: ...,
 *  buyFor: ...,
 *  quantity: ...,
 *  currency: ...,
 *  totalPrice: ...,
 * });
 * ```
 */
function encodeBuyParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [
        options.listingId,
        options.buyFor,
        options.quantity,
        options.currency,
        options.totalPrice,
    ]);
}
exports.encodeBuyParams = encodeBuyParams;
/**
 * Calls the "buy" function on the contract.
 * @param options - The options for the "buy" function.
 * @returns A prepared transaction object.
 * @extension MARKETPLACE
 * @example
 * ```
 * import { buy } from "thirdweb/extensions/marketplace";
 *
 * const transaction = buy({
 *  listingId: ...,
 *  buyFor: ...,
 *  quantity: ...,
 *  currency: ...,
 *  totalPrice: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
function buy(options) {
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.listingId,
                    resolvedParams.buyFor,
                    resolvedParams.quantity,
                    resolvedParams.currency,
                    resolvedParams.totalPrice,
                ];
            }
            : [
                options.listingId,
                options.buyFor,
                options.quantity,
                options.currency,
                options.totalPrice,
            ],
    });
}
exports.buy = buy;
//# sourceMappingURL=buy.js.map