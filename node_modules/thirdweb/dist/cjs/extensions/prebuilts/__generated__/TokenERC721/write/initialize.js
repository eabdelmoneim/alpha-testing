"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initialize = exports.encodeInitializeParams = void 0;
const prepare_contract_call_js_1 = require("../../../../../transaction/prepare-contract-call.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const FN_SELECTOR = "0xe1591634";
const FN_INPUTS = [
    {
        type: "address",
        name: "_defaultAdmin",
    },
    {
        type: "string",
        name: "_name",
    },
    {
        type: "string",
        name: "_symbol",
    },
    {
        type: "string",
        name: "_contractURI",
    },
    {
        type: "address[]",
        name: "_trustedForwarders",
    },
    {
        type: "address",
        name: "_saleRecipient",
    },
    {
        type: "address",
        name: "_royaltyRecipient",
    },
    {
        type: "uint128",
        name: "_royaltyBps",
    },
    {
        type: "uint128",
        name: "_platformFeeBps",
    },
    {
        type: "address",
        name: "_platformFeeRecipient",
    },
];
const FN_OUTPUTS = [];
/**
 * Encodes the parameters for the "initialize" function.
 * @param options - The options for the initialize function.
 * @returns The encoded ABI parameters.
 * @extension PREBUILTS
 * @example
 * ```
 * import { encodeInitializeParams } "thirdweb/extensions/prebuilts";
 * const result = encodeInitializeParams({
 *  defaultAdmin: ...,
 *  name: ...,
 *  symbol: ...,
 *  contractURI: ...,
 *  trustedForwarders: ...,
 *  saleRecipient: ...,
 *  royaltyRecipient: ...,
 *  royaltyBps: ...,
 *  platformFeeBps: ...,
 *  platformFeeRecipient: ...,
 * });
 * ```
 */
function encodeInitializeParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [
        options.defaultAdmin,
        options.name,
        options.symbol,
        options.contractURI,
        options.trustedForwarders,
        options.saleRecipient,
        options.royaltyRecipient,
        options.royaltyBps,
        options.platformFeeBps,
        options.platformFeeRecipient,
    ]);
}
exports.encodeInitializeParams = encodeInitializeParams;
/**
 * Calls the "initialize" function on the contract.
 * @param options - The options for the "initialize" function.
 * @returns A prepared transaction object.
 * @extension PREBUILTS
 * @example
 * ```
 * import { initialize } from "thirdweb/extensions/prebuilts";
 *
 * const transaction = initialize({
 *  defaultAdmin: ...,
 *  name: ...,
 *  symbol: ...,
 *  contractURI: ...,
 *  trustedForwarders: ...,
 *  saleRecipient: ...,
 *  royaltyRecipient: ...,
 *  royaltyBps: ...,
 *  platformFeeBps: ...,
 *  platformFeeRecipient: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
function initialize(options) {
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.defaultAdmin,
                    resolvedParams.name,
                    resolvedParams.symbol,
                    resolvedParams.contractURI,
                    resolvedParams.trustedForwarders,
                    resolvedParams.saleRecipient,
                    resolvedParams.royaltyRecipient,
                    resolvedParams.royaltyBps,
                    resolvedParams.platformFeeBps,
                    resolvedParams.platformFeeRecipient,
                ];
            }
            : [
                options.defaultAdmin,
                options.name,
                options.symbol,
                options.contractURI,
                options.trustedForwarders,
                options.saleRecipient,
                options.royaltyRecipient,
                options.royaltyBps,
                options.platformFeeBps,
                options.platformFeeRecipient,
            ],
    });
}
exports.initialize = initialize;
//# sourceMappingURL=initialize.js.map