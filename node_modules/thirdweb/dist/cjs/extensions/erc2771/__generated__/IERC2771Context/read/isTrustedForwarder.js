"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isTrustedForwarder = exports.decodeIsTrustedForwarderResult = exports.encodeIsTrustedForwarderParams = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const FN_SELECTOR = "0x572b6c05";
const FN_INPUTS = [
    {
        type: "address",
        name: "forwarder",
    },
];
const FN_OUTPUTS = [
    {
        type: "bool",
    },
];
/**
 * Encodes the parameters for the "isTrustedForwarder" function.
 * @param options - The options for the isTrustedForwarder function.
 * @returns The encoded ABI parameters.
 * @extension ERC2771
 * @example
 * ```ts
 * import { encodeIsTrustedForwarderParams } "thirdweb/extensions/erc2771";
 * const result = encodeIsTrustedForwarderParams({
 *  forwarder: ...,
 * });
 * ```
 */
function encodeIsTrustedForwarderParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.forwarder]);
}
exports.encodeIsTrustedForwarderParams = encodeIsTrustedForwarderParams;
/**
 * Decodes the result of the isTrustedForwarder function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC2771
 * @example
 * ```ts
 * import { decodeIsTrustedForwarderResult } from "thirdweb/extensions/erc2771";
 * const result = decodeIsTrustedForwarderResult("...");
 * ```
 */
function decodeIsTrustedForwarderResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeIsTrustedForwarderResult = decodeIsTrustedForwarderResult;
/**
 * Calls the "isTrustedForwarder" function on the contract.
 * @param options - The options for the isTrustedForwarder function.
 * @returns The parsed result of the function call.
 * @extension ERC2771
 * @example
 * ```ts
 * import { isTrustedForwarder } from "thirdweb/extensions/erc2771";
 *
 * const result = await isTrustedForwarder({
 *  forwarder: ...,
 * });
 *
 * ```
 */
async function isTrustedForwarder(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.forwarder],
    });
}
exports.isTrustedForwarder = isTrustedForwarder;
//# sourceMappingURL=isTrustedForwarder.js.map