"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRoyalty = exports.encodeGetRoyaltyParams = void 0;
const prepare_contract_call_js_1 = require("../../../../../transaction/prepare-contract-call.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const FN_SELECTOR = "0xf533b802";
const FN_INPUTS = [
    {
        type: "address",
        name: "tokenAddress",
    },
    {
        type: "uint256",
        name: "tokenId",
    },
    {
        type: "uint256",
        name: "value",
    },
];
const FN_OUTPUTS = [
    {
        type: "address[]",
        name: "recipients",
    },
    {
        type: "uint256[]",
        name: "amounts",
    },
];
/**
 * Encodes the parameters for the "getRoyalty" function.
 * @param options - The options for the getRoyalty function.
 * @returns The encoded ABI parameters.
 * @extension COMMON
 * @example
 * ```
 * import { encodeGetRoyaltyParams } "thirdweb/extensions/common";
 * const result = encodeGetRoyaltyParams({
 *  tokenAddress: ...,
 *  tokenId: ...,
 *  value: ...,
 * });
 * ```
 */
function encodeGetRoyaltyParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [
        options.tokenAddress,
        options.tokenId,
        options.value,
    ]);
}
exports.encodeGetRoyaltyParams = encodeGetRoyaltyParams;
/**
 * Calls the "getRoyalty" function on the contract.
 * @param options - The options for the "getRoyalty" function.
 * @returns A prepared transaction object.
 * @extension COMMON
 * @example
 * ```
 * import { getRoyalty } from "thirdweb/extensions/common";
 *
 * const transaction = getRoyalty({
 *  tokenAddress: ...,
 *  tokenId: ...,
 *  value: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
function getRoyalty(options) {
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.tokenAddress,
                    resolvedParams.tokenId,
                    resolvedParams.value,
                ];
            }
            : [options.tokenAddress, options.tokenId, options.value],
    });
}
exports.getRoyalty = getRoyalty;
//# sourceMappingURL=getRoyalty.js.map