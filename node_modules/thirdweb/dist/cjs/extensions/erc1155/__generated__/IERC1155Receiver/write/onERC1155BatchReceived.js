"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.onERC1155BatchReceived = exports.encodeOnERC1155BatchReceivedParams = void 0;
const prepare_contract_call_js_1 = require("../../../../../transaction/prepare-contract-call.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const FN_SELECTOR = "0xbc197c81";
const FN_INPUTS = [
    {
        type: "address",
        name: "operator",
    },
    {
        type: "address",
        name: "from",
    },
    {
        type: "uint256[]",
        name: "ids",
    },
    {
        type: "uint256[]",
        name: "values",
    },
    {
        type: "bytes",
        name: "data",
    },
];
const FN_OUTPUTS = [
    {
        type: "bytes4",
    },
];
/**
 * Encodes the parameters for the "onERC1155BatchReceived" function.
 * @param options - The options for the onERC1155BatchReceived function.
 * @returns The encoded ABI parameters.
 * @extension ERC1155
 * @example
 * ```
 * import { encodeOnERC1155BatchReceivedParams } "thirdweb/extensions/erc1155";
 * const result = encodeOnERC1155BatchReceivedParams({
 *  operator: ...,
 *  from: ...,
 *  ids: ...,
 *  values: ...,
 *  data: ...,
 * });
 * ```
 */
function encodeOnERC1155BatchReceivedParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [
        options.operator,
        options.from,
        options.ids,
        options.values,
        options.data,
    ]);
}
exports.encodeOnERC1155BatchReceivedParams = encodeOnERC1155BatchReceivedParams;
/**
 * Calls the "onERC1155BatchReceived" function on the contract.
 * @param options - The options for the "onERC1155BatchReceived" function.
 * @returns A prepared transaction object.
 * @extension ERC1155
 * @example
 * ```
 * import { onERC1155BatchReceived } from "thirdweb/extensions/erc1155";
 *
 * const transaction = onERC1155BatchReceived({
 *  operator: ...,
 *  from: ...,
 *  ids: ...,
 *  values: ...,
 *  data: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
function onERC1155BatchReceived(options) {
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.operator,
                    resolvedParams.from,
                    resolvedParams.ids,
                    resolvedParams.values,
                    resolvedParams.data,
                ];
            }
            : [
                options.operator,
                options.from,
                options.ids,
                options.values,
                options.data,
            ],
    });
}
exports.onERC1155BatchReceived = onERC1155BatchReceived;
//# sourceMappingURL=onERC1155BatchReceived.js.map