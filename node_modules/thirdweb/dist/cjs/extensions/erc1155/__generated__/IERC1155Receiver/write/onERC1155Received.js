"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.onERC1155Received = exports.encodeOnERC1155ReceivedParams = void 0;
const prepare_contract_call_js_1 = require("../../../../../transaction/prepare-contract-call.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const FN_SELECTOR = "0xf23a6e61";
const FN_INPUTS = [
    {
        type: "address",
        name: "operator",
    },
    {
        type: "address",
        name: "from",
    },
    {
        type: "uint256",
        name: "id",
    },
    {
        type: "uint256",
        name: "value",
    },
    {
        type: "bytes",
        name: "data",
    },
];
const FN_OUTPUTS = [
    {
        type: "bytes4",
    },
];
/**
 * Encodes the parameters for the "onERC1155Received" function.
 * @param options - The options for the onERC1155Received function.
 * @returns The encoded ABI parameters.
 * @extension ERC1155
 * @example
 * ```ts
 * import { encodeOnERC1155ReceivedParams } "thirdweb/extensions/erc1155";
 * const result = encodeOnERC1155ReceivedParams({
 *  operator: ...,
 *  from: ...,
 *  id: ...,
 *  value: ...,
 *  data: ...,
 * });
 * ```
 */
function encodeOnERC1155ReceivedParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [
        options.operator,
        options.from,
        options.id,
        options.value,
        options.data,
    ]);
}
exports.encodeOnERC1155ReceivedParams = encodeOnERC1155ReceivedParams;
/**
 * Calls the "onERC1155Received" function on the contract.
 * @param options - The options for the "onERC1155Received" function.
 * @returns A prepared transaction object.
 * @extension ERC1155
 * @example
 * ```ts
 * import { onERC1155Received } from "thirdweb/extensions/erc1155";
 *
 * const transaction = onERC1155Received({
 *  contract,
 *  operator: ...,
 *  from: ...,
 *  id: ...,
 *  value: ...,
 *  data: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
function onERC1155Received(options) {
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.operator,
                    resolvedParams.from,
                    resolvedParams.id,
                    resolvedParams.value,
                    resolvedParams.data,
                ];
            }
            : [
                options.operator,
                options.from,
                options.id,
                options.value,
                options.data,
            ],
    });
}
exports.onERC1155Received = onERC1155Received;
//# sourceMappingURL=onERC1155Received.js.map