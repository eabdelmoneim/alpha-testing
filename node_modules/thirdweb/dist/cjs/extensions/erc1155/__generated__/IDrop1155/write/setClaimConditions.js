"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setClaimConditions = exports.encodeSetClaimConditionsParams = void 0;
const prepare_contract_call_js_1 = require("../../../../../transaction/prepare-contract-call.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const FN_SELECTOR = "0x183718d1";
const FN_INPUTS = [
    {
        type: "uint256",
        name: "tokenId",
    },
    {
        type: "tuple[]",
        name: "phases",
        components: [
            {
                type: "uint256",
                name: "startTimestamp",
            },
            {
                type: "uint256",
                name: "maxClaimableSupply",
            },
            {
                type: "uint256",
                name: "supplyClaimed",
            },
            {
                type: "uint256",
                name: "quantityLimitPerWallet",
            },
            {
                type: "bytes32",
                name: "merkleRoot",
            },
            {
                type: "uint256",
                name: "pricePerToken",
            },
            {
                type: "address",
                name: "currency",
            },
            {
                type: "string",
                name: "metadata",
            },
        ],
    },
    {
        type: "bool",
        name: "resetClaimEligibility",
    },
];
const FN_OUTPUTS = [];
/**
 * Encodes the parameters for the "setClaimConditions" function.
 * @param options - The options for the setClaimConditions function.
 * @returns The encoded ABI parameters.
 * @extension ERC1155
 * @example
 * ```
 * import { encodeSetClaimConditionsParams } "thirdweb/extensions/erc1155";
 * const result = encodeSetClaimConditionsParams({
 *  tokenId: ...,
 *  phases: ...,
 *  resetClaimEligibility: ...,
 * });
 * ```
 */
function encodeSetClaimConditionsParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [
        options.tokenId,
        options.phases,
        options.resetClaimEligibility,
    ]);
}
exports.encodeSetClaimConditionsParams = encodeSetClaimConditionsParams;
/**
 * Calls the "setClaimConditions" function on the contract.
 * @param options - The options for the "setClaimConditions" function.
 * @returns A prepared transaction object.
 * @extension ERC1155
 * @example
 * ```
 * import { setClaimConditions } from "thirdweb/extensions/erc1155";
 *
 * const transaction = setClaimConditions({
 *  tokenId: ...,
 *  phases: ...,
 *  resetClaimEligibility: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
function setClaimConditions(options) {
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.tokenId,
                    resolvedParams.phases,
                    resolvedParams.resetClaimEligibility,
                ];
            }
            : [options.tokenId, options.phases, options.resetClaimEligibility],
    });
}
exports.setClaimConditions = setClaimConditions;
//# sourceMappingURL=setClaimConditions.js.map