"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyClaim = exports.encodeVerifyClaimParams = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const FN_SELECTOR = "0x4bbb1abf";
const FN_INPUTS = [
    {
        type: "address",
        name: "_claimer",
    },
    {
        type: "uint256",
        name: "_tokenId",
    },
    {
        type: "uint256",
        name: "_quantity",
    },
];
const FN_OUTPUTS = [];
/**
 * Encodes the parameters for the "verifyClaim" function.
 * @param options - The options for the verifyClaim function.
 * @returns The encoded ABI parameters.
 * @extension ERC1155
 * @example
 * ```
 * import { encodeVerifyClaimParams } "thirdweb/extensions/erc1155";
 * const result = encodeVerifyClaimParams({
 *  claimer: ...,
 *  tokenId: ...,
 *  quantity: ...,
 * });
 * ```
 */
function encodeVerifyClaimParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [
        options.claimer,
        options.tokenId,
        options.quantity,
    ]);
}
exports.encodeVerifyClaimParams = encodeVerifyClaimParams;
/**
 * Calls the "verifyClaim" function on the contract.
 * @param options - The options for the verifyClaim function.
 * @returns The parsed result of the function call.
 * @extension ERC1155
 * @example
 * ```
 * import { verifyClaim } from "thirdweb/extensions/erc1155";
 *
 * const result = await verifyClaim({
 *  claimer: ...,
 *  tokenId: ...,
 *  quantity: ...,
 * });
 *
 * ```
 */
async function verifyClaim(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.claimer, options.tokenId, options.quantity],
    });
}
exports.verifyClaim = verifyClaim;
//# sourceMappingURL=verifyClaim.js.map