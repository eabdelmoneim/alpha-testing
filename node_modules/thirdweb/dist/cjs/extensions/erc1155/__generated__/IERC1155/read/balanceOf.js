"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.balanceOf = exports.decodeBalanceOfResult = exports.encodeBalanceOfParams = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const FN_SELECTOR = "0x00fdd58e";
const FN_INPUTS = [
    {
        type: "address",
        name: "_owner",
    },
    {
        type: "uint256",
        name: "tokenId",
    },
];
const FN_OUTPUTS = [
    {
        type: "uint256",
    },
];
/**
 * Encodes the parameters for the "balanceOf" function.
 * @param options - The options for the balanceOf function.
 * @returns The encoded ABI parameters.
 * @extension ERC1155
 * @example
 * ```ts
 * import { encodeBalanceOfParams } "thirdweb/extensions/erc1155";
 * const result = encodeBalanceOfParams({
 *  owner: ...,
 *  tokenId: ...,
 * });
 * ```
 */
function encodeBalanceOfParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.owner, options.tokenId]);
}
exports.encodeBalanceOfParams = encodeBalanceOfParams;
/**
 * Decodes the result of the balanceOf function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC1155
 * @example
 * ```ts
 * import { decodeBalanceOfResult } from "thirdweb/extensions/erc1155";
 * const result = decodeBalanceOfResult("...");
 * ```
 */
function decodeBalanceOfResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeBalanceOfResult = decodeBalanceOfResult;
/**
 * Calls the "balanceOf" function on the contract.
 * @param options - The options for the balanceOf function.
 * @returns The parsed result of the function call.
 * @extension ERC1155
 * @example
 * ```ts
 * import { balanceOf } from "thirdweb/extensions/erc1155";
 *
 * const result = await balanceOf({
 *  owner: ...,
 *  tokenId: ...,
 * });
 *
 * ```
 */
async function balanceOf(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.owner, options.tokenId],
    });
}
exports.balanceOf = balanceOf;
//# sourceMappingURL=balanceOf.js.map