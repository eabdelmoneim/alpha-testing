"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mintTo = exports.encodeMintToParams = void 0;
const prepare_contract_call_js_1 = require("../../../../../transaction/prepare-contract-call.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const FN_SELECTOR = "0xb03f4528";
const FN_INPUTS = [
    {
        type: "address",
        name: "to",
    },
    {
        type: "uint256",
        name: "tokenId",
    },
    {
        type: "string",
        name: "uri",
    },
    {
        type: "uint256",
        name: "amount",
    },
];
const FN_OUTPUTS = [];
/**
 * Encodes the parameters for the "mintTo" function.
 * @param options - The options for the mintTo function.
 * @returns The encoded ABI parameters.
 * @extension ERC1155
 * @example
 * ```
 * import { encodeMintToParams } "thirdweb/extensions/erc1155";
 * const result = encodeMintToParams({
 *  to: ...,
 *  tokenId: ...,
 *  uri: ...,
 *  amount: ...,
 * });
 * ```
 */
function encodeMintToParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [
        options.to,
        options.tokenId,
        options.uri,
        options.amount,
    ]);
}
exports.encodeMintToParams = encodeMintToParams;
/**
 * Calls the "mintTo" function on the contract.
 * @param options - The options for the "mintTo" function.
 * @returns A prepared transaction object.
 * @extension ERC1155
 * @example
 * ```
 * import { mintTo } from "thirdweb/extensions/erc1155";
 *
 * const transaction = mintTo({
 *  to: ...,
 *  tokenId: ...,
 *  uri: ...,
 *  amount: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
function mintTo(options) {
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.to,
                    resolvedParams.tokenId,
                    resolvedParams.uri,
                    resolvedParams.amount,
                ];
            }
            : [options.to, options.tokenId, options.uri, options.amount],
    });
}
exports.mintTo = mintTo;
//# sourceMappingURL=mintTo.js.map