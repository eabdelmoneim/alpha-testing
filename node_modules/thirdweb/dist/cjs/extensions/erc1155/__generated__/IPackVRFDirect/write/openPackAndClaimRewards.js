"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.openPackAndClaimRewards = exports.encodeOpenPackAndClaimRewardsParams = void 0;
const prepare_contract_call_js_1 = require("../../../../../transaction/prepare-contract-call.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const FN_SELECTOR = "0xac296b3f";
const FN_INPUTS = [
    {
        type: "uint256",
        name: "_packId",
    },
    {
        type: "uint256",
        name: "_amountToOpen",
    },
    {
        type: "uint32",
        name: "_callBackGasLimit",
    },
];
const FN_OUTPUTS = [
    {
        type: "uint256",
    },
];
/**
 * Encodes the parameters for the "openPackAndClaimRewards" function.
 * @param options - The options for the openPackAndClaimRewards function.
 * @returns The encoded ABI parameters.
 * @extension ERC1155
 * @example
 * ```
 * import { encodeOpenPackAndClaimRewardsParams } "thirdweb/extensions/erc1155";
 * const result = encodeOpenPackAndClaimRewardsParams({
 *  packId: ...,
 *  amountToOpen: ...,
 *  callBackGasLimit: ...,
 * });
 * ```
 */
function encodeOpenPackAndClaimRewardsParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [
        options.packId,
        options.amountToOpen,
        options.callBackGasLimit,
    ]);
}
exports.encodeOpenPackAndClaimRewardsParams = encodeOpenPackAndClaimRewardsParams;
/**
 * Calls the "openPackAndClaimRewards" function on the contract.
 * @param options - The options for the "openPackAndClaimRewards" function.
 * @returns A prepared transaction object.
 * @extension ERC1155
 * @example
 * ```
 * import { openPackAndClaimRewards } from "thirdweb/extensions/erc1155";
 *
 * const transaction = openPackAndClaimRewards({
 *  packId: ...,
 *  amountToOpen: ...,
 *  callBackGasLimit: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
function openPackAndClaimRewards(options) {
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.packId,
                    resolvedParams.amountToOpen,
                    resolvedParams.callBackGasLimit,
                ];
            }
            : [options.packId, options.amountToOpen, options.callBackGasLimit],
    });
}
exports.openPackAndClaimRewards = openPackAndClaimRewards;
//# sourceMappingURL=openPackAndClaimRewards.js.map