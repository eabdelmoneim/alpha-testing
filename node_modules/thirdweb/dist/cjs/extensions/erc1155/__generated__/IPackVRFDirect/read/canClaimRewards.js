"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.canClaimRewards = exports.decodeCanClaimRewardsResult = exports.encodeCanClaimRewardsParams = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const FN_SELECTOR = "0xa9b47a66";
const FN_INPUTS = [
    {
        type: "address",
        name: "_opener",
    },
];
const FN_OUTPUTS = [
    {
        type: "bool",
    },
];
/**
 * Encodes the parameters for the "canClaimRewards" function.
 * @param options - The options for the canClaimRewards function.
 * @returns The encoded ABI parameters.
 * @extension ERC1155
 * @example
 * ```ts
 * import { encodeCanClaimRewardsParams } "thirdweb/extensions/erc1155";
 * const result = encodeCanClaimRewardsParams({
 *  opener: ...,
 * });
 * ```
 */
function encodeCanClaimRewardsParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.opener]);
}
exports.encodeCanClaimRewardsParams = encodeCanClaimRewardsParams;
/**
 * Decodes the result of the canClaimRewards function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC1155
 * @example
 * ```ts
 * import { decodeCanClaimRewardsResult } from "thirdweb/extensions/erc1155";
 * const result = decodeCanClaimRewardsResult("...");
 * ```
 */
function decodeCanClaimRewardsResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeCanClaimRewardsResult = decodeCanClaimRewardsResult;
/**
 * Calls the "canClaimRewards" function on the contract.
 * @param options - The options for the canClaimRewards function.
 * @returns The parsed result of the function call.
 * @extension ERC1155
 * @example
 * ```ts
 * import { canClaimRewards } from "thirdweb/extensions/erc1155";
 *
 * const result = await canClaimRewards({
 *  opener: ...,
 * });
 *
 * ```
 */
async function canClaimRewards(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.opener],
    });
}
exports.canClaimRewards = canClaimRewards;
//# sourceMappingURL=canClaimRewards.js.map