"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.onERC721Received = exports.encodeOnERC721ReceivedParams = void 0;
const prepare_contract_call_js_1 = require("../../../../../transaction/prepare-contract-call.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const FN_SELECTOR = "0x150b7a02";
const FN_INPUTS = [
    {
        type: "address",
        name: "operator",
    },
    {
        type: "address",
        name: "from",
    },
    {
        type: "uint256",
        name: "tokenId",
    },
    {
        type: "bytes",
        name: "data",
    },
];
const FN_OUTPUTS = [
    {
        type: "bytes4",
    },
];
/**
 * Encodes the parameters for the "onERC721Received" function.
 * @param options - The options for the onERC721Received function.
 * @returns The encoded ABI parameters.
 * @extension ERC721
 * @example
 * ```
 * import { encodeOnERC721ReceivedParams } "thirdweb/extensions/erc721";
 * const result = encodeOnERC721ReceivedParams({
 *  operator: ...,
 *  from: ...,
 *  tokenId: ...,
 *  data: ...,
 * });
 * ```
 */
function encodeOnERC721ReceivedParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [
        options.operator,
        options.from,
        options.tokenId,
        options.data,
    ]);
}
exports.encodeOnERC721ReceivedParams = encodeOnERC721ReceivedParams;
/**
 * Calls the "onERC721Received" function on the contract.
 * @param options - The options for the "onERC721Received" function.
 * @returns A prepared transaction object.
 * @extension ERC721
 * @example
 * ```
 * import { onERC721Received } from "thirdweb/extensions/erc721";
 *
 * const transaction = onERC721Received({
 *  operator: ...,
 *  from: ...,
 *  tokenId: ...,
 *  data: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
function onERC721Received(options) {
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.operator,
                    resolvedParams.from,
                    resolvedParams.tokenId,
                    resolvedParams.data,
                ];
            }
            : [options.operator, options.from, options.tokenId, options.data],
    });
}
exports.onERC721Received = onERC721Received;
//# sourceMappingURL=onERC721Received.js.map