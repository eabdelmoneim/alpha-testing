"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.claim = exports.encodeClaimParams = void 0;
const prepare_contract_call_js_1 = require("../../../../../transaction/prepare-contract-call.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const FN_SELECTOR = "0x84bb1e42";
const FN_INPUTS = [
    {
        type: "address",
        name: "receiver",
    },
    {
        type: "uint256",
        name: "quantity",
    },
    {
        type: "address",
        name: "currency",
    },
    {
        type: "uint256",
        name: "pricePerToken",
    },
    {
        type: "tuple",
        name: "allowlistProof",
        components: [
            {
                type: "bytes32[]",
                name: "proof",
            },
            {
                type: "uint256",
                name: "quantityLimitPerWallet",
            },
            {
                type: "uint256",
                name: "pricePerToken",
            },
            {
                type: "address",
                name: "currency",
            },
        ],
    },
    {
        type: "bytes",
        name: "data",
    },
];
const FN_OUTPUTS = [];
/**
 * Encodes the parameters for the "claim" function.
 * @param options - The options for the claim function.
 * @returns The encoded ABI parameters.
 * @extension ERC721
 * @example
 * ```
 * import { encodeClaimParams } "thirdweb/extensions/erc721";
 * const result = encodeClaimParams({
 *  receiver: ...,
 *  quantity: ...,
 *  currency: ...,
 *  pricePerToken: ...,
 *  allowlistProof: ...,
 *  data: ...,
 * });
 * ```
 */
function encodeClaimParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [
        options.receiver,
        options.quantity,
        options.currency,
        options.pricePerToken,
        options.allowlistProof,
        options.data,
    ]);
}
exports.encodeClaimParams = encodeClaimParams;
/**
 * Calls the "claim" function on the contract.
 * @param options - The options for the "claim" function.
 * @returns A prepared transaction object.
 * @extension ERC721
 * @example
 * ```
 * import { claim } from "thirdweb/extensions/erc721";
 *
 * const transaction = claim({
 *  receiver: ...,
 *  quantity: ...,
 *  currency: ...,
 *  pricePerToken: ...,
 *  allowlistProof: ...,
 *  data: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
function claim(options) {
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.receiver,
                    resolvedParams.quantity,
                    resolvedParams.currency,
                    resolvedParams.pricePerToken,
                    resolvedParams.allowlistProof,
                    resolvedParams.data,
                ];
            }
            : [
                options.receiver,
                options.quantity,
                options.currency,
                options.pricePerToken,
                options.allowlistProof,
                options.data,
            ],
    });
}
exports.claim = claim;
//# sourceMappingURL=claim.js.map