"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getApproved = exports.decodeGetApprovedResult = exports.encodeGetApprovedParams = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const FN_SELECTOR = "0x081812fc";
const FN_INPUTS = [
    {
        type: "uint256",
        name: "tokenId",
    },
];
const FN_OUTPUTS = [
    {
        type: "address",
    },
];
/**
 * Encodes the parameters for the "getApproved" function.
 * @param options - The options for the getApproved function.
 * @returns The encoded ABI parameters.
 * @extension ERC721
 * @example
 * ```ts
 * import { encodeGetApprovedParams } "thirdweb/extensions/erc721";
 * const result = encodeGetApprovedParams({
 *  tokenId: ...,
 * });
 * ```
 */
function encodeGetApprovedParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.tokenId]);
}
exports.encodeGetApprovedParams = encodeGetApprovedParams;
/**
 * Decodes the result of the getApproved function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC721
 * @example
 * ```ts
 * import { decodeGetApprovedResult } from "thirdweb/extensions/erc721";
 * const result = decodeGetApprovedResult("...");
 * ```
 */
function decodeGetApprovedResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeGetApprovedResult = decodeGetApprovedResult;
/**
 * Calls the "getApproved" function on the contract.
 * @param options - The options for the getApproved function.
 * @returns The parsed result of the function call.
 * @extension ERC721
 * @example
 * ```ts
 * import { getApproved } from "thirdweb/extensions/erc721";
 *
 * const result = await getApproved({
 *  tokenId: ...,
 * });
 *
 * ```
 */
async function getApproved(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.tokenId],
    });
}
exports.getApproved = getApproved;
//# sourceMappingURL=getApproved.js.map