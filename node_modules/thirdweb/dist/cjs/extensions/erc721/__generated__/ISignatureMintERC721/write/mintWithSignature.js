"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mintWithSignature = exports.encodeMintWithSignatureParams = void 0;
const prepare_contract_call_js_1 = require("../../../../../transaction/prepare-contract-call.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const FN_SELECTOR = "0x2c4510f8";
const FN_INPUTS = [
    {
        type: "tuple",
        name: "payload",
        components: [
            {
                type: "address",
                name: "to",
            },
            {
                type: "address",
                name: "royaltyRecipient",
            },
            {
                type: "uint256",
                name: "royaltyBps",
            },
            {
                type: "address",
                name: "primarySaleRecipient",
            },
            {
                type: "string",
                name: "uri",
            },
            {
                type: "uint256",
                name: "price",
            },
            {
                type: "address",
                name: "currency",
            },
            {
                type: "uint128",
                name: "validityStartTimestamp",
            },
            {
                type: "uint128",
                name: "validityEndTimestamp",
            },
            {
                type: "bytes32",
                name: "uid",
            },
        ],
    },
    {
        type: "bytes",
        name: "signature",
    },
];
const FN_OUTPUTS = [
    {
        type: "address",
        name: "signer",
    },
];
/**
 * Encodes the parameters for the "mintWithSignature" function.
 * @param options - The options for the mintWithSignature function.
 * @returns The encoded ABI parameters.
 * @extension ERC721
 * @example
 * ```ts
 * import { encodeMintWithSignatureParams } "thirdweb/extensions/erc721";
 * const result = encodeMintWithSignatureParams({
 *  payload: ...,
 *  signature: ...,
 * });
 * ```
 */
function encodeMintWithSignatureParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.payload, options.signature]);
}
exports.encodeMintWithSignatureParams = encodeMintWithSignatureParams;
/**
 * Calls the "mintWithSignature" function on the contract.
 * @param options - The options for the "mintWithSignature" function.
 * @returns A prepared transaction object.
 * @extension ERC721
 * @example
 * ```ts
 * import { mintWithSignature } from "thirdweb/extensions/erc721";
 *
 * const transaction = mintWithSignature({
 *  contract,
 *  payload: ...,
 *  signature: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
function mintWithSignature(options) {
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [resolvedParams.payload, resolvedParams.signature];
            }
            : [options.payload, options.signature],
    });
}
exports.mintWithSignature = mintWithSignature;
//# sourceMappingURL=mintWithSignature.js.map