"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.lazyMint = exports.encodeLazyMintParams = void 0;
const prepare_contract_call_js_1 = require("../../../../../transaction/prepare-contract-call.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const FN_SELECTOR = "0xd37c353b";
const FN_INPUTS = [
    {
        type: "uint256",
        name: "amount",
    },
    {
        type: "string",
        name: "baseURIForTokens",
    },
    {
        type: "bytes",
        name: "extraData",
    },
];
const FN_OUTPUTS = [
    {
        type: "uint256",
        name: "batchId",
    },
];
/**
 * Encodes the parameters for the "lazyMint" function.
 * @param options - The options for the lazyMint function.
 * @returns The encoded ABI parameters.
 * @extension ERC721
 * @example
 * ```
 * import { encodeLazyMintParams } "thirdweb/extensions/erc721";
 * const result = encodeLazyMintParams({
 *  amount: ...,
 *  baseURIForTokens: ...,
 *  extraData: ...,
 * });
 * ```
 */
function encodeLazyMintParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [
        options.amount,
        options.baseURIForTokens,
        options.extraData,
    ]);
}
exports.encodeLazyMintParams = encodeLazyMintParams;
/**
 * Calls the "lazyMint" function on the contract.
 * @param options - The options for the "lazyMint" function.
 * @returns A prepared transaction object.
 * @extension ERC721
 * @example
 * ```
 * import { lazyMint } from "thirdweb/extensions/erc721";
 *
 * const transaction = lazyMint({
 *  amount: ...,
 *  baseURIForTokens: ...,
 *  extraData: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
function lazyMint(options) {
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.amount,
                    resolvedParams.baseURIForTokens,
                    resolvedParams.extraData,
                ];
            }
            : [options.amount, options.baseURIForTokens, options.extraData],
    });
}
exports.lazyMint = lazyMint;
//# sourceMappingURL=lazyMint.js.map