"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOwnedTokenIds = getOwnedTokenIds;
const balanceOf_js_1 = require("../__generated__/IERC721A/read/balanceOf.js");
const tokensOfOwner_js_1 = require("../__generated__/IERC721AQueryable/read/tokensOfOwner.js");
const tokenOfOwnerByIndex_js_1 = require("../__generated__/IERC721Enumerable/read/tokenOfOwnerByIndex.js");
/**
 * Retrieves the token IDs owned by a specific address.
 * @param options - The options for retrieving the owned token IDs.
 * @returns A promise that resolves to an array of bigint representing the owned token IDs.
 * @extension ERC721
 * @example
 * ```ts
 * import { getOwnedTokenIds } from "thirdweb/extensions/erc721";
 *
 * const ownedTokenIds = await getOwnedTokenIds({
 *  contract,
 *  owner: "0x1234...",
 * });
 * ```
 */
async function getOwnedTokenIds(options) {
    const balanceOfResult = await (0, balanceOf_js_1.balanceOf)(options);
    const supportsTokensOfOwnerByIndex = await (0, tokenOfOwnerByIndex_js_1.isTokenOfOwnerByIndexSupported)(options.contract);
    if (supportsTokensOfOwnerByIndex) {
        const promises = [];
        for (let i = 0n; i < balanceOfResult; i++) {
            promises.push((0, tokenOfOwnerByIndex_js_1.tokenOfOwnerByIndex)({ ...options, index: i }));
        }
        return Promise.all(promises);
    }
    const supportsTokensOfOwner = await (0, tokensOfOwner_js_1.isTokensOfOwnerSupported)(options.contract);
    if (supportsTokensOfOwner) {
        return (await (0, tokensOfOwner_js_1.tokensOfOwner)({ ...options })).map((token) => token); // Unfortunate map to make this return a mutable array
    }
    throw new Error(`The contract at ${options.contract.address} on chain ${options.contract.chain.id} does not support the tokenOfOwnerByIndex or tokensOfOwner interface`);
}
//# sourceMappingURL=getOwnedTokenIds.js.map