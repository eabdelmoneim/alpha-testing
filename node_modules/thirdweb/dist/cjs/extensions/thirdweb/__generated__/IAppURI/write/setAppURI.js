"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setAppURI = exports.encodeSetAppURI = exports.encodeSetAppURIParams = exports.isSetAppURISupported = exports.FN_SELECTOR = void 0;
const prepare_contract_call_js_1 = require("../../../../../transaction/prepare-contract-call.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const once_js_1 = require("../../../../../utils/promise/once.js");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0xfea18082";
const FN_INPUTS = [
    {
        type: "string",
        name: "_uri",
    },
];
const FN_OUTPUTS = [];
/**
 * Checks if the `setAppURI` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `setAppURI` method is supported.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { isSetAppURISupported } from "thirdweb/extensions/thirdweb";
 *
 * const supported = await isSetAppURISupported(contract);
 * ```
 */
async function isSetAppURISupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isSetAppURISupported = isSetAppURISupported;
/**
 * Encodes the parameters for the "setAppURI" function.
 * @param options - The options for the setAppURI function.
 * @returns The encoded ABI parameters.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { encodeSetAppURIParams } "thirdweb/extensions/thirdweb";
 * const result = encodeSetAppURIParams({
 *  uri: ...,
 * });
 * ```
 */
function encodeSetAppURIParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.uri]);
}
exports.encodeSetAppURIParams = encodeSetAppURIParams;
/**
 * Encodes the "setAppURI" function into a Hex string with its parameters.
 * @param options - The options for the setAppURI function.
 * @returns The encoded hexadecimal string.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { encodeSetAppURI } "thirdweb/extensions/thirdweb";
 * const result = encodeSetAppURI({
 *  uri: ...,
 * });
 * ```
 */
function encodeSetAppURI(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeSetAppURIParams(options).slice(2));
}
exports.encodeSetAppURI = encodeSetAppURI;
/**
 * Calls the "setAppURI" function on the contract.
 * @param options - The options for the "setAppURI" function.
 * @returns A prepared transaction object.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { setAppURI } from "thirdweb/extensions/thirdweb";
 *
 * const transaction = setAppURI({
 *  contract,
 *  uri: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
function setAppURI(options) {
    const asyncOptions = (0, once_js_1.once)(async () => {
        return "asyncParams" in options ? await options.asyncParams() : options;
    });
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: async () => {
            const resolvedOptions = await asyncOptions();
            return [resolvedOptions.uri];
        },
        value: async () => (await asyncOptions()).overrides?.value,
    });
}
exports.setAppURI = setAppURI;
//# sourceMappingURL=setAppURI.js.map