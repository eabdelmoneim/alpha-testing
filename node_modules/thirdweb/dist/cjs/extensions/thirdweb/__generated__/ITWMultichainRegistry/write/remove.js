"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.remove = exports.encodeRemoveParams = void 0;
const prepare_contract_call_js_1 = require("../../../../../transaction/prepare-contract-call.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const FN_SELECTOR = "0x59e5fd04";
const FN_INPUTS = [
    {
        type: "address",
        name: "_deployer",
    },
    {
        type: "address",
        name: "_deployment",
    },
    {
        type: "uint256",
        name: "_chainId",
    },
];
const FN_OUTPUTS = [];
/**
 * Encodes the parameters for the "remove" function.
 * @param options - The options for the remove function.
 * @returns The encoded ABI parameters.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { encodeRemoveParams } "thirdweb/extensions/thirdweb";
 * const result = encodeRemoveParams({
 *  deployer: ...,
 *  deployment: ...,
 *  chainId: ...,
 * });
 * ```
 */
function encodeRemoveParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [
        options.deployer,
        options.deployment,
        options.chainId,
    ]);
}
exports.encodeRemoveParams = encodeRemoveParams;
/**
 * Calls the "remove" function on the contract.
 * @param options - The options for the "remove" function.
 * @returns A prepared transaction object.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { remove } from "thirdweb/extensions/thirdweb";
 *
 * const transaction = remove({
 *  contract,
 *  deployer: ...,
 *  deployment: ...,
 *  chainId: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
function remove(options) {
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.deployer,
                    resolvedParams.deployment,
                    resolvedParams.chainId,
                ];
            }
            : [options.deployer, options.deployment, options.chainId],
    });
}
exports.remove = remove;
//# sourceMappingURL=remove.js.map