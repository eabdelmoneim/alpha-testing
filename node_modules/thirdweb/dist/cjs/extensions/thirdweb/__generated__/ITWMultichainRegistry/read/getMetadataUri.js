"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMetadataUri = exports.decodeGetMetadataUriResult = exports.encodeGetMetadataUriParams = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const FN_SELECTOR = "0xf4c2012d";
const FN_INPUTS = [
    {
        type: "uint256",
        name: "_chainId",
    },
    {
        type: "address",
        name: "_deployment",
    },
];
const FN_OUTPUTS = [
    {
        type: "string",
        name: "metadataUri",
    },
];
/**
 * Encodes the parameters for the "getMetadataUri" function.
 * @param options - The options for the getMetadataUri function.
 * @returns The encoded ABI parameters.
 * @extension THIRDWEB
 * @example
 * ```
 * import { encodeGetMetadataUriParams } "thirdweb/extensions/thirdweb";
 * const result = encodeGetMetadataUriParams({
 *  chainId: ...,
 *  deployment: ...,
 * });
 * ```
 */
function encodeGetMetadataUriParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.chainId, options.deployment]);
}
exports.encodeGetMetadataUriParams = encodeGetMetadataUriParams;
/**
 * Decodes the result of the getMetadataUri function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension THIRDWEB
 * @example
 * ```
 * import { decodeGetMetadataUriResult } from "thirdweb/extensions/thirdweb";
 * const result = decodeGetMetadataUriResult("...");
 * ```
 */
function decodeGetMetadataUriResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeGetMetadataUriResult = decodeGetMetadataUriResult;
/**
 * Calls the "getMetadataUri" function on the contract.
 * @param options - The options for the getMetadataUri function.
 * @returns The parsed result of the function call.
 * @extension THIRDWEB
 * @example
 * ```
 * import { getMetadataUri } from "thirdweb/extensions/thirdweb";
 *
 * const result = await getMetadataUri({
 *  chainId: ...,
 *  deployment: ...,
 * });
 *
 * ```
 */
async function getMetadataUri(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.chainId, options.deployment],
    });
}
exports.getMetadataUri = getMetadataUri;
//# sourceMappingURL=getMetadataUri.js.map