"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAllPublishedContracts = exports.decodeGetAllPublishedContractsResult = exports.encodeGetAllPublishedContractsParams = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const FN_SELECTOR = "0xaf8db690";
const FN_INPUTS = [
    {
        type: "address",
        name: "publisher",
    },
];
const FN_OUTPUTS = [
    {
        type: "tuple[]",
        name: "published",
        components: [
            {
                type: "string",
                name: "contractId",
            },
            {
                type: "uint256",
                name: "publishTimestamp",
            },
            {
                type: "string",
                name: "publishMetadataUri",
            },
            {
                type: "bytes32",
                name: "bytecodeHash",
            },
            {
                type: "address",
                name: "implementation",
            },
        ],
    },
];
/**
 * Encodes the parameters for the "getAllPublishedContracts" function.
 * @param options - The options for the getAllPublishedContracts function.
 * @returns The encoded ABI parameters.
 * @extension THIRDWEB
 * @example
 * ```
 * import { encodeGetAllPublishedContractsParams } "thirdweb/extensions/thirdweb";
 * const result = encodeGetAllPublishedContractsParams({
 *  publisher: ...,
 * });
 * ```
 */
function encodeGetAllPublishedContractsParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.publisher]);
}
exports.encodeGetAllPublishedContractsParams = encodeGetAllPublishedContractsParams;
/**
 * Decodes the result of the getAllPublishedContracts function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension THIRDWEB
 * @example
 * ```
 * import { decodeGetAllPublishedContractsResult } from "thirdweb/extensions/thirdweb";
 * const result = decodeGetAllPublishedContractsResult("...");
 * ```
 */
function decodeGetAllPublishedContractsResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeGetAllPublishedContractsResult = decodeGetAllPublishedContractsResult;
/**
 * Calls the "getAllPublishedContracts" function on the contract.
 * @param options - The options for the getAllPublishedContracts function.
 * @returns The parsed result of the function call.
 * @extension THIRDWEB
 * @example
 * ```
 * import { getAllPublishedContracts } from "thirdweb/extensions/thirdweb";
 *
 * const result = await getAllPublishedContracts({
 *  publisher: ...,
 * });
 *
 * ```
 */
async function getAllPublishedContracts(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.publisher],
    });
}
exports.getAllPublishedContracts = getAllPublishedContracts;
//# sourceMappingURL=getAllPublishedContracts.js.map