"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.verify = exports.decodeVerifyResult = exports.encodeVerifyParams = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const FN_SELECTOR = "0xc4376dd7";
const FN_INPUTS = [
    {
        type: "tuple",
        name: "req",
        components: [
            {
                type: "uint128",
                name: "validityStartTimestamp",
            },
            {
                type: "uint128",
                name: "validityEndTimestamp",
            },
            {
                type: "bytes32",
                name: "uid",
            },
            {
                type: "bytes",
                name: "data",
            },
        ],
    },
    {
        type: "bytes",
        name: "signature",
    },
];
const FN_OUTPUTS = [
    {
        type: "bool",
        name: "success",
    },
    {
        type: "address",
        name: "signer",
    },
];
/**
 * Encodes the parameters for the "verify" function.
 * @param options - The options for the verify function.
 * @returns The encoded ABI parameters.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { encodeVerifyParams } "thirdweb/extensions/thirdweb";
 * const result = encodeVerifyParams({
 *  req: ...,
 *  signature: ...,
 * });
 * ```
 */
function encodeVerifyParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.req, options.signature]);
}
exports.encodeVerifyParams = encodeVerifyParams;
/**
 * Decodes the result of the verify function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { decodeVerifyResult } from "thirdweb/extensions/thirdweb";
 * const result = decodeVerifyResult("...");
 * ```
 */
function decodeVerifyResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result);
}
exports.decodeVerifyResult = decodeVerifyResult;
/**
 * Calls the "verify" function on the contract.
 * @param options - The options for the verify function.
 * @returns The parsed result of the function call.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { verify } from "thirdweb/extensions/thirdweb";
 *
 * const result = await verify({
 *  req: ...,
 *  signature: ...,
 * });
 *
 * ```
 */
async function verify(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.req, options.signature],
    });
}
exports.verify = verify;
//# sourceMappingURL=verify.js.map