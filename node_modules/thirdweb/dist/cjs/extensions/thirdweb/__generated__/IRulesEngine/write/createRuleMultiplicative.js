"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRuleMultiplicative = exports.encodeCreateRuleMultiplicativeParams = void 0;
const prepare_contract_call_js_1 = require("../../../../../transaction/prepare-contract-call.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const FN_SELECTOR = "0x1e2e9cb5";
const FN_INPUTS = [
    {
        type: "tuple",
        name: "rule",
        components: [
            {
                type: "address",
                name: "token",
            },
            {
                type: "uint8",
                name: "tokenType",
            },
            {
                type: "uint256",
                name: "tokenId",
            },
            {
                type: "uint256",
                name: "scorePerOwnedToken",
            },
        ],
    },
];
const FN_OUTPUTS = [
    {
        type: "bytes32",
        name: "ruleId",
    },
];
/**
 * Encodes the parameters for the "createRuleMultiplicative" function.
 * @param options - The options for the createRuleMultiplicative function.
 * @returns The encoded ABI parameters.
 * @extension THIRDWEB
 * @example
 * ```
 * import { encodeCreateRuleMultiplicativeParams } "thirdweb/extensions/thirdweb";
 * const result = encodeCreateRuleMultiplicativeParams({
 *  rule: ...,
 * });
 * ```
 */
function encodeCreateRuleMultiplicativeParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.rule]);
}
exports.encodeCreateRuleMultiplicativeParams = encodeCreateRuleMultiplicativeParams;
/**
 * Calls the "createRuleMultiplicative" function on the contract.
 * @param options - The options for the "createRuleMultiplicative" function.
 * @returns A prepared transaction object.
 * @extension THIRDWEB
 * @example
 * ```
 * import { createRuleMultiplicative } from "thirdweb/extensions/thirdweb";
 *
 * const transaction = createRuleMultiplicative({
 *  rule: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
function createRuleMultiplicative(options) {
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [resolvedParams.rule];
            }
            : [options.rule],
    });
}
exports.createRuleMultiplicative = createRuleMultiplicative;
//# sourceMappingURL=createRuleMultiplicative.js.map