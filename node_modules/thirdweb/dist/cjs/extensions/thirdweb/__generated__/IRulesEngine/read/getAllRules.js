"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAllRules = exports.decodeGetAllRulesResult = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const viem_1 = require("viem");
const FN_SELECTOR = "0x1184aef2";
const FN_INPUTS = [];
const FN_OUTPUTS = [
    {
        type: "tuple[]",
        name: "rules",
        components: [
            {
                type: "bytes32",
                name: "ruleId",
            },
            {
                type: "address",
                name: "token",
            },
            {
                type: "uint8",
                name: "tokenType",
            },
            {
                type: "uint256",
                name: "tokenId",
            },
            {
                type: "uint256",
                name: "balance",
            },
            {
                type: "uint256",
                name: "score",
            },
            {
                type: "uint8",
                name: "ruleType",
            },
        ],
    },
];
/**
 * Decodes the result of the getAllRules function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { decodeGetAllRulesResult } from "thirdweb/extensions/thirdweb";
 * const result = decodeGetAllRulesResult("...");
 * ```
 */
function decodeGetAllRulesResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeGetAllRulesResult = decodeGetAllRulesResult;
/**
 * Calls the "getAllRules" function on the contract.
 * @param options - The options for the getAllRules function.
 * @returns The parsed result of the function call.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { getAllRules } from "thirdweb/extensions/thirdweb";
 *
 * const result = await getAllRules();
 *
 * ```
 */
async function getAllRules(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [],
    });
}
exports.getAllRules = getAllRules;
//# sourceMappingURL=getAllRules.js.map