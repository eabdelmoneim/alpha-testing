"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.previewMint = exports.decodePreviewMintResult = exports.encodePreviewMintParams = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const FN_SELECTOR = "0xb3d7f6b9";
const FN_INPUTS = [
    {
        name: "shares",
        type: "uint256",
        internalType: "uint256",
    },
];
const FN_OUTPUTS = [
    {
        name: "",
        type: "uint256",
        internalType: "uint256",
    },
];
/**
 * Encodes the parameters for the "previewMint" function.
 * @param options - The options for the previewMint function.
 * @returns The encoded ABI parameters.
 * @extension ERC4626
 * @example
 * ```
 * import { encodePreviewMintParams } "thirdweb/extensions/erc4626";
 * const result = encodePreviewMintParams({
 *  shares: ...,
 * });
 * ```
 */
function encodePreviewMintParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.shares]);
}
exports.encodePreviewMintParams = encodePreviewMintParams;
/**
 * Decodes the result of the previewMint function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC4626
 * @example
 * ```
 * import { decodePreviewMintResult } from "thirdweb/extensions/erc4626";
 * const result = decodePreviewMintResult("...");
 * ```
 */
function decodePreviewMintResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodePreviewMintResult = decodePreviewMintResult;
/**
 * Calls the "previewMint" function on the contract.
 * @param options - The options for the previewMint function.
 * @returns The parsed result of the function call.
 * @extension ERC4626
 * @example
 * ```
 * import { previewMint } from "thirdweb/extensions/erc4626";
 *
 * const result = await previewMint({
 *  shares: ...,
 * });
 *
 * ```
 */
async function previewMint(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.shares],
    });
}
exports.previewMint = previewMint;
//# sourceMappingURL=previewMint.js.map