"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mint = exports.encodeMint = exports.encodeMintParams = exports.isMintSupported = exports.FN_SELECTOR = void 0;
const prepare_contract_call_js_1 = require("../../../../../transaction/prepare-contract-call.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const once_js_1 = require("../../../../../utils/promise/once.js");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0x94bf804d";
const FN_INPUTS = [
    {
        name: "shares",
        type: "uint256",
        internalType: "uint256",
    },
    {
        name: "receiver",
        type: "address",
        internalType: "address",
    },
];
const FN_OUTPUTS = [
    {
        name: "assets",
        type: "uint256",
        internalType: "uint256",
    },
];
/**
 * Checks if the `mint` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `mint` method is supported.
 * @extension ERC4626
 * @example
 * ```ts
 * import { isMintSupported } from "thirdweb/extensions/erc4626";
 *
 * const supported = await isMintSupported(contract);
 * ```
 */
async function isMintSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isMintSupported = isMintSupported;
/**
 * Encodes the parameters for the "mint" function.
 * @param options - The options for the mint function.
 * @returns The encoded ABI parameters.
 * @extension ERC4626
 * @example
 * ```ts
 * import { encodeMintParams } "thirdweb/extensions/erc4626";
 * const result = encodeMintParams({
 *  shares: ...,
 *  receiver: ...,
 * });
 * ```
 */
function encodeMintParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.shares, options.receiver]);
}
exports.encodeMintParams = encodeMintParams;
/**
 * Encodes the "mint" function into a Hex string with its parameters.
 * @param options - The options for the mint function.
 * @returns The encoded hexadecimal string.
 * @extension ERC4626
 * @example
 * ```ts
 * import { encodeMint } "thirdweb/extensions/erc4626";
 * const result = encodeMint({
 *  shares: ...,
 *  receiver: ...,
 * });
 * ```
 */
function encodeMint(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeMintParams(options).slice(2));
}
exports.encodeMint = encodeMint;
/**
 * Calls the "mint" function on the contract.
 * @param options - The options for the "mint" function.
 * @returns A prepared transaction object.
 * @extension ERC4626
 * @example
 * ```ts
 * import { mint } from "thirdweb/extensions/erc4626";
 *
 * const transaction = mint({
 *  contract,
 *  shares: ...,
 *  receiver: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
function mint(options) {
    const asyncOptions = (0, once_js_1.once)(async () => {
        return "asyncParams" in options ? await options.asyncParams() : options;
    });
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: async () => {
            const resolvedOptions = await asyncOptions();
            return [resolvedOptions.shares, resolvedOptions.receiver];
        },
        value: async () => (await asyncOptions()).overrides?.value,
    });
}
exports.mint = mint;
//# sourceMappingURL=mint.js.map