"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.delegateBySig = exports.encodeDelegateBySigParams = void 0;
const prepare_contract_call_js_1 = require("../../../../../transaction/prepare-contract-call.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const FN_SELECTOR = "0xc3cda520";
const FN_INPUTS = [
    {
        type: "address",
        name: "delegatee",
    },
    {
        type: "uint256",
        name: "nonce",
    },
    {
        type: "uint256",
        name: "expiry",
    },
    {
        type: "uint8",
        name: "v",
    },
    {
        type: "bytes32",
        name: "r",
    },
    {
        type: "bytes32",
        name: "s",
    },
];
const FN_OUTPUTS = [];
/**
 * Encodes the parameters for the "delegateBySig" function.
 * @param options - The options for the delegateBySig function.
 * @returns The encoded ABI parameters.
 * @extension ERC20
 * @example
 * ```ts
 * import { encodeDelegateBySigParams } "thirdweb/extensions/erc20";
 * const result = encodeDelegateBySigParams({
 *  delegatee: ...,
 *  nonce: ...,
 *  expiry: ...,
 *  v: ...,
 *  r: ...,
 *  s: ...,
 * });
 * ```
 */
function encodeDelegateBySigParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [
        options.delegatee,
        options.nonce,
        options.expiry,
        options.v,
        options.r,
        options.s,
    ]);
}
exports.encodeDelegateBySigParams = encodeDelegateBySigParams;
/**
 * Calls the "delegateBySig" function on the contract.
 * @param options - The options for the "delegateBySig" function.
 * @returns A prepared transaction object.
 * @extension ERC20
 * @example
 * ```ts
 * import { delegateBySig } from "thirdweb/extensions/erc20";
 *
 * const transaction = delegateBySig({
 *  contract,
 *  delegatee: ...,
 *  nonce: ...,
 *  expiry: ...,
 *  v: ...,
 *  r: ...,
 *  s: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
function delegateBySig(options) {
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.delegatee,
                    resolvedParams.nonce,
                    resolvedParams.expiry,
                    resolvedParams.v,
                    resolvedParams.r,
                    resolvedParams.s,
                ];
            }
            : [
                options.delegatee,
                options.nonce,
                options.expiry,
                options.v,
                options.r,
                options.s,
            ],
    });
}
exports.delegateBySig = delegateBySig;
//# sourceMappingURL=delegateBySig.js.map