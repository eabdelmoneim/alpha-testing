"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transfer = exports.encodeTransferParams = void 0;
const prepare_contract_call_js_1 = require("../../../../../transaction/prepare-contract-call.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const FN_SELECTOR = "0xa9059cbb";
const FN_INPUTS = [
    {
        type: "address",
        name: "to",
    },
    {
        type: "uint256",
        name: "value",
    },
];
const FN_OUTPUTS = [
    {
        type: "bool",
    },
];
/**
 * Encodes the parameters for the "transfer" function.
 * @param options - The options for the transfer function.
 * @returns The encoded ABI parameters.
 * @extension ERC20
 * @example
 * ```
 * import { encodeTransferParams } "thirdweb/extensions/erc20";
 * const result = encodeTransferParams({
 *  to: ...,
 *  value: ...,
 * });
 * ```
 */
function encodeTransferParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.to, options.value]);
}
exports.encodeTransferParams = encodeTransferParams;
/**
 * Calls the "transfer" function on the contract.
 * @param options - The options for the "transfer" function.
 * @returns A prepared transaction object.
 * @extension ERC20
 * @example
 * ```
 * import { transfer } from "thirdweb/extensions/erc20";
 *
 * const transaction = transfer({
 *  to: ...,
 *  value: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
function transfer(options) {
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [resolvedParams.to, resolvedParams.value];
            }
            : [options.to, options.value],
    });
}
exports.transfer = transfer;
//# sourceMappingURL=transfer.js.map