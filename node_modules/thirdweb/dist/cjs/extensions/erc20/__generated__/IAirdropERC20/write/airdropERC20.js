"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.airdropERC20 = exports.encodeAirdropERC20Params = void 0;
const prepare_contract_call_js_1 = require("../../../../../transaction/prepare-contract-call.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const FN_SELECTOR = "0x0670b2b3";
const FN_INPUTS = [
    {
        type: "address",
        name: "tokenAddress",
    },
    {
        type: "address",
        name: "tokenOwner",
    },
    {
        type: "tuple[]",
        name: "contents",
        components: [
            {
                type: "address",
                name: "recipient",
            },
            {
                type: "uint256",
                name: "amount",
            },
        ],
    },
];
const FN_OUTPUTS = [];
/**
 * Encodes the parameters for the "airdropERC20" function.
 * @param options - The options for the airdropERC20 function.
 * @returns The encoded ABI parameters.
 * @extension ERC20
 * @example
 * ```
 * import { encodeAirdropERC20Params } "thirdweb/extensions/erc20";
 * const result = encodeAirdropERC20Params({
 *  tokenAddress: ...,
 *  tokenOwner: ...,
 *  contents: ...,
 * });
 * ```
 */
function encodeAirdropERC20Params(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [
        options.tokenAddress,
        options.tokenOwner,
        options.contents,
    ]);
}
exports.encodeAirdropERC20Params = encodeAirdropERC20Params;
/**
 * Calls the "airdropERC20" function on the contract.
 * @param options - The options for the "airdropERC20" function.
 * @returns A prepared transaction object.
 * @extension ERC20
 * @example
 * ```
 * import { airdropERC20 } from "thirdweb/extensions/erc20";
 *
 * const transaction = airdropERC20({
 *  tokenAddress: ...,
 *  tokenOwner: ...,
 *  contents: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
function airdropERC20(options) {
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.tokenAddress,
                    resolvedParams.tokenOwner,
                    resolvedParams.contents,
                ];
            }
            : [options.tokenAddress, options.tokenOwner, options.contents],
    });
}
exports.airdropERC20 = airdropERC20;
//# sourceMappingURL=airdropERC20.js.map