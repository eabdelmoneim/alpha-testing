"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.add = exports.encodeAddParams = void 0;
const prepare_contract_call_js_1 = require("../../../../../transaction/prepare-contract-call.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const FN_SELECTOR = "0x22b1a414";
const FN_INPUTS = [
    {
        type: "uint32",
        name: "keyType",
    },
    {
        type: "bytes",
        name: "key",
    },
    {
        type: "uint8",
        name: "metadataType",
    },
    {
        type: "bytes",
        name: "metadata",
    },
];
const FN_OUTPUTS = [];
/**
 * Encodes the parameters for the "add" function.
 * @param options - The options for the add function.
 * @returns The encoded ABI parameters.
 * @extension FARCASTER
 * @example
 * ```
 * import { encodeAddParams } "thirdweb/extensions/farcaster";
 * const result = encodeAddParams({
 *  keyType: ...,
 *  key: ...,
 *  metadataType: ...,
 *  metadata: ...,
 * });
 * ```
 */
function encodeAddParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [
        options.keyType,
        options.key,
        options.metadataType,
        options.metadata,
    ]);
}
exports.encodeAddParams = encodeAddParams;
/**
 * Calls the "add" function on the contract.
 * @param options - The options for the "add" function.
 * @returns A prepared transaction object.
 * @extension FARCASTER
 * @example
 * ```
 * import { add } from "thirdweb/extensions/farcaster";
 *
 * const transaction = add({
 *  keyType: ...,
 *  key: ...,
 *  metadataType: ...,
 *  metadata: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
function add(options) {
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.keyType,
                    resolvedParams.key,
                    resolvedParams.metadataType,
                    resolvedParams.metadata,
                ];
            }
            : [
                options.keyType,
                options.key,
                options.metadataType,
                options.metadata,
            ],
    });
}
exports.add = add;
//# sourceMappingURL=add.js.map