"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transferAndChangeRecovery = exports.encodeTransferAndChangeRecoveryParams = void 0;
const prepare_contract_call_js_1 = require("../../../../../transaction/prepare-contract-call.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const FN_SELECTOR = "0x3ab8465d";
const FN_INPUTS = [
    {
        type: "address",
        name: "to",
    },
    {
        type: "address",
        name: "recovery",
    },
    {
        type: "uint256",
        name: "deadline",
    },
    {
        type: "bytes",
        name: "sig",
    },
];
const FN_OUTPUTS = [];
/**
 * Encodes the parameters for the "transferAndChangeRecovery" function.
 * @param options - The options for the transferAndChangeRecovery function.
 * @returns The encoded ABI parameters.
 * @extension FARCASTER
 * @example
 * ```
 * import { encodeTransferAndChangeRecoveryParams } "thirdweb/extensions/farcaster";
 * const result = encodeTransferAndChangeRecoveryParams({
 *  to: ...,
 *  recovery: ...,
 *  deadline: ...,
 *  sig: ...,
 * });
 * ```
 */
function encodeTransferAndChangeRecoveryParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [
        options.to,
        options.recovery,
        options.deadline,
        options.sig,
    ]);
}
exports.encodeTransferAndChangeRecoveryParams = encodeTransferAndChangeRecoveryParams;
/**
 * Calls the "transferAndChangeRecovery" function on the contract.
 * @param options - The options for the "transferAndChangeRecovery" function.
 * @returns A prepared transaction object.
 * @extension FARCASTER
 * @example
 * ```
 * import { transferAndChangeRecovery } from "thirdweb/extensions/farcaster";
 *
 * const transaction = transferAndChangeRecovery({
 *  to: ...,
 *  recovery: ...,
 *  deadline: ...,
 *  sig: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
function transferAndChangeRecovery(options) {
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.to,
                    resolvedParams.recovery,
                    resolvedParams.deadline,
                    resolvedParams.sig,
                ];
            }
            : [options.to, options.recovery, options.deadline, options.sig],
    });
}
exports.transferAndChangeRecovery = transferAndChangeRecovery;
//# sourceMappingURL=transferAndChangeRecovery.js.map