"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transferAndChangeRecoveryFor = exports.encodeTransferAndChangeRecoveryForParams = void 0;
const prepare_contract_call_js_1 = require("../../../../../transaction/prepare-contract-call.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const FN_SELECTOR = "0x4c5cbb34";
const FN_INPUTS = [
    {
        type: "address",
        name: "from",
    },
    {
        type: "address",
        name: "to",
    },
    {
        type: "address",
        name: "recovery",
    },
    {
        type: "uint256",
        name: "fromDeadline",
    },
    {
        type: "bytes",
        name: "fromSig",
    },
    {
        type: "uint256",
        name: "toDeadline",
    },
    {
        type: "bytes",
        name: "toSig",
    },
];
const FN_OUTPUTS = [];
/**
 * Encodes the parameters for the "transferAndChangeRecoveryFor" function.
 * @param options - The options for the transferAndChangeRecoveryFor function.
 * @returns The encoded ABI parameters.
 * @extension FARCASTER
 * @example
 * ```
 * import { encodeTransferAndChangeRecoveryForParams } "thirdweb/extensions/farcaster";
 * const result = encodeTransferAndChangeRecoveryForParams({
 *  from: ...,
 *  to: ...,
 *  recovery: ...,
 *  fromDeadline: ...,
 *  fromSig: ...,
 *  toDeadline: ...,
 *  toSig: ...,
 * });
 * ```
 */
function encodeTransferAndChangeRecoveryForParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [
        options.from,
        options.to,
        options.recovery,
        options.fromDeadline,
        options.fromSig,
        options.toDeadline,
        options.toSig,
    ]);
}
exports.encodeTransferAndChangeRecoveryForParams = encodeTransferAndChangeRecoveryForParams;
/**
 * Calls the "transferAndChangeRecoveryFor" function on the contract.
 * @param options - The options for the "transferAndChangeRecoveryFor" function.
 * @returns A prepared transaction object.
 * @extension FARCASTER
 * @example
 * ```
 * import { transferAndChangeRecoveryFor } from "thirdweb/extensions/farcaster";
 *
 * const transaction = transferAndChangeRecoveryFor({
 *  from: ...,
 *  to: ...,
 *  recovery: ...,
 *  fromDeadline: ...,
 *  fromSig: ...,
 *  toDeadline: ...,
 *  toSig: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
function transferAndChangeRecoveryFor(options) {
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.from,
                    resolvedParams.to,
                    resolvedParams.recovery,
                    resolvedParams.fromDeadline,
                    resolvedParams.fromSig,
                    resolvedParams.toDeadline,
                    resolvedParams.toSig,
                ];
            }
            : [
                options.from,
                options.to,
                options.recovery,
                options.fromDeadline,
                options.fromSig,
                options.toDeadline,
                options.toSig,
            ],
    });
}
exports.transferAndChangeRecoveryFor = transferAndChangeRecoveryFor;
//# sourceMappingURL=transferAndChangeRecoveryFor.js.map