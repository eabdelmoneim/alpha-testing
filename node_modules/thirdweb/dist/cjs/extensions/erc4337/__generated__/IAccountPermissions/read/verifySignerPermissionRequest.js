"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifySignerPermissionRequest = exports.decodeVerifySignerPermissionRequestResult = exports.encodeVerifySignerPermissionRequestParams = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const FN_SELECTOR = "0xa9082d84";
const FN_INPUTS = [
    {
        type: "tuple",
        name: "req",
        components: [
            {
                type: "address",
                name: "signer",
            },
            {
                type: "uint8",
                name: "isAdmin",
            },
            {
                type: "address[]",
                name: "approvedTargets",
            },
            {
                type: "uint256",
                name: "nativeTokenLimitPerTransaction",
            },
            {
                type: "uint128",
                name: "permissionStartTimestamp",
            },
            {
                type: "uint128",
                name: "permissionEndTimestamp",
            },
            {
                type: "uint128",
                name: "reqValidityStartTimestamp",
            },
            {
                type: "uint128",
                name: "reqValidityEndTimestamp",
            },
            {
                type: "bytes32",
                name: "uid",
            },
        ],
    },
    {
        type: "bytes",
        name: "signature",
    },
];
const FN_OUTPUTS = [
    {
        type: "bool",
        name: "success",
    },
    {
        type: "address",
        name: "signer",
    },
];
/**
 * Encodes the parameters for the "verifySignerPermissionRequest" function.
 * @param options - The options for the verifySignerPermissionRequest function.
 * @returns The encoded ABI parameters.
 * @extension ERC4337
 * @example
 * ```ts
 * import { encodeVerifySignerPermissionRequestParams } "thirdweb/extensions/erc4337";
 * const result = encodeVerifySignerPermissionRequestParams({
 *  req: ...,
 *  signature: ...,
 * });
 * ```
 */
function encodeVerifySignerPermissionRequestParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.req, options.signature]);
}
exports.encodeVerifySignerPermissionRequestParams = encodeVerifySignerPermissionRequestParams;
/**
 * Decodes the result of the verifySignerPermissionRequest function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC4337
 * @example
 * ```ts
 * import { decodeVerifySignerPermissionRequestResult } from "thirdweb/extensions/erc4337";
 * const result = decodeVerifySignerPermissionRequestResult("...");
 * ```
 */
function decodeVerifySignerPermissionRequestResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result);
}
exports.decodeVerifySignerPermissionRequestResult = decodeVerifySignerPermissionRequestResult;
/**
 * Calls the "verifySignerPermissionRequest" function on the contract.
 * @param options - The options for the verifySignerPermissionRequest function.
 * @returns The parsed result of the function call.
 * @extension ERC4337
 * @example
 * ```ts
 * import { verifySignerPermissionRequest } from "thirdweb/extensions/erc4337";
 *
 * const result = await verifySignerPermissionRequest({
 *  req: ...,
 *  signature: ...,
 * });
 *
 * ```
 */
async function verifySignerPermissionRequest(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.req, options.signature],
    });
}
exports.verifySignerPermissionRequest = verifySignerPermissionRequest;
//# sourceMappingURL=verifySignerPermissionRequest.js.map