"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleOps = exports.encodeHandleOpsParams = void 0;
const prepare_contract_call_js_1 = require("../../../../../transaction/prepare-contract-call.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const FN_SELECTOR = "0x1fad948c";
const FN_INPUTS = [
    {
        type: "tuple[]",
        name: "ops",
        components: [
            {
                type: "address",
                name: "sender",
            },
            {
                type: "uint256",
                name: "nonce",
            },
            {
                type: "bytes",
                name: "initCode",
            },
            {
                type: "bytes",
                name: "callData",
            },
            {
                type: "uint256",
                name: "callGasLimit",
            },
            {
                type: "uint256",
                name: "verificationGasLimit",
            },
            {
                type: "uint256",
                name: "preVerificationGas",
            },
            {
                type: "uint256",
                name: "maxFeePerGas",
            },
            {
                type: "uint256",
                name: "maxPriorityFeePerGas",
            },
            {
                type: "bytes",
                name: "paymasterAndData",
            },
            {
                type: "bytes",
                name: "signature",
            },
        ],
    },
    {
        type: "address",
        name: "beneficiary",
    },
];
const FN_OUTPUTS = [];
/**
 * Encodes the parameters for the "handleOps" function.
 * @param options - The options for the handleOps function.
 * @returns The encoded ABI parameters.
 * @extension ERC4337
 * @example
 * ```ts
 * import { encodeHandleOpsParams } "thirdweb/extensions/erc4337";
 * const result = encodeHandleOpsParams({
 *  ops: ...,
 *  beneficiary: ...,
 * });
 * ```
 */
function encodeHandleOpsParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.ops, options.beneficiary]);
}
exports.encodeHandleOpsParams = encodeHandleOpsParams;
/**
 * Calls the "handleOps" function on the contract.
 * @param options - The options for the "handleOps" function.
 * @returns A prepared transaction object.
 * @extension ERC4337
 * @example
 * ```ts
 * import { handleOps } from "thirdweb/extensions/erc4337";
 *
 * const transaction = handleOps({
 *  contract,
 *  ops: ...,
 *  beneficiary: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
function handleOps(options) {
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [resolvedParams.ops, resolvedParams.beneficiary];
            }
            : [options.ops, options.beneficiary],
    });
}
exports.handleOps = handleOps;
//# sourceMappingURL=handleOps.js.map