"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.simulateHandleOp = exports.encodeSimulateHandleOpParams = void 0;
const prepare_contract_call_js_1 = require("../../../../../transaction/prepare-contract-call.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const FN_SELECTOR = "0xd6383f94";
const FN_INPUTS = [
    {
        type: "tuple",
        name: "op",
        components: [
            {
                type: "address",
                name: "sender",
            },
            {
                type: "uint256",
                name: "nonce",
            },
            {
                type: "bytes",
                name: "initCode",
            },
            {
                type: "bytes",
                name: "callData",
            },
            {
                type: "uint256",
                name: "callGasLimit",
            },
            {
                type: "uint256",
                name: "verificationGasLimit",
            },
            {
                type: "uint256",
                name: "preVerificationGas",
            },
            {
                type: "uint256",
                name: "maxFeePerGas",
            },
            {
                type: "uint256",
                name: "maxPriorityFeePerGas",
            },
            {
                type: "bytes",
                name: "paymasterAndData",
            },
            {
                type: "bytes",
                name: "signature",
            },
        ],
    },
    {
        type: "address",
        name: "target",
    },
    {
        type: "bytes",
        name: "targetCallData",
    },
];
const FN_OUTPUTS = [];
/**
 * Encodes the parameters for the "simulateHandleOp" function.
 * @param options - The options for the simulateHandleOp function.
 * @returns The encoded ABI parameters.
 * @extension ERC4337
 * @example
 * ```ts
 * import { encodeSimulateHandleOpParams } "thirdweb/extensions/erc4337";
 * const result = encodeSimulateHandleOpParams({
 *  op: ...,
 *  target: ...,
 *  targetCallData: ...,
 * });
 * ```
 */
function encodeSimulateHandleOpParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [
        options.op,
        options.target,
        options.targetCallData,
    ]);
}
exports.encodeSimulateHandleOpParams = encodeSimulateHandleOpParams;
/**
 * Calls the "simulateHandleOp" function on the contract.
 * @param options - The options for the "simulateHandleOp" function.
 * @returns A prepared transaction object.
 * @extension ERC4337
 * @example
 * ```ts
 * import { simulateHandleOp } from "thirdweb/extensions/erc4337";
 *
 * const transaction = simulateHandleOp({
 *  contract,
 *  op: ...,
 *  target: ...,
 *  targetCallData: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
function simulateHandleOp(options) {
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.op,
                    resolvedParams.target,
                    resolvedParams.targetCallData,
                ];
            }
            : [options.op, options.target, options.targetCallData],
    });
}
exports.simulateHandleOp = simulateHandleOp;
//# sourceMappingURL=simulateHandleOp.js.map