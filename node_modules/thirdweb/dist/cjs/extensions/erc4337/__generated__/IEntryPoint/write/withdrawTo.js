"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withdrawTo = exports.encodeWithdrawToParams = void 0;
const prepare_contract_call_js_1 = require("../../../../../transaction/prepare-contract-call.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const FN_SELECTOR = "0x205c2878";
const FN_INPUTS = [
    {
        type: "address",
        name: "withdrawAddress",
    },
    {
        type: "uint256",
        name: "withdrawAmount",
    },
];
const FN_OUTPUTS = [];
/**
 * Encodes the parameters for the "withdrawTo" function.
 * @param options - The options for the withdrawTo function.
 * @returns The encoded ABI parameters.
 * @extension ERC4337
 * @example
 * ```
 * import { encodeWithdrawToParams } "thirdweb/extensions/erc4337";
 * const result = encodeWithdrawToParams({
 *  withdrawAddress: ...,
 *  withdrawAmount: ...,
 * });
 * ```
 */
function encodeWithdrawToParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [
        options.withdrawAddress,
        options.withdrawAmount,
    ]);
}
exports.encodeWithdrawToParams = encodeWithdrawToParams;
/**
 * Calls the "withdrawTo" function on the contract.
 * @param options - The options for the "withdrawTo" function.
 * @returns A prepared transaction object.
 * @extension ERC4337
 * @example
 * ```
 * import { withdrawTo } from "thirdweb/extensions/erc4337";
 *
 * const transaction = withdrawTo({
 *  withdrawAddress: ...,
 *  withdrawAmount: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
function withdrawTo(options) {
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.withdrawAddress,
                    resolvedParams.withdrawAmount,
                ];
            }
            : [options.withdrawAddress, options.withdrawAmount],
    });
}
exports.withdrawTo = withdrawTo;
//# sourceMappingURL=withdrawTo.js.map