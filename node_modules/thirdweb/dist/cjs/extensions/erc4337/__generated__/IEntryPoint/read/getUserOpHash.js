"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUserOpHash = exports.decodeGetUserOpHashResult = exports.encodeGetUserOpHashParams = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const FN_SELECTOR = "0xa6193531";
const FN_INPUTS = [
    {
        type: "tuple",
        name: "userOp",
        components: [
            {
                type: "address",
                name: "sender",
            },
            {
                type: "uint256",
                name: "nonce",
            },
            {
                type: "bytes",
                name: "initCode",
            },
            {
                type: "bytes",
                name: "callData",
            },
            {
                type: "uint256",
                name: "callGasLimit",
            },
            {
                type: "uint256",
                name: "verificationGasLimit",
            },
            {
                type: "uint256",
                name: "preVerificationGas",
            },
            {
                type: "uint256",
                name: "maxFeePerGas",
            },
            {
                type: "uint256",
                name: "maxPriorityFeePerGas",
            },
            {
                type: "bytes",
                name: "paymasterAndData",
            },
            {
                type: "bytes",
                name: "signature",
            },
        ],
    },
];
const FN_OUTPUTS = [
    {
        type: "bytes32",
    },
];
/**
 * Encodes the parameters for the "getUserOpHash" function.
 * @param options - The options for the getUserOpHash function.
 * @returns The encoded ABI parameters.
 * @extension ERC4337
 * @example
 * ```
 * import { encodeGetUserOpHashParams } "thirdweb/extensions/erc4337";
 * const result = encodeGetUserOpHashParams({
 *  userOp: ...,
 * });
 * ```
 */
function encodeGetUserOpHashParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.userOp]);
}
exports.encodeGetUserOpHashParams = encodeGetUserOpHashParams;
/**
 * Decodes the result of the getUserOpHash function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC4337
 * @example
 * ```
 * import { decodeGetUserOpHashResult } from "thirdweb/extensions/erc4337";
 * const result = decodeGetUserOpHashResult("...");
 * ```
 */
function decodeGetUserOpHashResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeGetUserOpHashResult = decodeGetUserOpHashResult;
/**
 * Calls the "getUserOpHash" function on the contract.
 * @param options - The options for the getUserOpHash function.
 * @returns The parsed result of the function call.
 * @extension ERC4337
 * @example
 * ```
 * import { getUserOpHash } from "thirdweb/extensions/erc4337";
 *
 * const result = await getUserOpHash({
 *  userOp: ...,
 * });
 *
 * ```
 */
async function getUserOpHash(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.userOp],
    });
}
exports.getUserOpHash = getUserOpHash;
//# sourceMappingURL=getUserOpHash.js.map