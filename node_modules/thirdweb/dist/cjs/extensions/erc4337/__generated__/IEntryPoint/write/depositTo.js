"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.depositTo = exports.encodeDepositToParams = void 0;
const prepare_contract_call_js_1 = require("../../../../../transaction/prepare-contract-call.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const FN_SELECTOR = "0xb760faf9";
const FN_INPUTS = [
    {
        type: "address",
        name: "account",
    },
];
const FN_OUTPUTS = [];
/**
 * Encodes the parameters for the "depositTo" function.
 * @param options - The options for the depositTo function.
 * @returns The encoded ABI parameters.
 * @extension ERC4337
 * @example
 * ```
 * import { encodeDepositToParams } "thirdweb/extensions/erc4337";
 * const result = encodeDepositToParams({
 *  account: ...,
 * });
 * ```
 */
function encodeDepositToParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.account]);
}
exports.encodeDepositToParams = encodeDepositToParams;
/**
 * Calls the "depositTo" function on the contract.
 * @param options - The options for the "depositTo" function.
 * @returns A prepared transaction object.
 * @extension ERC4337
 * @example
 * ```
 * import { depositTo } from "thirdweb/extensions/erc4337";
 *
 * const transaction = depositTo({
 *  account: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
function depositTo(options) {
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [resolvedParams.account];
            }
            : [options.account],
    });
}
exports.depositTo = depositTo;
//# sourceMappingURL=depositTo.js.map