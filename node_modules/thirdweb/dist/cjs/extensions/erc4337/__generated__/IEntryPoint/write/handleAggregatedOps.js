"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleAggregatedOps = exports.encodeHandleAggregatedOpsParams = void 0;
const prepare_contract_call_js_1 = require("../../../../../transaction/prepare-contract-call.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const FN_SELECTOR = "0x4b1d7cf5";
const FN_INPUTS = [
    {
        type: "tuple[]",
        name: "opsPerAggregator",
        components: [
            {
                type: "tuple[]",
                name: "userOps",
                components: [
                    {
                        type: "address",
                        name: "sender",
                    },
                    {
                        type: "uint256",
                        name: "nonce",
                    },
                    {
                        type: "bytes",
                        name: "initCode",
                    },
                    {
                        type: "bytes",
                        name: "callData",
                    },
                    {
                        type: "uint256",
                        name: "callGasLimit",
                    },
                    {
                        type: "uint256",
                        name: "verificationGasLimit",
                    },
                    {
                        type: "uint256",
                        name: "preVerificationGas",
                    },
                    {
                        type: "uint256",
                        name: "maxFeePerGas",
                    },
                    {
                        type: "uint256",
                        name: "maxPriorityFeePerGas",
                    },
                    {
                        type: "bytes",
                        name: "paymasterAndData",
                    },
                    {
                        type: "bytes",
                        name: "signature",
                    },
                ],
            },
            {
                type: "address",
                name: "aggregator",
            },
            {
                type: "bytes",
                name: "signature",
            },
        ],
    },
    {
        type: "address",
        name: "beneficiary",
    },
];
const FN_OUTPUTS = [];
/**
 * Encodes the parameters for the "handleAggregatedOps" function.
 * @param options - The options for the handleAggregatedOps function.
 * @returns The encoded ABI parameters.
 * @extension ERC4337
 * @example
 * ```ts
 * import { encodeHandleAggregatedOpsParams } "thirdweb/extensions/erc4337";
 * const result = encodeHandleAggregatedOpsParams({
 *  opsPerAggregator: ...,
 *  beneficiary: ...,
 * });
 * ```
 */
function encodeHandleAggregatedOpsParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [
        options.opsPerAggregator,
        options.beneficiary,
    ]);
}
exports.encodeHandleAggregatedOpsParams = encodeHandleAggregatedOpsParams;
/**
 * Calls the "handleAggregatedOps" function on the contract.
 * @param options - The options for the "handleAggregatedOps" function.
 * @returns A prepared transaction object.
 * @extension ERC4337
 * @example
 * ```ts
 * import { handleAggregatedOps } from "thirdweb/extensions/erc4337";
 *
 * const transaction = handleAggregatedOps({
 *  contract,
 *  opsPerAggregator: ...,
 *  beneficiary: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
function handleAggregatedOps(options) {
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: "asyncParams" in options
            ? async () => {
                const resolvedParams = await options.asyncParams();
                return [
                    resolvedParams.opsPerAggregator,
                    resolvedParams.beneficiary,
                ];
            }
            : [options.opsPerAggregator, options.beneficiary],
    });
}
exports.handleAggregatedOps = handleAggregatedOps;
//# sourceMappingURL=handleAggregatedOps.js.map