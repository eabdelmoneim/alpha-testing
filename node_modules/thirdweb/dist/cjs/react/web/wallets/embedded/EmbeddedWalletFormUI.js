"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmbeddedWalletFormUIScreen = exports.EmbeddedWalletFormUI = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const styled_1 = require("@emotion/styled");
const react_1 = require("react");
const wallet_ui_states_provider_js_1 = require("../../providers/wallet-ui-states-provider.js");
const TOS_js_1 = require("../../ui/ConnectWallet/Modal/TOS.js");
const screen_js_1 = require("../../ui/ConnectWallet/Modal/screen.js");
const PoweredByTW_js_1 = require("../../ui/ConnectWallet/PoweredByTW.js");
const Img_js_1 = require("../../ui/components/Img.js");
const Spacer_js_1 = require("../../ui/components/Spacer.js");
const TextDivider_js_1 = require("../../ui/components/TextDivider.js");
const basic_js_1 = require("../../ui/components/basic.js");
const buttons_js_1 = require("../../ui/components/buttons.js");
const CustomThemeProvider_js_1 = require("../../ui/design-system/CustomThemeProvider.js");
const index_js_1 = require("../../ui/design-system/index.js");
const socialIcons_js_1 = require("./socialIcons.js");
const openOauthSignInWindow_js_1 = require("./openOauthSignInWindow.js");
const useWalletConnectionCtx_js_1 = require("../../../core/hooks/others/useWalletConnectionCtx.js");
const InputSelectionUI_js_1 = require("./InputSelectionUI.js");
const defaultAuthOptions = [
    "email",
    "google",
    "apple",
    "facebook",
];
/**
 * @internal
 */
const EmbeddedWalletFormUI = (props) => {
    const locale = props.locale;
    const { chain, client } = (0, useWalletConnectionCtx_js_1.useWalletConnectionCtx)();
    const { done, wallet } = props;
    const { modalSize } = (0, react_1.useContext)(wallet_ui_states_provider_js_1.ModalConfigCtx);
    const setModalConfig = (0, react_1.useContext)(wallet_ui_states_provider_js_1.SetModalConfigCtx);
    function saveState(data) {
        setModalConfig((p) => ({
            ...p,
            data,
        }));
    }
    const themeObj = (0, CustomThemeProvider_js_1.useCustomTheme)();
    const loginMethodsLabel = {
        google: locale.signInWithGoogle,
        facebook: locale.signInWithFacebook,
        apple: locale.signInWithApple,
    };
    const config = props.wallet.getConfig();
    const authOptions = config?.auth?.options || defaultAuthOptions;
    const enableEmailLogin = authOptions.includes("email");
    const socialLogins = authOptions.filter((x) => x !== "email");
    const hasSocialLogins = socialLogins.length > 0;
    // Need to trigger login on button click to avoid popup from being blocked
    const handleSocialLogin = async (strategy) => {
        try {
            const socialLoginWindow = (0, openOauthSignInWindow_js_1.openOauthSignInWindow)(strategy, themeObj);
            if (!socialLoginWindow) {
                throw new Error("Failed to open login window");
            }
            const connectPromise = wallet.connect({
                chain,
                client,
                strategy: strategy,
                openedWindow: socialLoginWindow,
                closeOpenedWindow: (openedWindow) => {
                    openedWindow.close();
                },
            });
            saveState({
                socialLogin: {
                    type: strategy,
                    connectionPromise: connectPromise,
                },
            });
            props.select();
            await connectPromise;
            done();
        }
        catch (e) {
            console.error(`Error sign in with ${strategy}`, e);
        }
    };
    const showOnlyIcons = socialLogins.length > 1;
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "lg", children: [hasSocialLogins && ((0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: showOnlyIcons ? "row" : "column", center: "x", gap: "sm", style: {
                    justifyContent: "space-between",
                }, children: socialLogins.map((loginMethod) => {
                    const imgIconSize = showOnlyIcons ? index_js_1.iconSize.lg : index_js_1.iconSize.md;
                    return ((0, jsx_runtime_1.jsxs)(SocialButton, { "aria-label": `Login with ${loginMethod}`, "data-variant": showOnlyIcons ? "icon" : "full", variant: showOnlyIcons ? "outline" : "secondary", fullWidth: !showOnlyIcons, onClick: () => {
                            handleSocialLogin(loginMethod);
                        }, children: [(0, jsx_runtime_1.jsx)(Img_js_1.Img, { src: socialIcons_js_1.socialIcons[loginMethod], width: imgIconSize, height: imgIconSize }), !showOnlyIcons && loginMethodsLabel[loginMethod]] }, loginMethod));
                }) })), modalSize === "wide" && hasSocialLogins && enableEmailLogin && ((0, jsx_runtime_1.jsx)(TextDivider_js_1.TextDivider, { text: locale.or })), enableEmailLogin && ((0, jsx_runtime_1.jsx)(InputSelectionUI_js_1.InputSelectionUI, { onSelect: (email) => {
                    saveState({
                        emailLogin: email,
                    });
                    props.select();
                }, placeholder: locale.emailPlaceholder, name: "email", type: "email", errorMessage: (_input) => {
                    const input = _input.replace(/\+/g, "").toLowerCase();
                    const emailRegex = /^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,})$/g;
                    const isValidEmail = emailRegex.test(input);
                    if (!isValidEmail) {
                        return locale.invalidEmail;
                    }
                    return undefined;
                }, emptyErrorMessage: locale.emailRequired, submitButtonText: locale.submitEmail }))] }));
};
exports.EmbeddedWalletFormUI = EmbeddedWalletFormUI;
/**
 * @internal
 */
function EmbeddedWalletFormUIScreen(props) {
    const locale = props.locale.emailLoginScreen;
    const modalConfig = (0, react_1.useContext)(wallet_ui_states_provider_js_1.ModalConfigCtx);
    const isCompact = modalConfig.modalSize === "compact";
    const { initialScreen, screen } = (0, screen_js_1.useScreenContext)();
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { fullHeight: true, flex: "column", p: "lg", animate: "fadein", style: {
            minHeight: "250px",
        }, children: [(0, jsx_runtime_1.jsx)(basic_js_1.ModalHeader, { onBack: screen === props.wallet && initialScreen === props.wallet
                    ? undefined
                    : props.goBack, title: locale.title }), isCompact ? (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xl" }) : null, (0, jsx_runtime_1.jsx)(basic_js_1.Container, { expand: true, flex: "column", center: "y", p: isCompact ? undefined : "lg", children: (0, jsx_runtime_1.jsx)(exports.EmbeddedWalletFormUI, { ...props }) }), isCompact &&
                (modalConfig.showThirdwebBranding !== false ||
                    modalConfig.termsOfServiceUrl ||
                    modalConfig.privacyPolicyUrl) && (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xl" }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "lg", children: [(0, jsx_runtime_1.jsx)(TOS_js_1.TOS, { termsOfServiceUrl: modalConfig.termsOfServiceUrl, privacyPolicyUrl: modalConfig.privacyPolicyUrl }), modalConfig.showThirdwebBranding !== false && (0, jsx_runtime_1.jsx)(PoweredByTW_js_1.PoweredByThirdweb, {})] })] }));
}
exports.EmbeddedWalletFormUIScreen = EmbeddedWalletFormUIScreen;
const SocialButton = /* @__PURE__ */ (0, styled_1.default)(buttons_js_1.Button)({
    "&[data-variant='full']": {
        display: "flex",
        justifyContent: "center",
        gap: index_js_1.spacing.md,
        fontSize: index_js_1.fontSize.md,
        transition: "background-color 0.2s ease",
        "&:active": {
            boxShadow: "none",
        },
    },
    "&[data-variant='icon']": {
        padding: index_js_1.spacing.sm,
        flexGrow: 1,
    },
});
//# sourceMappingURL=EmbeddedWalletFormUI.js.map