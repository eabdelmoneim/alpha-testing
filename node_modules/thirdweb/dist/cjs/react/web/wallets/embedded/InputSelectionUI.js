"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InputSelectionUI = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Spacer_js_1 = require("../../ui/components/Spacer.js");
const buttons_js_1 = require("../../ui/components/buttons.js");
const formElements_js_1 = require("../../ui/components/formElements.js");
const text_js_1 = require("../../ui/components/text.js");
/**
 * @internal
 */
function InputSelectionUI(props) {
    const [input, setInput] = (0, react_1.useState)("");
    const [error, setError] = (0, react_1.useState)();
    const [showError, setShowError] = (0, react_1.useState)(false);
    const handleSelect = () => {
        setShowError(true);
        if (!input || !!error) {
            return;
        }
        props.onSelect(input);
    };
    const renderingError = (showError && !!error) ||
        (!input && !!props.emptyErrorMessage && showError);
    return ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("div", { style: {
                    position: "relative",
                }, children: (0, jsx_runtime_1.jsx)(formElements_js_1.Input, { tabIndex: -1, placeholder: props.placeholder, variant: "outline", type: props.type, name: props.name, value: input, "data-error": renderingError, onChange: (e) => {
                        setInput(e.target.value);
                        if (props.errorMessage) {
                            setError(props.errorMessage(e.target.value));
                        }
                        else {
                            setError(undefined);
                        }
                    }, onKeyDown: (e) => {
                        if (e.key === "Enter") {
                            handleSelect();
                        }
                    } }) }), showError && error && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xs" }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "danger", size: "sm", children: error })] })), !(showError && error) &&
                !input &&
                props.emptyErrorMessage &&
                showError && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xs" }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "danger", size: "sm", children: props.emptyErrorMessage })] })), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsx)(buttons_js_1.Button, { variant: "accent", onClick: handleSelect, fullWidth: true, children: props.submitButtonText })] }));
}
exports.InputSelectionUI = InputSelectionUI;
//# sourceMappingURL=InputSelectionUI.js.map