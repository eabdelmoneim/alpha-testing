"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSetIsWalletModalOpen = exports.useIsWalletModalOpen = exports.WalletUIStatesProvider = exports.SetModalConfigCtx = exports.ModalConfigCtx = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const canFitWideModal_js_1 = require("../utils/canFitWideModal.js");
const useWalletConnectionCtx_js_1 = require("../../core/hooks/others/useWalletConnectionCtx.js");
const WalletModalOpen = /* @__PURE__ */ (0, react_1.createContext)(false);
const SetWalletModalOpen = /* @__PURE__ */ (0, react_1.createContext)(undefined);
exports.ModalConfigCtx = (0, react_1.createContext)({
    title: "",
    theme: "dark",
    data: undefined,
    modalSize: "wide",
});
exports.SetModalConfigCtx = (0, react_1.createContext)(() => { });
/**
 * @internal
 */
const WalletUIStatesProvider = (props) => {
    const [isWalletModalOpen, setIsWalletModalOpen] = (0, react_1.useState)(false);
    const enforceCompact = !(0, canFitWideModal_js_1.canFitWideModal)();
    const { connectLocale } = (0, useWalletConnectionCtx_js_1.useWalletConnectionCtx)();
    const [modalConfig, setModalConfig] = (0, react_1.useState)({
        title: props.title || connectLocale.defaultModalTitle,
        theme: props.theme || "dark",
        data: undefined,
        modalSize: (enforceCompact ? "compact" : props.modalSize) || "wide",
        termsOfServiceUrl: props.termsOfServiceUrl,
        privacyPolicyUrl: props.privacyPolicyUrl,
        welcomeScreen: props.welcomeScreen,
        titleIconUrl: props.titleIconUrl,
        isEmbed: props.isEmbed,
        auth: props.auth,
        onConnect: props.onConnect,
        chain: props.chain,
        chains: props.chains,
        showThirdwebBranding: props.showThirdwebBranding,
    });
    return ((0, jsx_runtime_1.jsx)(WalletModalOpen.Provider, { value: isWalletModalOpen, children: (0, jsx_runtime_1.jsx)(SetWalletModalOpen.Provider, { value: setIsWalletModalOpen, children: (0, jsx_runtime_1.jsx)(exports.ModalConfigCtx.Provider, { value: modalConfig, children: (0, jsx_runtime_1.jsx)(exports.SetModalConfigCtx.Provider, { value: setModalConfig, children: props.children }) }) }) }));
};
exports.WalletUIStatesProvider = WalletUIStatesProvider;
/**
 * Check if the [`ConnectButton`](https://portal.thirdweb.com/react/v4/components/ConnectButton)'s Modal is open or not
 * @example
 * ```tsx
 * const isOpen = useIsWalletModalOpen();
 * ```
 * @returns `true` if the [`ConnectButton`](https://portal.thirdweb.com/react/v4/components/ConnectButton) modal is open, `false` otherwise
 * @connectWallet
 */
const useIsWalletModalOpen = () => {
    return (0, react_1.useContext)(WalletModalOpen);
};
exports.useIsWalletModalOpen = useIsWalletModalOpen;
/**
 * Open or close the [`ConnectButton`](https://portal.thirdweb.com/react/v4/components/ConnectButton) Modal
 * @example
 * ```tsx
 * const setIsWalletModalOpen = useSetIsWalletModalOpen();
 *
 * function openModal() {
 *  setIsWalletModalOpen(true);
 * }
 *
 * function closeModal() {
 *  setIsWalletModalOpen(false);
 * }
 *
 * return (
 *   <div>
 *    <button onClick={openModal}>Open Modal</button>
 *    <button onClick={closeModal}>Close Modal</button>
 *   </div>
 * )
 * ```
 * @returns Function to open or close the modal
 * @connectWallet
 */
const useSetIsWalletModalOpen = () => {
    const context = (0, react_1.useContext)(SetWalletModalOpen);
    if (context === undefined) {
        throw new Error("useSetWalletModalOpen must be used within a ThirdwebProvider");
    }
    return context;
};
exports.useSetIsWalletModalOpen = useSetIsWalletModalOpen;
//# sourceMappingURL=wallet-ui-states-provider.js.map