"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionButton = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const wait_for_tx_receipt_js_1 = require("../../../../transaction/actions/wait-for-tx-receipt.js");
const useSendTransaction_js_1 = require("../../../core/hooks/contract/useSendTransaction.js");
const wallet_hooks_js_1 = require("../../../core/hooks/wallets/wallet-hooks.js");
const Spinner_js_1 = require("../components/Spinner.js");
const buttons_js_1 = require("../components/buttons.js");
/**
 * TransactionButton component is used to render a button that triggers a transaction.
 * - It shows a "Switch Network" button if the connected wallet is on a different chain than the transaction.
 * @param props - The props for this component.
 * Refer to [TransactionButtonProps](https://portal.thirdweb.com/references/typescript/v5/TransactionButtonProps) for details.
 * @example
 * ```tsx
 * <TransactionButton
 *   transaction={() => {}}
 *   onSuccess={handleSuccess}
 *   onError={handleError}
 * >
 *   Confirm Transaction
 * </TransactionButton>
 * ```
 * @component
 */
function TransactionButton(props) {
    const { children, transaction, onTransactionSent, onTransactionConfirmed, onError, onClick, ...buttonProps } = props;
    const account = (0, wallet_hooks_js_1.useActiveAccount)();
    const wallet = (0, wallet_hooks_js_1.useActiveWallet)();
    const [isPending, setIsPending] = (0, react_1.useState)(false);
    const sendTransaction = (0, useSendTransaction_js_1.useSendTransactionCore)();
    if (!isPending) {
        return ((0, jsx_runtime_1.jsx)(buttons_js_1.Button, { gap: "xs", ...buttonProps, disabled: !account, variant: "primary", "data-is-loading": isPending, onClick: async (e) => {
                if (onClick) {
                    onClick(e);
                }
                try {
                    setIsPending(true);
                    const resolvedTx = await transaction();
                    if (wallet && wallet.getChain()?.id !== resolvedTx.chain.id) {
                        await wallet?.switchChain(resolvedTx.chain);
                    }
                    const result = await sendTransaction.mutateAsync(resolvedTx);
                    if (onTransactionSent) {
                        onTransactionSent(result);
                    }
                    if (onTransactionConfirmed) {
                        const receipt = await (0, wait_for_tx_receipt_js_1.waitForReceipt)(result);
                        onTransactionConfirmed(receipt);
                    }
                }
                catch (error) {
                    if (onError) {
                        onError(error);
                    }
                }
                finally {
                    setIsPending(false);
                }
            }, style: {
                ...buttonProps.style,
                opacity: !account ? 0.5 : 1,
            }, children: children }));
    }
    return ((0, jsx_runtime_1.jsx)(buttons_js_1.Button, { ...buttonProps, disabled: true, variant: "primary", style: {
            ...buttonProps.style,
            minWidth: "150px",
        }, children: (0, jsx_runtime_1.jsx)(Spinner_js_1.Spinner, { size: "md", color: "primaryButtonText" }) }));
}
exports.TransactionButton = TransactionButton;
//# sourceMappingURL=index.js.map