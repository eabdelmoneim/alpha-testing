"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletImage = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const mipdStore_js_1 = require("../../../../wallets/injected/mipdStore.js");
const storage_js_1 = require("../../wallets/in-app/storage.js");
const dataUris_js_1 = require("../ConnectWallet/icons/dataUris.js");
const socialLogins_js_1 = require("../ConnectWallet/icons/socialLogins.js");
const index_js_1 = require("../design-system/index.js");
const useWalletInfo_js_1 = require("../hooks/useWalletInfo.js");
const Img_js_1 = require("./Img.js");
// Note: Must not use useConnectUI here
/**
 * @internal
 */
function WalletImage(props) {
    const [image, setImage] = (0, react_1.useState)(undefined);
    (0, react_1.useEffect)(() => {
        async function fetchImage() {
            let mipdImage = (0, mipdStore_js_1.getInstalledWalletProviders)().find((provider) => provider.info.rdns === props.id)?.info.icon;
            if (props.allowOverrides && props.id === "inApp") {
                // check last auth provider and override the IAW icon
                const lastAuthProvider = await (0, storage_js_1.getLastAuthProvider)();
                switch (lastAuthProvider) {
                    case "google":
                        mipdImage = socialLogins_js_1.googleIconUri;
                        break;
                    case "apple":
                        mipdImage = socialLogins_js_1.appleIconUri;
                        break;
                    case "facebook":
                        mipdImage = socialLogins_js_1.facebookIconUri;
                        break;
                    case "phone":
                        mipdImage = dataUris_js_1.phoneIcon;
                        break;
                    case "email":
                        mipdImage = dataUris_js_1.emailIcon;
                        break;
                }
            }
            setImage(mipdImage);
        }
        fetchImage();
    }, [props.id, props.allowOverrides]);
    if (image) {
        return ((0, jsx_runtime_1.jsx)(Img_js_1.Img, { src: image, width: props.size, height: props.size, loading: "eager", client: props.client, style: {
                borderRadius: index_js_1.radius.md,
            } }));
    }
    return ((0, jsx_runtime_1.jsx)(WalletImageQuery, { id: props.id, size: props.size, client: props.client }));
}
exports.WalletImage = WalletImage;
function WalletImageQuery(props) {
    const walletImage = (0, useWalletInfo_js_1.useWalletImage)(props.id);
    return ((0, jsx_runtime_1.jsx)(Img_js_1.Img, { client: props.client, src: walletImage.data, width: props.size, height: props.size, loading: "eager", style: {
            borderRadius: index_js_1.radius.md,
        } }));
}
//# sourceMappingURL=WalletImage.js.map