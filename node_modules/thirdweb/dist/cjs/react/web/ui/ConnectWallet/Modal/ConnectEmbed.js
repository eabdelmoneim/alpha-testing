"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyncedWalletUIStates = exports.ConnectEmbed = exports.useShowConnectEmbed = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const wallet_ui_states_provider_js_1 = require("../../../providers/wallet-ui-states-provider.js");
const constants_js_1 = require("../constants.js");
const screen_js_1 = require("./screen.js");
const react_1 = require("react");
const index_js_1 = require("../../design-system/index.js");
const elements_js_1 = require("../../design-system/elements.js");
const CustomThemeProvider_js_1 = require("../../design-system/CustomThemeProvider.js");
const DynamicHeight_js_1 = require("../../components/DynamicHeight.js");
const wallet_hooks_js_1 = require("../../../../core/hooks/wallets/wallet-hooks.js");
const ConnectModalContent_js_1 = require("./ConnectModalContent.js");
const canFitWideModal_js_1 = require("../../../utils/canFitWideModal.js");
const useWalletConnectionCtx_js_1 = require("../../../../core/hooks/others/useWalletConnectionCtx.js");
const wallet_connection_js_1 = require("../../../../core/providers/wallet-connection.js");
const defaultWallets_js_1 = require("../../../wallets/defaultWallets.js");
const LoadingScreen_js_1 = require("../../../wallets/shared/LoadingScreen.js");
const getConnectLocale_js_1 = require("../locale/getConnectLocale.js");
const useAutoConnect_js_1 = require("../../../../core/hooks/connection/useAutoConnect.js");
/**
 * @internal
 */
function useSignInRequired(loginOptional) {
    const connectionStatus = (0, wallet_hooks_js_1.useActiveWalletConnectionStatus)();
    // TODO
    // const { user } = useUser();
    // const authConfig = useThirdwebAuthContext();
    if (loginOptional === true) {
        return false;
    }
    // return (
    //   !!authConfig?.authUrl && !user?.address && connectionStatus === "connected"
    // );
    console.log(connectionStatus);
    return false;
}
/**
 * Returns `true` if the `<ConnectEmbed />` should be rendered.
 * It returns true if either one of the following conditions are met:
 * - the wallet is not connected
 * - the wallet is connected but the user is not signed in and `auth` is required ( loginOptional is not set to false )
 * @example
 * ```tsx
 * function Example() {
 *   const loginOptional = false;
 *   const showConnectEmbed = useShowConnectEmbed(loginOptional);
 *
 *   if (!showConnectEmbed) {
 *     return <div> Wallet is connected </div>
 *   }
 *
 *   return (
 *     <div>
 *       <ConnectEmbed
 *         auth={{
 *           loginOptional,
 *         }}
 *       />
 *     </div>
 *   );
 * }
 *```
 * @param loginOptional -
 * Specify whether the `<ConnectEmbed />` you want to render has auth enabled or not.
 * If not specified, it is assumed to be `false` ( login is required )
 * @returns `true` if the `<ConnectEmbed />` should be rendered.
 */
function useShowConnectEmbed(loginOptional) {
    const activeAccount = (0, wallet_hooks_js_1.useActiveAccount)();
    // const connectionStatus = useConnectionStatus();
    const signInRequired = useSignInRequired(loginOptional);
    return !activeAccount || signInRequired;
}
exports.useShowConnectEmbed = useShowConnectEmbed;
/**
 * A component that allows the user to connect their wallet.
 *
 * it renders the same UI as the [`ConnectButton`](https://portal.thirdweb.com/react/v4/components/ConnectButton) component's modal - but directly on the page instead of being in a modal.
 *
 * It only renders UI if wallet is not connected
 * @example
 * ```tsx
 * <ConnectEmbed
 *    client={client}
 *    appMetadata={{
 *      name: "Example",
 *      url: "https://example.com",
 *    }}
 * />
 * ```
 * @param props -
 * The props for the `ConnectEmbed` component.
 *
 * Refer to the [`ConnectEmbedProps`](https://portal.thirdweb.com/references/typescript/v5/ConnectEmbedProps) type for more details
 * @component
 */
function ConnectEmbed(props) {
    const loginOptional = true; // props.auth?.loginOptional;
    const show = useShowConnectEmbed(loginOptional);
    const wallets = props.wallets || (0, defaultWallets_js_1.getDefaultWallets)();
    const localeId = props.locale || "en_US";
    const [locale, setLocale] = (0, react_1.useState)();
    (0, react_1.useEffect)(() => {
        (0, getConnectLocale_js_1.getConnectLocale)(localeId).then(setLocale);
    }, [localeId]);
    const contextTheme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    const walletUIStatesProps = {
        theme: props.theme || contextTheme || constants_js_1.defaultTheme,
        modalSize: "compact",
        title: undefined,
        termsOfServiceUrl: props.termsOfServiceUrl,
        privacyPolicyUrl: props.privacyPolicyUrl,
        isEmbed: true,
        // auth: props.auth,
        onConnect: props.onConnect,
        showThirdwebBranding: props.showThirdwebBranding,
    };
    const autoConnectComp = props.autoConnect !== false && ((0, jsx_runtime_1.jsx)(useAutoConnect_js_1.AutoConnect, { appMetadata: props.appMetadata, client: props.client, wallets: wallets, timeout: typeof props.autoConnect === "boolean"
            ? undefined
            : props.autoConnect?.timeout }));
    if (show) {
        if (!locale) {
            return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [autoConnectComp, (0, jsx_runtime_1.jsx)(LoadingScreen_js_1.LoadingScreen, {}), ";"] }));
        }
        return ((0, jsx_runtime_1.jsx)(wallet_connection_js_1.WalletConnectionContext.Provider, { value: {
                appMetadata: props.appMetadata,
                client: props.client,
                wallets: wallets,
                locale: localeId,
                connectLocale: locale,
                chain: props.chain,
                chains: props.chains,
                walletConnect: props.walletConnect,
                accountAbstraction: props.accountAbstraction,
            }, children: (0, jsx_runtime_1.jsx)(wallet_ui_states_provider_js_1.WalletUIStatesProvider, { ...walletUIStatesProps, children: (0, jsx_runtime_1.jsxs)(CustomThemeProvider_js_1.CustomThemeProvider, { theme: walletUIStatesProps.theme, children: [(0, jsx_runtime_1.jsx)(ConnectEmbedContent, { ...props, onConnect: props.onConnect }), (0, jsx_runtime_1.jsx)(SyncedWalletUIStates, { ...walletUIStatesProps }), autoConnectComp] }) }) }));
    }
    return (0, jsx_runtime_1.jsx)("div", { children: autoConnectComp });
}
exports.ConnectEmbed = ConnectEmbed;
/**
 * @internal
 */
const ConnectEmbedContent = (props) => {
    const requiresSignIn = useSignInRequired(props.loginOptional);
    const screenSetup = (0, screen_js_1.useSetupScreen)();
    const { screen, setScreen, initialScreen } = screenSetup;
    // if showing main screen but signIn is required, switch to signIn screen
    (0, react_1.useEffect)(() => {
        if (requiresSignIn && screen === constants_js_1.reservedScreens.main) {
            setScreen(constants_js_1.reservedScreens.signIn);
        }
    }, [requiresSignIn, screen, setScreen]);
    const isAutoConnecting = (0, wallet_hooks_js_1.useIsAutoConnecting)();
    let content = null;
    // show spinner on page load and during auto connecting a wallet
    if (isAutoConnecting) {
        content = (0, jsx_runtime_1.jsx)(LoadingScreen_js_1.LoadingScreen, {});
    }
    else {
        content = ((0, jsx_runtime_1.jsx)(ConnectModalContent_js_1.ConnectModalContent, { screenSetup: screenSetup, isOpen: true, onClose: () => {
                setScreen(initialScreen);
            }, onHide: () => {
                // no op
            }, onShow: () => {
                // no op
            } }));
    }
    return ((0, jsx_runtime_1.jsx)(EmbedContainer, { className: props.className, style: {
            height: "auto",
            maxWidth: constants_js_1.modalMaxWidthCompact,
            ...props.style,
        }, children: (0, jsx_runtime_1.jsxs)(DynamicHeight_js_1.DynamicHeight, { children: [" ", content, " "] }) }));
};
/**
 * @internal
 */
function SyncedWalletUIStates(props) {
    const setModalConfig = (0, react_1.useContext)(wallet_ui_states_provider_js_1.SetModalConfigCtx);
    const locale = (0, useWalletConnectionCtx_js_1.useWalletConnectionCtx)().connectLocale;
    // update modalConfig on props change
    (0, react_1.useEffect)(() => {
        setModalConfig((c) => ({
            ...c,
            title: props.title || locale.defaultModalTitle,
            theme: props.theme || "dark",
            modalSize: (!(0, canFitWideModal_js_1.canFitWideModal)() ? "compact" : props.modalSize) || "wide",
            termsOfServiceUrl: props.termsOfServiceUrl,
            privacyPolicyUrl: props.privacyPolicyUrl,
            welcomeScreen: props.welcomeScreen,
            titleIconUrl: props.titleIconUrl,
            showThirdwebBranding: props.showThirdwebBranding,
        }));
    }, [
        props.title,
        props.theme,
        props.modalSize,
        props.termsOfServiceUrl,
        props.privacyPolicyUrl,
        props.welcomeScreen,
        props.titleIconUrl,
        setModalConfig,
        locale.defaultModalTitle,
        props.showThirdwebBranding,
    ]);
    return (0, jsx_runtime_1.jsx)(wallet_ui_states_provider_js_1.WalletUIStatesProvider, { ...props });
}
exports.SyncedWalletUIStates = SyncedWalletUIStates;
const EmbedContainer = /* @__PURE__ */ (0, elements_js_1.StyledDiv)(() => {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    return {
        color: theme.colors.primaryText,
        background: theme.colors.modalBg,
        width: "100%",
        boxSizing: "border-box",
        position: "relative",
        lineHeight: "normal",
        borderRadius: index_js_1.radius.xl,
        border: `1px solid ${theme.colors.borderColor}`,
        overflow: "hidden",
        fontFamily: theme.fontFamily,
        "& *::selection": {
            backgroundColor: theme.colors.primaryText,
            color: theme.colors.modalBg,
        },
    };
});
//# sourceMappingURL=ConnectEmbed.js.map