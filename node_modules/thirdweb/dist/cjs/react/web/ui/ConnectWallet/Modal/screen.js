"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useScreenContext = exports.useSetupScreen = exports.ScreenSetupContext = void 0;
const react_1 = require("react");
const constants_js_1 = require("../constants.js");
const useWalletConnectionCtx_js_1 = require("../../../../core/hooks/others/useWalletConnectionCtx.js");
// import type { WalletConfig } from "../../../../core/types/wallets.js";
const wallet_hooks_js_1 = require("../../../../core/hooks/wallets/wallet-hooks.js");
const wallet_ui_states_provider_js_1 = require("../../../providers/wallet-ui-states-provider.js");
const embeddedWalletId = "embedded";
exports.ScreenSetupContext = (0, react_1.createContext)(undefined);
/**
 * @internal
 */
function useSetupScreen() {
    const wallets = (0, useWalletConnectionCtx_js_1.useWalletConnectionCtx)().wallets;
    const modalConfig = (0, react_1.useContext)(wallet_ui_states_provider_js_1.ModalConfigCtx);
    let initialScreen = constants_js_1.reservedScreens.main;
    const socialLogin = wallets.find((w) => w.id === embeddedWalletId);
    if (wallets.length === 1 && wallets[0]) {
        initialScreen = wallets[0];
    }
    else if (modalConfig.modalSize === "wide" &&
        !modalConfig.welcomeScreen &&
        socialLogin) {
        initialScreen = socialLogin;
    }
    const [screen, setScreen] = (0, react_1.useState)(initialScreen);
    const prevInitialScreen = (0, react_1.useRef)(initialScreen);
    const activeAccount = (0, wallet_hooks_js_1.useActiveAccount)();
    // when the initial screen changes, reset the screen to the initial screen ( if the modal is closed )
    (0, react_1.useEffect)(() => {
        if (initialScreen !== prevInitialScreen.current) {
            prevInitialScreen.current = initialScreen;
            setScreen(initialScreen);
        }
    }, [initialScreen]);
    // if on signature screen and suddenly the wallet is disconnected, go back to the main screen
    (0, react_1.useEffect)(() => {
        if (!activeAccount && screen === constants_js_1.reservedScreens.signIn) {
            setScreen(constants_js_1.reservedScreens.main);
        }
    }, [activeAccount, screen]);
    return {
        screen,
        setScreen,
        initialScreen,
    };
}
exports.useSetupScreen = useSetupScreen;
/**
 * @internal
 */
function useScreenContext() {
    const ctx = (0, react_1.useContext)(exports.ScreenSetupContext);
    if (!ctx) {
        throw new Error("useScreenContext must be used within a <ScreenProvider />");
    }
    return ctx;
}
exports.useScreenContext = useScreenContext;
//# sourceMappingURL=screen.js.map