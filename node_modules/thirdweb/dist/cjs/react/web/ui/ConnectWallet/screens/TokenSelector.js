"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatTokenBalance = exports.TokenSelector = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_icons_1 = require("@radix-ui/react-icons");
const react_1 = require("react");
const useWalletBalance_js_1 = require("../../../../core/hooks/others/useWalletBalance.js");
const wallet_hooks_js_1 = require("../../../../core/hooks/wallets/wallet-hooks.js");
const Skeleton_js_1 = require("../../components/Skeleton.js");
const Spacer_js_1 = require("../../components/Spacer.js");
const Spinner_js_1 = require("../../components/Spinner.js");
const basic_js_1 = require("../../components/basic.js");
const buttons_js_1 = require("../../components/buttons.js");
const formElements_js_1 = require("../../components/formElements.js");
const CustomThemeProvider_js_1 = require("../../design-system/CustomThemeProvider.js");
const index_js_1 = require("../../design-system/index.js");
const text_js_1 = require("../../components/text.js");
const styled_1 = require("@emotion/styled");
const nativeToken_js_1 = require("./nativeToken.js");
const TokenIcon_js_1 = require("../../components/TokenIcon.js");
const useWalletConnectionCtx_js_1 = require("../../../../core/hooks/others/useWalletConnectionCtx.js");
/**
 *
 * @internal
 */
function TokenSelector(props) {
    const [input, setInput] = (0, react_1.useState)("");
    const activeAccount = (0, wallet_hooks_js_1.useActiveAccount)();
    const chain = props.chain;
    // if input is undefined, it loads the native token
    // otherwise it loads the token with given address
    const tokenQuery = (0, useWalletBalance_js_1.useWalletBalance)({
        address: activeAccount?.address,
        chain: chain,
        tokenAddress: input,
    });
    const locale = (0, useWalletConnectionCtx_js_1.useWalletConnectionCtx)().connectLocale.sendFundsScreen;
    let tokenList = props.tokenList;
    if (tokenQuery.data && input) {
        tokenList = [
            {
                ...tokenQuery.data,
                icon: "",
                address: input,
            },
            ...tokenList,
        ];
    }
    const filteredList = input
        ? tokenList.filter((t) => {
            const inputStr = input.toLowerCase();
            return (t.name.toLowerCase().includes(inputStr) ||
                t.symbol.toLowerCase().includes(inputStr) ||
                t.address.includes(input));
        })
        : tokenList;
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { animate: "fadein", style: {
            minHeight: "300px",
        }, children: [(0, jsx_runtime_1.jsxs)(basic_js_1.Container, { p: "lg", children: [(0, jsx_runtime_1.jsx)(basic_js_1.ModalHeader, { onBack: props.onBack, title: locale.selectTokenTitle }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xl" }), (0, jsx_runtime_1.jsx)(formElements_js_1.Input, { placeholder: locale.searchToken, variant: "outline", value: input, onChange: (e) => {
                            setInput(e.target.value);
                        } })] }), (filteredList.length > 0 || !input) && ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "xs", p: "md", scrollY: true, style: {
                    paddingTop: 0,
                    paddingBottom: index_js_1.spacing.lg,
                    maxHeight: "400px",
                }, children: [!input && ((0, jsx_runtime_1.jsx)(SelectTokenButton, { onClick: () => {
                            props.onTokenSelect(nativeToken_js_1.NATIVE_TOKEN);
                        }, chain: props.chain, token: nativeToken_js_1.NATIVE_TOKEN })), filteredList.map((token) => {
                        return ((0, jsx_runtime_1.jsx)(SelectTokenButton, { onClick: () => props.onTokenSelect(token), token: token, chain: props.chain }, token.address));
                    })] })), filteredList.length === 0 && tokenQuery.isLoading && ((0, jsx_runtime_1.jsx)(basic_js_1.Container, { animate: "fadein", p: "lg", flex: "column", gap: "md", center: "both", style: {
                    minHeight: "200px",
                    paddingTop: 0,
                }, color: "secondaryText", children: (0, jsx_runtime_1.jsx)(Spinner_js_1.Spinner, { size: "lg", color: "accentText" }) })), filteredList.length === 0 && !tokenQuery.isLoading && input && ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { animate: "fadein", p: "lg", flex: "column", gap: "md", center: "both", style: {
                    minHeight: "200px",
                    paddingTop: 0,
                }, color: "secondaryText", children: [(0, jsx_runtime_1.jsx)(react_icons_1.CrossCircledIcon, { width: index_js_1.iconSize.lg, height: index_js_1.iconSize.lg }), locale.noTokensFound] }))] }));
}
exports.TokenSelector = TokenSelector;
function SelectTokenButton(props) {
    const account = (0, wallet_hooks_js_1.useActiveAccount)();
    const tokenBalanceQuery = (0, useWalletBalance_js_1.useWalletBalance)({
        address: account?.address,
        chain: props.chain,
        tokenAddress: (0, nativeToken_js_1.isNativeToken)(props.token) ? undefined : props.token.address,
    });
    const tokenName = (0, nativeToken_js_1.isNativeToken)(props.token)
        ? tokenBalanceQuery.data?.name
        : props.token.name;
    return ((0, jsx_runtime_1.jsxs)(SelectTokenBtn, { fullWidth: true, variant: "secondary", onClick: props.onClick, children: [(0, jsx_runtime_1.jsx)(TokenIcon_js_1.TokenIcon, { token: props.token, chain: props.chain, size: "lg" }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "xs", children: [tokenName ? ((0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", color: "primaryText", children: tokenName })) : ((0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { height: index_js_1.fontSize.md, width: "150px" })), tokenBalanceQuery.data ? ((0, jsx_runtime_1.jsxs)(text_js_1.Text, { size: "xs", children: [" ", formatTokenBalance(tokenBalanceQuery.data)] })) : ((0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { height: index_js_1.fontSize.xs, width: "100px" }))] })] }));
}
const SelectTokenBtn = /* @__PURE__ */ (0, styled_1.default)(buttons_js_1.Button)(() => {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    return {
        background: "transparent",
        justifyContent: "flex-start",
        gap: index_js_1.spacing.sm,
        padding: index_js_1.spacing.sm,
        "&:hover": {
            background: theme.colors.secondaryButtonBg,
            transform: "scale(1.01)",
        },
        transition: "background 200ms ease, transform 150ms ease",
    };
});
/**
 * @internal
 * @param balanceData
 * @returns
 */
function formatTokenBalance(balanceData, showSymbol = true) {
    return (Number(balanceData.displayValue).toFixed(3) +
        (showSymbol ? " " + balanceData.symbol : ""));
}
exports.formatTokenBalance = formatTokenBalance;
//# sourceMappingURL=TokenSelector.js.map