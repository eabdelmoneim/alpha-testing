"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwapConfirmationScreen = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("@emotion/react");
const react_icons_1 = require("@radix-ui/react-icons");
const react_2 = require("react");
const wait_for_tx_receipt_js_1 = require("../../../../../../../transaction/actions/wait-for-tx-receipt.js");
const formatNumber_js_1 = require("../../../../../../../utils/formatNumber.js");
const useSendTransaction_js_1 = require("../../../../../../core/hooks/contract/useSendTransaction.js");
const useChainQuery_js_1 = require("../../../../../../core/hooks/others/useChainQuery.js");
const useBuyWithCryptoStatus_js_1 = require("../../../../../../core/hooks/pay/useBuyWithCryptoStatus.js");
const addresses_js_1 = require("../../../../../../core/utils/addresses.js");
const Skeleton_js_1 = require("../../../../components/Skeleton.js");
const Spacer_js_1 = require("../../../../components/Spacer.js");
const Spinner_js_1 = require("../../../../components/Spinner.js");
const TokenIcon_js_1 = require("../../../../components/TokenIcon.js");
const basic_js_1 = require("../../../../components/basic.js");
const buttons_js_1 = require("../../../../components/buttons.js");
const text_js_1 = require("../../../../components/text.js");
const CustomThemeProvider_js_1 = require("../../../../design-system/CustomThemeProvider.js");
const elements_js_1 = require("../../../../design-system/elements.js");
const index_js_1 = require("../../../../design-system/index.js");
const AccentFailIcon_js_1 = require("../../../icons/AccentFailIcon.js");
const nativeToken_js_1 = require("../../nativeToken.js");
const Fees_js_1 = require("./Fees.js");
const formatSeconds_js_1 = require("./formatSeconds.js");
const pendingSwapTx_js_1 = require("./pendingSwapTx.js");
/**
 * @internal
 */
function SwapConfirmationScreen(props) {
    const sendTransactionMutation = (0, useSendTransaction_js_1.useSendTransactionCore)();
    const [swapTx, setSwapTx] = (0, react_2.useState)();
    const isApprovalRequired = props.buyWithCryptoQuote.approval !== undefined;
    const [step, setStep] = (0, react_2.useState)(isApprovalRequired ? "approval" : "swap");
    const [status, setStatus] = (0, react_2.useState)("idle");
    const fromChain = (0, useChainQuery_js_1.useChainQuery)(props.fromChain);
    const toChain = (0, useChainQuery_js_1.useChainQuery)(props.toChain);
    const fromTokenSymbol = (0, nativeToken_js_1.isNativeToken)(props.fromToken)
        ? fromChain.data?.nativeCurrency?.symbol
        : props.fromToken?.symbol;
    const toTokenSymbol = (0, nativeToken_js_1.isNativeToken)(props.toToken)
        ? toChain.data?.nativeCurrency?.symbol
        : props.toToken?.symbol;
    if (swapTx) {
        return ((0, jsx_runtime_1.jsx)(WaitingForConfirmation, { onBack: () => {
                props.onBack();
            }, onViewPendingTx: props.onViewPendingTx, destinationChain: props.toChain, destinationToken: props.toToken, sourceAmount: `${(0, formatNumber_js_1.formatNumber)(Number(props.fromAmount), 4)} ${fromTokenSymbol || ""}`, destinationAmount: `${(0, formatNumber_js_1.formatNumber)(Number(props.toAmount), 4)} ${toTokenSymbol || ""}`, swapTx: swapTx, client: props.client }));
    }
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { p: "lg", children: [(0, jsx_runtime_1.jsx)(basic_js_1.ModalHeader, { title: "Confirm Buy", onBack: props.onBack }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), (0, jsx_runtime_1.jsx)(ConfirmItem, { label: "Receive", children: (0, jsx_runtime_1.jsx)(TokenInfo, { chain: props.toChain, amount: String((0, formatNumber_js_1.formatNumber)(Number(props.toAmount), 4)), symbol: toTokenSymbol || "", token: props.toToken, client: props.client }) }), (0, jsx_runtime_1.jsx)(ConfirmItem, { label: "Pay", children: (0, jsx_runtime_1.jsx)(TokenInfo, { chain: props.fromChain, amount: String((0, formatNumber_js_1.formatNumber)(Number(props.fromAmount), 4)), symbol: fromTokenSymbol || "", token: props.fromToken, client: props.client }) }), (0, jsx_runtime_1.jsx)(ConfirmItem, { label: "Fees", children: (0, jsx_runtime_1.jsx)(Fees_js_1.SwapFees, { quote: props.buyWithCryptoQuote, align: "right" }) }), (0, jsx_runtime_1.jsx)(ConfirmItem, { label: "Send to", children: (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "primaryText", children: (0, addresses_js_1.shortenString)(props.account.address, false) }) }), (0, jsx_runtime_1.jsx)(ConfirmItem, { label: "Time", children: (0, jsx_runtime_1.jsxs)(text_js_1.Text, { color: "primaryText", children: ["~", (0, formatSeconds_js_1.formatSeconds)(props.buyWithCryptoQuote.swapDetails.estimated.durationSeconds || 0)] }) }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), isApprovalRequired && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { gap: "sm", flex: "row", style: {
                            justifyContent: "space-between",
                        }, center: "y", color: "accentText", children: [(0, jsx_runtime_1.jsx)(Step, { isDone: step === "swap", isActive: step === "approval", label: step === "approval" ? "Approve" : "Approved" }), (0, jsx_runtime_1.jsx)(ConnectorLine, {}), (0, jsx_runtime_1.jsx)(Step, { isDone: false, label: "Confirm", isActive: step === "swap" })] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" })] })), status === "error" && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", gap: "xs", center: "y", color: "danger", children: [(0, jsx_runtime_1.jsx)(react_icons_1.CrossCircledIcon, { width: index_js_1.iconSize.sm, height: index_js_1.iconSize.sm }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "danger", size: "sm", children: step === "approval" ? "Failed to Approve" : "Failed to Confirm" })] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" })] })), (0, jsx_runtime_1.jsxs)(buttons_js_1.Button, { variant: "accent", fullWidth: true, disabled: status === "pending", onClick: async () => {
                    if (step === "approval" && props.buyWithCryptoQuote.approval) {
                        try {
                            setStatus("pending");
                            const tx = await sendTransactionMutation.mutateAsync(props.buyWithCryptoQuote.approval);
                            await (0, wait_for_tx_receipt_js_1.waitForReceipt)({ ...tx, maxBlocksWaitTime: 50 });
                            props.onQuoteFinalized(props.buyWithCryptoQuote);
                            setStep("swap");
                            setStatus("idle");
                        }
                        catch (e) {
                            console.error(e);
                            setStatus("error");
                        }
                    }
                    if (step === "swap") {
                        setStatus("pending");
                        try {
                            const _swapTx = await sendTransactionMutation.mutateAsync(props.buyWithCryptoQuote.transactionRequest);
                            await (0, wait_for_tx_receipt_js_1.waitForReceipt)({ ..._swapTx, maxBlocksWaitTime: 50 });
                            props.onQuoteFinalized(props.buyWithCryptoQuote);
                            // these will be defined by this time
                            if (fromTokenSymbol && toTokenSymbol && fromChain.data) {
                                (0, pendingSwapTx_js_1.addPendingSwapTransaction)(props.client, {
                                    source: {
                                        symbol: fromTokenSymbol,
                                        value: props.fromAmount,
                                        chainId: props.fromChain.id,
                                    },
                                    destination: {
                                        symbol: toTokenSymbol,
                                        value: props.toAmount,
                                        chainId: props.toChain.id,
                                    },
                                    status: "PENDING",
                                    transactionHash: _swapTx.transactionHash, // ?? _swapTx.userOpHash,
                                });
                            }
                            setSwapTx({
                                transactionHash: _swapTx.transactionHash, // ?? _swapTx.userOpHash,
                                client: props.client,
                            });
                        }
                        catch (e) {
                            console.error(e);
                            setStatus("error");
                        }
                    }
                }, gap: "xs", children: [step === "approval" ? "Approve" : "Confirm", status === "pending" && (0, jsx_runtime_1.jsx)(Spinner_js_1.Spinner, { size: "sm", color: "accentButtonText" })] })] }));
}
exports.SwapConfirmationScreen = SwapConfirmationScreen;
const ConnectorLine = /* @__PURE__ */ (0, elements_js_1.StyledDiv)(() => {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    return {
        height: "4px",
        background: theme.colors.borderColor,
        flex: 1,
    };
});
function Step(props) {
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", center: "y", gap: "xs", style: {
            fontSize: index_js_1.fontSize.sm,
        }, color: props.isDone
            ? "success"
            : props.isActive
                ? "accentText"
                : "secondaryText", children: [(0, jsx_runtime_1.jsx)(Circle, { children: props.isDone ? ((0, jsx_runtime_1.jsx)(react_icons_1.CheckIcon, { width: index_js_1.iconSize.sm, height: index_js_1.iconSize.sm })) : ((0, jsx_runtime_1.jsx)(PulsingDot, { "data-active": props.isActive })) }), props.label] }));
}
const pulseAnimation = (0, react_1.keyframes) `
0% {
  opacity: 1;
  transform: scale(0.5);
}
100% {
  opacity: 0;
  transform: scale(1.5);
}
`;
const PulsingDot = /* @__PURE__ */ (0, elements_js_1.StyledDiv)(() => {
    return {
        background: "currentColor",
        width: "9px",
        height: "9px",
        borderRadius: "50%",
        '&[data-active="true"]': {
            animation: `${pulseAnimation} 1s infinite`,
        },
    };
});
const Circle = /* @__PURE__ */ (0, elements_js_1.StyledDiv)(() => {
    return {
        border: "1px solid currentColor",
        width: "20px",
        height: "20px",
        borderRadius: "50%",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
    };
});
function TokenInfo(props) {
    const chainQuery = (0, useChainQuery_js_1.useChainQuery)(props.chain);
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "xxs", style: {
            alignItems: "flex-end",
        }, children: [(0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", center: "y", gap: "xs", children: [(0, jsx_runtime_1.jsxs)(text_js_1.Text, { color: "primaryText", size: "md", children: [props.amount, " ", props.symbol] }), (0, jsx_runtime_1.jsx)(TokenIcon_js_1.TokenIcon, { token: props.token, chain: props.chain, size: "sm", client: props.client })] }), chainQuery.data ? ((0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", children: chainQuery.data.name })) : ((0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { width: "100px", height: index_js_1.fontSize.sm }))] }));
}
function ConfirmItem(props) {
    return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", gap: "md", py: "md", style: {
                    justifyContent: "space-between",
                }, children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "md", color: "secondaryText", children: props.label }), props.children] }), (0, jsx_runtime_1.jsx)(basic_js_1.Line, {})] }));
}
function WaitingForConfirmation(props) {
    const swapStatus = (0, useBuyWithCryptoStatus_js_1.useBuyWithCryptoStatus)(props.swapTx);
    const isSuccess = swapStatus.data?.status === "COMPLETED";
    const isFailed = swapStatus.data?.status === "FAILED";
    // const isPending = !isSuccess && !isFailed;
    return ((0, jsx_runtime_1.jsx)(basic_js_1.Container, { animate: "fadein", children: (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { p: "lg", children: [(0, jsx_runtime_1.jsx)(basic_js_1.ModalHeader, { title: "Buy", onBack: props.onBack }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", animate: "fadein", center: "both", color: isSuccess ? "success" : isFailed ? "danger" : "accentText", children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xxl" }), isSuccess ? ((0, jsx_runtime_1.jsx)(react_icons_1.CheckCircledIcon, { width: index_js_1.iconSize["4xl"], height: index_js_1.iconSize["4xl"] })) : isFailed ? ((0, jsx_runtime_1.jsx)(AccentFailIcon_js_1.AccentFailIcon, { size: index_js_1.iconSize["4xl"] })) : ((0, jsx_runtime_1.jsxs)("div", { style: {
                                position: "relative",
                            }, children: [(0, jsx_runtime_1.jsx)(Spinner_js_1.Spinner, { size: "4xl", color: "accentText" }), (0, jsx_runtime_1.jsx)("div", { style: {
                                        position: "absolute",
                                        top: "50%",
                                        left: "50%",
                                        transform: "translate(-50%, -50%)",
                                    }, children: (0, jsx_runtime_1.jsx)(TokenIcon_js_1.TokenIcon, { chain: props.destinationChain, token: props.destinationToken, size: "xxl", client: props.client }) })] })), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xxl" }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "primaryText", size: "lg", children: isSuccess
                                ? "Buy Success"
                                : isFailed
                                    ? "Transaction Failed"
                                    : "Buy Pending" }), !isFailed && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsxs)(text_js_1.Text, { size: "md", inline: true, children: [" ", isSuccess ? "Bought" : "Buy", " "] }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "md", color: "primaryText", inline: true, children: props.destinationAmount }), (0, jsx_runtime_1.jsxs)(text_js_1.Text, { size: "md", inline: true, children: [" ", "for", " "] }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "md", color: "primaryText", inline: true, children: props.sourceAmount })] })] })), isFailed && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsxs)(text_js_1.Text, { size: "sm", children: ["Your transaction ", `couldn't`, " be processed"] })] }))] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xl" }), !isFailed && ((0, jsx_runtime_1.jsx)(buttons_js_1.Button, { variant: "accent", fullWidth: true, onClick: props.onViewPendingTx, children: "View Transactions" })), isFailed && ((0, jsx_runtime_1.jsx)(buttons_js_1.Button, { variant: "accent", fullWidth: true, onClick: props.onBack, children: "Try Again" }))] }) }));
}
//# sourceMappingURL=ConfirmationScreen.js.map