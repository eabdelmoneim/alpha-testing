"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectModalContent = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const wallet_ui_states_provider_js_1 = require("../../../providers/wallet-ui-states-provider.js");
const react_1 = require("react");
const constants_js_1 = require("../constants.js");
const screen_js_1 = require("./screen.js");
const StartScreen_js_1 = require("../screens/StartScreen.js");
const WalletSelector_js_1 = require("../WalletSelector.js");
const ConnectModalSkeleton_js_1 = require("./ConnectModalSkeleton.js");
const wallet_hooks_js_1 = require("../../../../core/hooks/wallets/wallet-hooks.js");
const useWalletConnectionCtx_js_1 = require("../../../../core/hooks/others/useWalletConnectionCtx.js");
const AnyWalletConnectUI_js_1 = require("./AnyWalletConnectUI.js");
const SmartWalletConnectUI_js_1 = require("./SmartWalletConnectUI.js");
const LoadingScreen_js_1 = require("../../../wallets/shared/LoadingScreen.js");
const AllWalletsUI = /* @__PURE__ */ (0, react_1.lazy)(() => Promise.resolve().then(() => require("./AllWalletsUI.js")));
/**
 * @internal
 */
const ConnectModalContent = (props) => {
    const { onShow, onClose } = props;
    const { screen, setScreen, initialScreen } = props.screenSetup;
    const { wallets, accountAbstraction } = (0, useWalletConnectionCtx_js_1.useWalletConnectionCtx)();
    // const disconnect = useDisconnect();
    const modalConfig = (0, react_1.useContext)(wallet_ui_states_provider_js_1.ModalConfigCtx);
    // const setModalConfig = useContext(SetModalConfigCtx);
    // const activeWalletConnectionStatus = useActiveWalletConnectionStatus();
    // const activeWallet = useActiveWallet();
    const { connect } = (0, wallet_hooks_js_1.useConnect)();
    const title = modalConfig.title;
    const modalSize = modalConfig.modalSize;
    const onConnect = modalConfig.onConnect;
    const isWideModal = modalSize === "wide";
    // const { user } = useUser();
    // const authConfig = useThirdwebAuthContext();
    const handleConnected = (0, react_1.useCallback)((wallet) => {
        connect(wallet);
        if (onConnect) {
            onConnect(wallet);
        }
        const requiresSignIn = false;
        // const requiresSignIn = modalConfig.auth?.loginOptional
        //   ? false
        //   : !!authConfig?.authUrl && !user?.address;
        (0, constants_js_1.onModalUnmount)(() => {
            onShow();
        });
        // show sign in screen if required
        if (requiresSignIn) {
            setScreen(constants_js_1.reservedScreens.signIn);
        }
        // close modal and reset screen
        else {
            onClose();
        }
    }, [
        // modalConfig.auth?.loginOptional,
        // authConfig?.authUrl,
        // user?.address,
        setScreen,
        onShow,
        onClose,
        onConnect,
        connect,
    ]);
    const handleBack = (0, react_1.useCallback)(() => {
        setScreen(initialScreen);
        // if (connectionStatus === "connecting") {
        //   disconnect();
        // }
    }, [
        setScreen,
        initialScreen,
        // connectionStatus,
        // disconnect
    ]);
    // const address = useActiveWalletAddress();
    // const { setConnectionStatus, createWalletInstance, activeWallet } =
    //   useWalletContext();
    const walletList = ((0, jsx_runtime_1.jsx)(WalletSelector_js_1.WalletSelector, { title: title, wallets: wallets, onGetStarted: () => {
            setScreen(constants_js_1.reservedScreens.getStarted);
        }, selectWallet: setScreen, onShowAll: () => {
            setScreen(constants_js_1.reservedScreens.showAll);
        }, done: handleConnected, goBack: wallets.length > 1 ? handleBack : undefined }));
    const showAll = ((0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)(LoadingScreen_js_1.LoadingScreen, {}), children: (0, jsx_runtime_1.jsx)(AllWalletsUI, { onBack: handleBack, onSelect: setScreen }) }));
    const getStarted = (0, jsx_runtime_1.jsx)(StartScreen_js_1.StartScreen, {});
    const goBack = wallets.length > 1 ? handleBack : undefined;
    const getWalletUI = (wallet) => {
        if (accountAbstraction) {
            return ((0, jsx_runtime_1.jsx)(SmartWalletConnectUI_js_1.SmartConnectUI, { accountAbstraction: accountAbstraction, done: (smartWallet) => {
                    handleConnected(smartWallet);
                }, personalWallet: wallet, onBack: goBack }, wallet.id));
        }
        return ((0, jsx_runtime_1.jsx)(AnyWalletConnectUI_js_1.AnyWalletConnectUI, { wallet: wallet, onBack: goBack, done: () => {
                handleConnected(wallet);
            } }, wallet.id));
    };
    // const signatureScreen = (
    //   <SignatureScreen
    //     onDone={onClose}
    //     modalSize={modalSize}
    //     termsOfServiceUrl={modalConfig.termsOfServiceUrl}
    //     privacyPolicyUrl={modalConfig.privacyPolicyUrl}
    //   />
    // );
    return ((0, jsx_runtime_1.jsx)(screen_js_1.ScreenSetupContext.Provider, { value: props.screenSetup, children: isWideModal ? ((0, jsx_runtime_1.jsx)(ConnectModalSkeleton_js_1.ConnectModalWideLayout, { left: walletList, right: (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [screen === constants_js_1.reservedScreens.main && (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: getStarted }), screen === constants_js_1.reservedScreens.getStarted && getStarted, screen === constants_js_1.reservedScreens.showAll && showAll, typeof screen !== "string" && getWalletUI(screen)] }) })) : ((0, jsx_runtime_1.jsxs)(ConnectModalSkeleton_js_1.ConnectModalCompactLayout, { children: [screen === constants_js_1.reservedScreens.main && walletList, screen === constants_js_1.reservedScreens.getStarted && getStarted, screen === constants_js_1.reservedScreens.showAll && showAll, typeof screen !== "string" && getWalletUI(screen)] })) }));
};
exports.ConnectModalContent = ConnectModalContent;
//# sourceMappingURL=ConnectModalContent.js.map