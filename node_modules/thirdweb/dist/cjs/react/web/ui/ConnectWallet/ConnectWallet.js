"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectButton = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const styled_1 = require("@emotion/styled");
const react_1 = require("react");
const useAutoConnect_js_1 = require("../../../core/hooks/connection/useAutoConnect.js");
const wallet_hooks_js_1 = require("../../../core/hooks/wallets/wallet-hooks.js");
const wallet_connection_js_1 = require("../../../core/providers/wallet-connection.js");
const wallet_ui_states_provider_js_1 = require("../../providers/wallet-ui-states-provider.js");
const canFitWideModal_js_1 = require("../../utils/canFitWideModal.js");
const defaultWallets_js_1 = require("../../wallets/defaultWallets.js");
const Spinner_js_1 = require("../components/Spinner.js");
const buttons_js_1 = require("../components/buttons.js");
const animations_js_1 = require("../design-system/animations.js");
const Details_js_1 = require("./Details.js");
const ConnectModal_js_1 = require("./Modal/ConnectModal.js");
const defaultTokens_js_1 = require("./defaultTokens.js");
const getConnectLocale_js_1 = require("./locale/getConnectLocale.js");
const TW_CONNECT_WALLET = "tw-connect-wallet";
/**
 * A component that allows the user to connect their wallet.
 * It renders a button which when clicked opens a modal to allow users to connect to wallets specified in the `ThirdwebProvider`'s `wallets` prop.
 * @example
 * ```tsx
 * <ConnectButton
 *    client={client}
 * />
 * ```
 * @param props
 * Props for the `ConnectButton` component
 *
 * Refer to [ConnectButtonProps](https://portal.thirdweb.com/references/typescript/v5/ConnectButtonProps) to see the available props.
 * @component
 */
function ConnectButton(props) {
    const wallets = props.wallets || (0, defaultWallets_js_1.getDefaultWallets)();
    const localeQuery = (0, getConnectLocale_js_1.useConnectLocale)(props.locale || "en_US");
    const autoConnectComp = props.autoConnect !== false && ((0, jsx_runtime_1.jsx)(useAutoConnect_js_1.AutoConnect, { appMetadata: props.appMetadata, client: props.client, wallets: wallets, timeout: typeof props.autoConnect === "boolean"
            ? undefined
            : props.autoConnect?.timeout, accountAbstraction: props.accountAbstraction }));
    if (!localeQuery.data) {
        return ((0, jsx_runtime_1.jsxs)(AnimatedButton, { disabled: true, className: `${props.connectButton?.className || ""} ${TW_CONNECT_WALLET}`, variant: "primary", type: "button", style: {
                minWidth: "140px",
                ...props.connectButton?.style,
            }, children: [autoConnectComp, (0, jsx_runtime_1.jsx)(Spinner_js_1.Spinner, { size: "sm", color: "primaryButtonText" })] }));
    }
    return ((0, jsx_runtime_1.jsx)(wallet_connection_js_1.ConnectUIContext.Provider, { value: {
            appMetadata: props.appMetadata,
            client: props.client,
            wallets: wallets,
            locale: props.locale || "en_US",
            connectLocale: localeQuery.data,
            chain: props.chain,
            chains: props.chains,
            walletConnect: props.walletConnect,
            accountAbstraction: props.accountAbstraction,
            recommendedWallets: props.recommendedWallets,
            showAllWallets: props.showAllWallets,
            isEmbed: false,
            connectModal: {
                ...props.connectModal,
                size: !(0, canFitWideModal_js_1.canFitWideModal)() || wallets.length === 1
                    ? "compact"
                    : props.connectModal?.size || "wide",
            },
            onConnect: props.onConnect,
        }, children: (0, jsx_runtime_1.jsxs)(wallet_ui_states_provider_js_1.WalletUIStatesProvider, { theme: props.theme, children: [(0, jsx_runtime_1.jsx)(ConnectButtonInner, { ...props, connectLocale: localeQuery.data }), (0, jsx_runtime_1.jsx)(ConnectModal_js_1.default, {}), autoConnectComp] }) }));
}
exports.ConnectButton = ConnectButton;
function ConnectButtonInner(props) {
    const activeAccount = (0, wallet_hooks_js_1.useActiveAccount)();
    const theme = props.theme || "dark";
    const connectionStatus = (0, wallet_hooks_js_1.useActiveWalletConnectionStatus)();
    const locale = props.connectLocale;
    const isLoading = connectionStatus === "connecting";
    const connectButtonLabel = props.connectButton?.label || locale.defaultButtonTitle;
    const setIsWalletModalOpen = (0, wallet_ui_states_provider_js_1.useSetIsWalletModalOpen)();
    const supportedTokens = (0, react_1.useMemo)(() => {
        if (!props.supportedTokens) {
            return defaultTokens_js_1.defaultTokens;
        }
        const tokens = { ...defaultTokens_js_1.defaultTokens };
        for (const k in props.supportedTokens) {
            const key = Number(k);
            const tokenList = props.supportedTokens[key];
            if (tokenList) {
                tokens[key] = tokenList;
            }
        }
        return tokens;
    }, [props.supportedTokens]);
    if (!activeAccount) {
        // Connect Wallet button
        return ((0, jsx_runtime_1.jsx)(AnimatedButton, { disabled: isLoading, className: `${props.connectButton?.className || ""} ${TW_CONNECT_WALLET}`, "data-theme": theme, "data-is-loading": isLoading, variant: "primary", type: "button", style: {
                minWidth: "140px",
                ...props.connectButton?.style,
            }, "aria-label": connectionStatus === "connecting"
                ? locale.connecting
                : connectButtonLabel, onClick: () => {
                setIsWalletModalOpen(true);
            }, "data-test": "connect-wallet-button", children: isLoading ? ((0, jsx_runtime_1.jsx)(Spinner_js_1.Spinner, { size: "sm", color: "primaryButtonText" })) : (connectButtonLabel) }));
    }
    return ((0, jsx_runtime_1.jsx)(Details_js_1.ConnectedWalletDetails, { theme: theme, detailsButton: props.detailsButton, detailsModal: props.detailsModal, supportedTokens: supportedTokens, onDisconnect: () => {
            // no op
        }, chains: props?.chains || [], chain: props.chain, switchButton: props.switchButton }));
}
const AnimatedButton = /* @__PURE__ */ (0, styled_1.default)(buttons_js_1.Button)({
    animation: `${animations_js_1.fadeInAnimation} 300ms ease`,
});
//# sourceMappingURL=ConnectWallet.js.map