"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectButton = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const styled_1 = require("@emotion/styled");
const react_1 = require("react");
const Spinner_js_1 = require("../components/Spinner.js");
const buttons_js_1 = require("../components/buttons.js");
const CustomThemeProvider_js_1 = require("../design-system/CustomThemeProvider.js");
const animations_js_1 = require("../design-system/animations.js");
const Details_js_1 = require("./Details.js");
const defaultTokens_js_1 = require("./defaultTokens.js");
const wallet_hooks_js_1 = require("../../../core/hooks/wallets/wallet-hooks.js");
const wallet_ui_states_provider_js_1 = require("../../providers/wallet-ui-states-provider.js");
const canFitWideModal_js_1 = require("../../utils/canFitWideModal.js");
const wallet_connection_js_1 = require("../../../core/providers/wallet-connection.js");
const defaultWallets_js_1 = require("../../wallets/defaultWallets.js");
const useAutoConnect_js_1 = require("../../../core/hooks/connection/useAutoConnect.js");
const ConnectModal_js_1 = require("./Modal/ConnectModal.js");
const useWalletConnectionCtx_js_1 = require("../../../core/hooks/others/useWalletConnectionCtx.js");
const getConnectLocale_js_1 = require("./locale/getConnectLocale.js");
const TW_CONNECT_WALLET = "tw-connect-wallet";
/**
 * A component that allows the user to connect their wallet.
 * It renders a button which when clicked opens a modal to allow users to connect to wallets specified in the `ThirdwebProvider`'s `wallets` prop.
 * @example
 * ```tsx
 * <ConnectButton
 *    client={client}
 * />
 * ```
 * @param props
 * Props for the `ConnectButton` component
 *
 * Refer to [ConnectButtonProps](https://portal.thirdweb.com/references/typescript/v5/ConnectButtonProps) to see the available props.
 * @component
 */
function ConnectButton(props) {
    const wallets = props.wallets || (0, defaultWallets_js_1.getDefaultWallets)();
    const localeId = props.locale || "en_US";
    const [locale, setLocale] = (0, react_1.useState)();
    (0, react_1.useEffect)(() => {
        (0, getConnectLocale_js_1.getConnectLocale)(localeId).then(setLocale);
    }, [localeId]);
    const autoConnectComp = props.autoConnect !== false && ((0, jsx_runtime_1.jsx)(useAutoConnect_js_1.AutoConnect, { appMetadata: props.appMetadata, client: props.client, wallets: wallets, timeout: typeof props.autoConnect === "boolean"
            ? undefined
            : props.autoConnect?.timeout, accountAbstraction: props.accountAbstraction }));
    if (!locale) {
        return ((0, jsx_runtime_1.jsxs)(AnimatedButton, { disabled: true, className: `${props.connectButton?.className || ""} ${TW_CONNECT_WALLET}`, variant: "primary", type: "button", style: {
                minWidth: "140px",
                ...props.connectButton?.style,
            }, children: [autoConnectComp, (0, jsx_runtime_1.jsx)(Spinner_js_1.Spinner, { size: "sm", color: "primaryButtonText" })] }));
    }
    return ((0, jsx_runtime_1.jsx)(wallet_connection_js_1.WalletConnectionContext.Provider, { value: {
            appMetadata: props.appMetadata,
            client: props.client,
            wallets: wallets,
            locale: props.locale || "en_US",
            connectLocale: locale,
            chain: props.chain,
            chains: props.chains,
            walletConnect: props.walletConnect,
            accountAbstraction: props.accountAbstraction,
            recommendedWallets: props.recommendedWallets,
            showAllWallets: props.showAllWallets,
        }, children: (0, jsx_runtime_1.jsxs)(wallet_ui_states_provider_js_1.WalletUIStatesProvider, { theme: "dark", children: [(0, jsx_runtime_1.jsx)(ConnectButtonInner, { ...props, connectLocale: locale }), (0, jsx_runtime_1.jsx)(ConnectModal_js_1.default, {}), autoConnectComp] }) }));
}
exports.ConnectButton = ConnectButton;
function ConnectButtonInner(props) {
    const activeAccount = (0, wallet_hooks_js_1.useActiveAccount)();
    const activeWalletChain = (0, wallet_hooks_js_1.useActiveWalletChain)();
    const contextTheme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    const theme = props.theme || contextTheme || "dark";
    const connectionStatus = (0, wallet_hooks_js_1.useActiveWalletConnectionStatus)();
    const locale = props.connectLocale;
    const isLoading = connectionStatus === "connecting";
    const connectButtonLabel = props.connectButton?.label || locale.defaultButtonTitle;
    const setIsWalletModalOpen = (0, wallet_ui_states_provider_js_1.useSetIsWalletModalOpen)();
    const setModalConfig = (0, react_1.useContext)(wallet_ui_states_provider_js_1.SetModalConfigCtx);
    // const authConfig = useThirdwebAuthContext();
    // const { logout } = useLogout();
    // const isNetworkMismatch = useNetworkMismatch();
    const isNetworkMismatch = activeWalletChain?.id !== undefined &&
        props.chain?.id &&
        activeWalletChain.id !== props.chain.id;
    // const [showSignatureModal, setShowSignatureModal] = useState(false);
    // const address = useActiveWalletAddress();
    // const { user } = useUser();
    // const connectedButNotSignedIn =
    //   !!authConfig?.authUrl &&
    //   !!address &&
    //   (!user?.address || address !== user?.address);
    // const requiresSignIn = props.auth?.loginOptional
    //   ? false
    //   : connectedButNotSignedIn;
    const supportedTokens = (0, react_1.useMemo)(() => {
        if (!props.supportedTokens) {
            return defaultTokens_js_1.defaultTokens;
        }
        const tokens = { ...defaultTokens_js_1.defaultTokens };
        for (const k in props.supportedTokens) {
            const key = Number(k);
            const tokenList = props.supportedTokens[key];
            if (tokenList) {
                tokens[key] = tokenList;
            }
        }
        return tokens;
    }, [props.supportedTokens]);
    // if wallet gets disconnected, close the signature modal
    // useEffect(() => {
    //   if (!activeWallet) {
    //     setShowSignatureModal(false);
    //   }
    // }, [activeWallet]);
    const wallets = props.wallets || (0, defaultWallets_js_1.getDefaultWallets)();
    return ((0, jsx_runtime_1.jsx)(CustomThemeProvider_js_1.CustomThemeProvider, { theme: theme, children: (() => {
            // wallet is not connected
            if (!activeAccount) {
                // Connect Wallet button
                return ((0, jsx_runtime_1.jsx)(AnimatedButton, { disabled: isLoading, className: `${props.connectButton?.className || ""} ${TW_CONNECT_WALLET}`, "data-theme": theme, "data-is-loading": isLoading, variant: "primary", type: "button", style: {
                        minWidth: "140px",
                        ...props.connectButton?.style,
                    }, "aria-label": connectionStatus === "connecting"
                        ? locale.connecting
                        : connectButtonLabel, onClick: () => {
                        let modalSize = props.connectModal?.size || "wide";
                        if (!(0, canFitWideModal_js_1.canFitWideModal)() || wallets.length === 1) {
                            modalSize = "compact";
                        }
                        setModalConfig({
                            title: props.connectModal?.title || locale.defaultModalTitle,
                            theme,
                            data: undefined,
                            modalSize,
                            termsOfServiceUrl: props.connectModal?.termsOfServiceUrl,
                            privacyPolicyUrl: props.connectModal?.privacyPolicyUrl,
                            welcomeScreen: props.connectModal?.welcomeScreen,
                            titleIconUrl: props.connectModal?.titleIcon,
                            // auth: props.auth,
                            onConnect: props.onConnect,
                            chain: props.chain ? props.chain : undefined,
                            chains: props.chains,
                            showThirdwebBranding: props.connectModal?.showThirdwebBranding,
                        });
                        setIsWalletModalOpen(true);
                    }, "data-test": "connect-wallet-button", children: isLoading ? ((0, jsx_runtime_1.jsx)(Spinner_js_1.Spinner, { size: "sm", color: "primaryButtonText" })) : (connectButtonLabel) }));
            }
            // switch network button
            if (props.chain && isNetworkMismatch) {
                return ((0, jsx_runtime_1.jsx)(SwitchNetworkButton, { style: props.switchButton?.style, className: props.switchButton?.className, switchNetworkBtnTitle: props.switchButton?.label, targetChain: props.chain }));
            }
            // sign in button
            // else if (requiresSignIn) {
            //   return (
            //     <Button
            //       variant="primary"
            //       onClick={() => {
            //         if (activeWallet) {
            //           setShowSignatureModal(true);
            //         }
            //       }}
            //       data-theme={theme}
            //       className={`${TW_CONNECT_WALLET}--sign-in ${
            //         props.className || ""
            //       }`}
            //       style={{
            //         minWidth: "140px",
            //         ...props.style,
            //       }}
            //       data-test="sign-in-button"
            //     >
            //       <Container flex="row" center="y" gap="sm">
            //         <LockIcon size={iconSize.sm} />
            //         <span> {locale.connectWallet.signIn} </span>
            //       </Container>
            //     </Button>
            //   );
            // }
            // wallet details button
            return ((0, jsx_runtime_1.jsx)(Details_js_1.ConnectedWalletDetails, { theme: theme, detailsButton: props.detailsButton, detailsModal: props.detailsModal, supportedTokens: supportedTokens, onDisconnect: () => {
                    // if (authConfig?.authUrl) {
                    //   logout();
                    //   props?.auth?.onLogout?.();
                    // }
                }, chains: props?.chains || [] }));
        })() }));
}
/**
 * @internal
 */
function SwitchNetworkButton(props) {
    const switchChain = (0, wallet_hooks_js_1.useSwitchActiveWalletChain)();
    const [switching, setSwitching] = (0, react_1.useState)(false);
    const locale = (0, useWalletConnectionCtx_js_1.useWalletConnectionCtx)().connectLocale;
    const switchNetworkBtnTitle = props.switchNetworkBtnTitle ?? locale.switchNetwork;
    return ((0, jsx_runtime_1.jsx)(AnimatedButton, { className: `${TW_CONNECT_WALLET}--switch-network ${props.className || ""}`, variant: "primary", type: "button", "data-is-loading": switching, "data-test": "switch-network-button", disabled: switching, onClick: async () => {
            setSwitching(true);
            try {
                await switchChain(props.targetChain);
            }
            catch (e) {
                console.error(e);
            }
            setSwitching(false);
        }, style: {
            minWidth: "140px",
            ...props.style,
        }, "aria-label": switching ? locale.switchingNetwork : undefined, children: switching ? ((0, jsx_runtime_1.jsx)(Spinner_js_1.Spinner, { size: "sm", color: "primaryButtonText" })) : (switchNetworkBtnTitle) }));
}
const AnimatedButton = /* @__PURE__ */ (0, styled_1.default)(buttons_js_1.Button)({
    animation: `${animations_js_1.fadeInAnimation} 300ms ease`,
});
//# sourceMappingURL=ConnectWallet.js.map