"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuyTokenInput = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const basic_js_1 = require("../../../../components/basic.js");
const formElements_js_1 = require("../../../../components/formElements.js");
const Skeleton_js_1 = require("../../../../components/Skeleton.js");
const index_js_1 = require("../../../../design-system/index.js");
const Spacer_js_1 = require("../../../../components/Spacer.js");
const buttons_js_1 = require("../../../../components/buttons.js");
const TokenSelector_js_1 = require("./TokenSelector.js");
const useChainQuery_js_1 = require("../../../../../../core/hooks/others/useChainQuery.js");
const react_icons_1 = require("@radix-ui/react-icons");
const ChainIcon_js_1 = require("../../../../components/ChainIcon.js");
const text_js_1 = require("../../../../components/text.js");
/**
 * @internal
 */
function BuyTokenInput(props) {
    const chainQuery = (0, useChainQuery_js_1.useChainQuery)(props.chain);
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { children: [(0, jsx_runtime_1.jsx)(formElements_js_1.Input, { variant: "outline", pattern: "^[0-9]*[.,]?[0-9]*$", inputMode: "decimal", placeholder: "0", type: "text", "data-placeholder": props.value === "", value: props.value || "0", onClick: (e) => {
                    // put cursor at the end of the input
                    if (props.value === "") {
                        e.currentTarget.setSelectionRange(e.currentTarget.value.length, e.currentTarget.value.length);
                    }
                }, onChange: (e) => {
                    let value = e.target.value;
                    if (value.startsWith(".")) {
                        value = "0" + value;
                    }
                    const numValue = Number(value);
                    if (isNaN(numValue)) {
                        return;
                    }
                    if (value.startsWith("0") && !value.startsWith("0.")) {
                        props.onChange(value.slice(1));
                    }
                    else {
                        props.onChange(value);
                    }
                }, style: {
                    border: "none",
                    fontSize: "50px",
                    boxShadow: "none",
                    padding: "0",
                    fontWeight: 600,
                    textAlign: "center",
                } }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "row", center: "x", children: (0, jsx_runtime_1.jsx)(TokenSelector_js_1.TokenSelectorButton, { onClick: props.onTokenClick, token: props.token, chain: props.chain, style: {
                        padding: 0,
                        fontSize: index_js_1.fontSize.sm,
                        border: "none",
                    } }) }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "row", center: "x", children: (0, jsx_runtime_1.jsxs)(buttons_js_1.Button, { variant: "outline", style: {
                        fontSize: index_js_1.fontSize.sm,
                        padding: 0,
                        border: "none",
                    }, gap: "xxs", onClick: props.onChainClick, children: [(0, jsx_runtime_1.jsx)(ChainIcon_js_1.ChainIcon, { chain: chainQuery.data, size: index_js_1.iconSize.sm }), chainQuery.data?.name ? ((0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", children: chainQuery.data.name })) : ((0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { width: "90px", height: index_js_1.fontSize.xs })), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { color: "secondaryText", flex: "row", center: "both", children: (0, jsx_runtime_1.jsx)(react_icons_1.ChevronDownIcon, { width: index_js_1.iconSize.sm, height: index_js_1.iconSize.sm }) })] }) })] }));
}
exports.BuyTokenInput = BuyTokenInput;
//# sourceMappingURL=BuyTokenInput.js.map