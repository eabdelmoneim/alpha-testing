"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NoAutoConnect = exports.AutoConnect = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const connectionManager_js_1 = require("../../connectionManager.js");
// import type { WalletConfig } from "../../types/wallets.js";
const wallet_hooks_js_1 = require("../wallets/wallet-hooks.js");
const index_js_1 = require("../../../../wallets/manager/index.js");
const asyncLocalStorage_js_1 = require("../../utils/asyncLocalStorage.js");
const timeoutPromise_js_1 = require("../../utils/timeoutPromise.js");
let autoConnectAttempted = false;
/**
 * AutoConnect last connected wallet on page reload or revisit.
 * Note: If you are using `ConnectButton` or `ConnectEmbed` components, You don't need to use this component as it is already included.
 *
 * This is useful if you are manually connecting the wallets using the [`useConnect`](https://portal.thirdweb.com/references/typescript/v5/useConnect) hook and want to auto connect the last connected wallets on page reload or revisit.
 * @param props - Object of type `AutoConnectProps`. Refer to [`AutoConnectProps`](https://portal.thirdweb.com/references/typescript/v5/AutoConnectProps)
 * @example
 * ```tsx
 * import { AutoConnect } from "@thirdweb/react";
 *
 * // list of wallets that your app uses
 * const wallets = [
 *  metamaskConfig(),
 *  coinbaseConfig(),
 * ]
 *
 * function Example() {
 *  return (
 *    <AutoConnect
 *      wallets={wallets}
 *      client={client}
 *      appMetadata={appMetadata}
 *    />
 *  );
 * }
 * ```
 * @component
 */
function AutoConnect(props) {
    const setConnectionStatus = (0, wallet_hooks_js_1.useSetActiveWalletConnectionStatus)();
    const { connect } = (0, wallet_hooks_js_1.useConnect)();
    const { isAutoConnecting } = connectionManager_js_1.connectionManager;
    const { wallets } = props;
    const timeout = props.timeout ?? 15000;
    // get the supported wallets from thirdweb provider
    // check the storage for last connected wallets and connect them all
    // check the storage for last active wallet and set it as active
    (0, react_1.useEffect)(() => {
        if (autoConnectAttempted) {
            return;
        }
        autoConnectAttempted = true;
        const startAutoConnect = async () => {
            const [lastConnectedWalletIds, lastActiveWalletId] = await Promise.all([
                (0, index_js_1.getStoredConnectedWalletIds)(asyncLocalStorage_js_1.asyncLocalStorage),
                (0, index_js_1.getStoredActiveWalletId)(asyncLocalStorage_js_1.asyncLocalStorage),
            ]);
            // if no wallets were last connected
            if (!lastConnectedWalletIds) {
                return;
            }
            async function handleWalletConnection(wallet) {
                setConnectionStatus("connecting");
                // if this wallet requires a personal wallet to be connected
                // if (walletConfig.personalWalletConfigs) {
                //   // get saved connection params for this wallet
                //   const savedParams = await getSavedConnectParamsFromStorage(
                //     asyncLocalStorage,
                //     walletConfig.metadata.id,
                //   );
                //   // if must be an object with `personalWalletId` property
                //   if (!isValidWithPersonalWalletConnectionOptions(savedParams)) {
                //     throw new Error("Invalid connection params");
                //   }
                //   // find the personal wallet config
                //   const personalWalletConfig = walletConfig.personalWalletConfigs.find(
                //     (w) => w.metadata.id === savedParams.personalWalletId,
                //   );
                //   if (!personalWalletConfig) {
                //     throw new Error("Personal wallet not found");
                //   }
                //   // create and auto connect the personal wallet to get personal account
                //   const personalWallet = personalWalletConfig.create({
                //     client,
                //     appMetadata,
                //   });
                //   const account = await personalWallet.autoConnect();
                //   // create wallet
                //   const wallet = walletConfig.create({
                //     client,
                //     appMetadata,
                //   }) as WalletWithPersonalAccount;
                //   // auto connect the wallet using the personal account
                //   await wallet.autoConnect({
                //     personalAccount: account,
                //   });
                //   return wallet;
                // }
                if (false) {
                    // do nothing
                }
                // if this wallet does not require a personal wallet to be connected
                else {
                    await wallet.autoConnect({
                        client: props.client,
                    });
                    return wallet;
                }
            }
            // connect the last active wallet and set it as active
            const activeWalletConfig = wallets.find((w) => w.id === lastActiveWalletId);
            if (activeWalletConfig) {
                try {
                    const wallet = await (0, timeoutPromise_js_1.timeoutPromise)(handleWalletConnection(activeWalletConfig), {
                        ms: timeout,
                        message: "AutoConnect timeout : " + timeout + "ms limit exceeded.",
                    });
                    if (wallet) {
                        connect(wallet);
                    }
                    else {
                        setConnectionStatus("disconnected");
                    }
                }
                catch (e) {
                    console.error("Failed to auto connect last active wallet");
                    console.error(e);
                    setConnectionStatus("disconnected");
                }
            }
            else {
                setConnectionStatus("disconnected");
            }
            // then connect wallets that were last connected but were not set as active
            const otherWallets = wallets.filter((w) => w.id !== lastActiveWalletId && lastConnectedWalletIds.includes(w.id));
            otherWallets.forEach(async (config) => {
                const account = await handleWalletConnection(config);
                if (account) {
                    connectionManager_js_1.connectionManager.addConnectedWallet(account);
                }
            });
        };
        (async () => {
            isAutoConnecting.setValue(true);
            startAutoConnect();
            isAutoConnecting.setValue(false);
        })();
    });
    return (0, jsx_runtime_1.jsx)("div", { children: " " });
}
exports.AutoConnect = AutoConnect;
let noAutoConnectDone = false;
/**
 * @internal
 */
function NoAutoConnect() {
    const setConnectionStatus = (0, wallet_hooks_js_1.useSetActiveWalletConnectionStatus)();
    (0, react_1.useEffect)(() => {
        if (noAutoConnectDone) {
            return;
        }
        noAutoConnectDone = true;
        setConnectionStatus("disconnected");
    });
    return null;
}
exports.NoAutoConnect = NoAutoConnect;
//# sourceMappingURL=useAutoConnect.js.map