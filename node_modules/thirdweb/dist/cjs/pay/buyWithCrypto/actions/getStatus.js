"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBuyWithCryptoStatus = void 0;
const fetch_js_1 = require("../../../utils/fetch.js");
const definitions_js_1 = require("../utils/definitions.js");
/**
 * Gets the status of a buy with crypto transaction
 * @param buyWithCryptoTransaction - Object of type [`BuyWithCryptoTransaction`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoTransaction)
 * @example
 *
 * ```ts
 * import { sendTransaction, prepareTransaction } from "thirdweb";
 * import { getBuyWithCryptoStatus, getBuyWithCryptoQuote } from "thirdweb/pay";
 *
 * // get a quote between two tokens
 * const quote = await getBuyWithCryptoQuote(quoteParams);
 *
 * // if approval is required, send the approval transaction
 * if (quote.approval) {
 *  const preparedApproval = prepareTransaction(quote.approval);
 *  await sendTransaction({
 *    transaction,
 *    wallet,
 *  });
 * }
 *
 * // send the quoted transaction
 * const preparedTransaction = prepareTransaction(quote.transactionRequest);
 * const transactionResult = await sendTransaction({
 *    transaction,
 *    wallet,
 *  });
 * // keep polling the status of the quoted transaction until it returns a success or failure status
 * const status = await getBuyWithCryptoStatus({
 *    client,
 *    transactionHash: transactionResult.transactionHash,
 * }});
 * ```
 * @returns Object of type [`BuyWithCryptoStatus`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoStatus)
 * @buyCrypto
 */
async function getBuyWithCryptoStatus(buyWithCryptoTransaction) {
    try {
        if (!buyWithCryptoTransaction.transactionHash) {
            throw new Error("Transaction hash is required");
        }
        const queryString = new URLSearchParams({
            transactionHash: buyWithCryptoTransaction.transactionHash,
        }).toString();
        const url = `${(0, definitions_js_1.getPayBuyWithCryptoStatusUrl)()}?${queryString}`;
        const response = await (0, fetch_js_1.getClientFetch)(buyWithCryptoTransaction.client)(url);
        // Assuming the response directly matches the SwapResponse interface
        if (!response.ok) {
            response.body?.cancel();
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = (await response.json())["result"];
        return data;
    }
    catch (error) {
        console.error("Fetch error:", error);
        throw new Error(`Fetch failed: ${error}`);
    }
}
exports.getBuyWithCryptoStatus = getBuyWithCryptoStatus;
//# sourceMappingURL=getStatus.js.map