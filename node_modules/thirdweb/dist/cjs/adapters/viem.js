"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.viemAdapter = void 0;
const viem_1 = require("viem");
const contract_js_1 = require("../contract/contract.js");
const resolve_abi_js_1 = require("../contract/actions/resolve-abi.js");
const utils_js_1 = require("../chains/utils.js");
const rpc_js_1 = require("../rpc/rpc.js");
exports.viemAdapter = {
    contract: {
        /**
         * Creates a ThirdwebContract from a Viem contract.
         * @param options - The options for creating the contract.
         * @returns The ThirdwebContract.
         * @example
         * ```ts
         * import { viemAdapter } from "thirdweb/adapters";
         *
         * const contract = viemmAdapter.contract.fromViem({
         *  viemContract: viemContract,
         *  chain: ethereum,
         *  client,
         * });
         * ```
         */
        fromViem: fromViemContract,
        /**
         * Converts a ThirdwebContract instance to a Viem contract representation.
         * @param contract The ThirdwebContract instance to convert.
         * @returns A promise that resolves to the Viem contract representation.
         * @example
         * ```ts
         * import { viemAdapter } from "thirdweb/adapters";
         *  const viemContract = await viemAdapter.contract.toViem(contract);
         * ```
         */
        toViem: toViemContract,
    },
    /**
     * Converts options to a Viem public client.
     * @param options - The options for creating the Viem public client.
     * @returns The Viem public client.
     * @example
     * ```ts
     * import { viemAdapter } from "thirdweb/adapters";
     *
     *  const publicClient = viemAdapter.publicClient.toViem({
     *  chain: ethereum,
     *  client,
     * });
     * ```
     */
    publicClient: {
        toViem: toViemPublicClient,
    },
    walletClient: {
        /**
         * Converts options to a Viem Wallet client.
         * @param options - The options for creating the Viem Wallet client.
         * @returns The Viem Wallet client.
         * @example
         * ```ts
         * import { viemAdapter } from "thirdweb/adapters";
         *
         * const walletClient = viemAdapter.walletClient.toViem({
         *  wallet: wallet,
         *  client,
         *  chain: ethereum,
         * });
         * ```
         */
        toViem: toViemWalletClient,
        /**
         * Converts a Viem Wallet client to an Account.
         * @param options - The options for creating the Account.
         * @returns The Account.
         * @example
         * ```ts
         * import { viemAdapter } from "thirdweb/adapters";
         *
         * const account = viemAdapter.walletClient.fromViem({
         *   walletClient,
         * });
         */
        fromViem: fromViemWalletClient,
    },
};
function fromViemContract(options) {
    return (0, contract_js_1.getContract)({
        address: options.viemContract.address,
        abi: options.viemContract.abi,
        chain: options.chain,
        client: options.client,
    });
}
async function toViemContract(contract) {
    return {
        address: contract.address,
        abi: await (0, resolve_abi_js_1.resolveContractAbi)(contract),
    };
}
function toViemPublicClient(options) {
    const { chain, client } = options;
    const rpcUrl = (0, utils_js_1.getRpcUrlForChain)({ chain, client });
    const viemChain = {
        id: chain.id,
        name: chain.name || "",
        rpcUrls: {
            default: { http: [rpcUrl] },
        },
        nativeCurrency: {
            name: chain.nativeCurrency?.name || "Ether",
            symbol: chain.nativeCurrency?.symbol || "ETH",
            decimals: chain.nativeCurrency?.decimals || 18,
        },
    };
    return (0, viem_1.createPublicClient)({
        transport: (0, viem_1.http)(rpcUrl, {
            fetchOptions: client.secretKey
                ? {
                    headers: {
                        "x-secret-key": client.secretKey,
                    },
                }
                : undefined,
        }),
        chain: viemChain,
    });
}
function toViemWalletClient(options) {
    const { account, chain, client } = options;
    if (!account) {
        throw new Error("Wallet not connected.");
    }
    const rpcUrl = (0, utils_js_1.getRpcUrlForChain)({ chain, client });
    const viemChain = {
        id: chain.id,
        name: chain.name || "",
        rpcUrls: {
            default: { http: [rpcUrl] },
        },
        nativeCurrency: {
            name: chain.nativeCurrency?.name || "Ether",
            symbol: chain.nativeCurrency?.symbol || "ETH",
            decimals: chain.nativeCurrency?.decimals || 18,
        },
    };
    const rpcClient = (0, rpc_js_1.getRpcClient)({ client, chain });
    const transport = (0, viem_1.custom)({
        request: async (request) => {
            if (request.method === "eth_sendTransaction") {
                const result = await account.sendTransaction(request.params[0]);
                return result.transactionHash;
            }
            if (request.method === "eth_estimateGas") {
                if (account.estimateGas) {
                    return account.estimateGas(request.params[0]);
                }
            }
            if (request.method === "personal_sign") {
                return account.signMessage({
                    message: {
                        raw: request.params[0],
                    },
                });
            }
            if (request.method === "eth_signTypedData_v4") {
                const data = JSON.parse(request.params[1]);
                return account.signTypedData(data);
            }
            return rpcClient(request);
        },
    });
    return (0, viem_1.createWalletClient)({
        transport,
        account: account.address,
        chain: viemChain,
        key: "thirdweb-wallet",
    });
}
function fromViemWalletClient(options) {
    const viemAccount = options.walletClient.account;
    if (!viemAccount) {
        throw new Error("Account not found in walletClient, please pass it explicitely.");
    }
    return {
        address: viemAccount.address,
        signMessage: async (msg) => {
            return options.walletClient.signMessage({
                account: viemAccount,
                ...msg,
            });
        },
        sendTransaction: async (tx) => {
            const tx1559 = tx; // TODO check other txTypes
            const txHash = await options.walletClient.sendTransaction({
                account: viemAccount,
                chain: options.walletClient.chain,
                ...tx1559,
            });
            return {
                transaction: tx,
                transactionHash: txHash,
            };
        },
        signTypedData(_typedData) {
            return options.walletClient.signTypedData(_typedData); // TODO fix types
        },
    };
}
//# sourceMappingURL=viem.js.map