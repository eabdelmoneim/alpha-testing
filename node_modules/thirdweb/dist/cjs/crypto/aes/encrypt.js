"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.aesEncrypt = void 0;
const text_encoder_js_1 = require("../../utils/text-encoder.js");
const uint8_array_js_1 = require("../../utils/uint8-array.js");
const universal_crypto_js_1 = require("./lib/universal-crypto.js");
/**
 * Encrypts plaintext using AES-GCM with supplied password, for decryption with aesDecrypt().
 * @param plaintext - Plaintext to be encrypted.
 * @param password - Password to use to encrypt plaintext.
 * @returns Encrypted ciphertext.
 * @example
 *   const ciphertext = await aesEncrypt('my secret text', 'pw');
 */
async function aesEncrypt(plaintext, password) {
    const crypto = await (0, universal_crypto_js_1.universalCrypto)();
    const textEncoder = (0, text_encoder_js_1.cachedTextEncoder)();
    // encode password as UTF-8
    const pwUtf8 = textEncoder.encode(password);
    // hash the password
    const pwHash = await crypto.subtle.digest("SHA-256", pwUtf8);
    // get 96-bit random iv
    const iv = crypto.getRandomValues(new Uint8Array(12));
    // specify algorithm to use
    const alg = { name: "AES-GCM", iv };
    // generate key from pw
    const key = await crypto.subtle.importKey("raw", pwHash, alg, false, [
        "encrypt",
    ]);
    // encode plaintext as UTF-8
    const ptUint8 = textEncoder.encode(plaintext);
    // encrypt plaintext using key
    const ctBuffer = await crypto.subtle.encrypt(alg, key, ptUint8);
    // iv+ciphertext base64-encoded
    return (0, uint8_array_js_1.uint8ArrayToBase64)((0, uint8_array_js_1.concatUint8Arrays)([iv, new Uint8Array(ctBuffer)]));
}
exports.aesEncrypt = aesEncrypt;
//# sourceMappingURL=encrypt.js.map