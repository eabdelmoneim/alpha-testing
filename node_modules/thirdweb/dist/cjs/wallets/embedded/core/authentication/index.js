"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.authenticate = exports.preAuthenticate = exports.getUserEmail = exports.getAuthenticatedUser = void 0;
const auth_js_1 = require("../../implementations/interfaces/auth.js");
const embedded_wallets_js_1 = require("../../implementations/interfaces/embedded-wallets/embedded-wallets.js");
const ewsSDKCache = new WeakMap();
/**
 * @internal
 */
async function getEmbeddedWalletSDK(client) {
    if (ewsSDKCache.has(client)) {
        return ewsSDKCache.get(client);
    }
    const { EmbeddedWalletSdk } = await Promise.resolve().then(() => require("../../implementations/lib/embedded-wallet.js"));
    const ewSDK = new EmbeddedWalletSdk({
        client: client,
    });
    ewsSDKCache.set(client, ewSDK);
    return ewSDK;
}
/**
 * Retrieves the authenticated user for the active embedded wallet.
 * @param options - The arguments for retrieving the authenticated user.
 * @returns The authenticated user if logged in and wallet initialized, otherwise undefined.
 * @example
 * ```ts
 * import { getAuthenticatedUser } from "thirdweb/wallets/embedded";
 *
 * const user = await getAuthenticatedUser({ client });
 * if (user) {
 *  console.log(user.walletAddress);
 * }
 * ```
 */
async function getAuthenticatedUser(options) {
    const { client } = options;
    const ewSDK = await getEmbeddedWalletSDK(client);
    const user = await ewSDK.getUser();
    switch (user.status) {
        case embedded_wallets_js_1.UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED: {
            return user;
        }
    }
    return undefined;
}
exports.getAuthenticatedUser = getAuthenticatedUser;
/**
 * Retrieves the authenticated user email for the active embedded wallet.
 * @param options - The arguments for retrieving the authenticated user.
 * @returns The authenticated user email if logged in and wallet initialized, otherwise undefined.
 * @example
 * ```ts
 * import { getUserEmail } from "thirdweb/wallets/embedded";
 *
 * const email = await getUserEmail({ client });
 * console.log(email);
 * ```
 */
async function getUserEmail(options) {
    const user = await getAuthenticatedUser(options);
    if (user) {
        return user.authDetails.email;
    }
    return undefined;
}
exports.getUserEmail = getUserEmail;
/**
 * Pre-authenticates the user based on the provided authentication strategy.
 * @param args - The arguments required for pre-authentication.
 * @returns A promise that resolves to the pre-authentication result.
 * @throws An error if the provided authentication strategy doesn't require pre-authentication.
 * @example
 * ```ts
 * import { preAuthenticate } from "thirdweb/wallets/embedded";
 *
 * const result = await preAuthenticate({
 *  client,
 *  strategy: "email",
 *  email: "example@example.org",
 * });
 * ```
 */
async function preAuthenticate(args) {
    const ewSDK = await getEmbeddedWalletSDK(args.client);
    const strategy = args.strategy;
    switch (strategy) {
        case "email": {
            return ewSDK.auth.sendEmailLoginOtp({ email: args.email });
        }
        default:
            throw new Error(`Provider: ${strategy} doesnt require pre-authentication`);
    }
}
exports.preAuthenticate = preAuthenticate;
/**
 * Authenticates the user based on the provided authentication arguments.
 * @param args - The authentication arguments.
 * @returns A promise that resolves to the authentication result.
 * @example
 * ```ts
 * import { authenticate } from "thirdweb/wallets/embedded";
 *
 * const result = await authenticate({
 *  client,
 *  strategy: "email",
 *  email: "example@example.org",
 *  verificationCode: "123456",
 * });
 * ```
 */
async function authenticate(args) {
    const ewSDK = await getEmbeddedWalletSDK(args.client);
    const strategy = args.strategy;
    switch (strategy) {
        case "email": {
            return await ewSDK.auth.verifyEmailLoginOtp({
                email: args.email,
                otp: args.verificationCode,
            });
        }
        case "apple":
        case "facebook":
        case "google": {
            const oauthProvider = oauthStrategyToAuthProvider[strategy];
            return ewSDK.auth.loginWithOauth({
                oauthProvider,
                closeOpenedWindow: args.closeOpenedWindow,
                openedWindow: args.openedWindow,
            });
        }
        case "jwt": {
            return ewSDK.auth.loginWithCustomJwt({
                jwt: args.jwt,
                encryptionKey: args.encryptionKey,
            });
        }
        case "auth_endpoint": {
            return ewSDK.auth.loginWithCustomAuthEndpoint({
                payload: args.payload,
                encryptionKey: args.encryptionKey,
            });
        }
        case "iframe_email_verification": {
            return ewSDK.auth.loginWithEmailOtp({
                email: args.email,
            });
        }
        case "iframe": {
            return ewSDK.auth.loginWithModal();
        }
        default:
            assertUnreachable(strategy);
    }
}
exports.authenticate = authenticate;
function assertUnreachable(x) {
    throw new Error("Invalid param: " + x);
}
const oauthStrategyToAuthProvider = {
    google: auth_js_1.AuthProvider.GOOGLE,
    facebook: auth_js_1.AuthProvider.FACEBOOK,
    apple: auth_js_1.AuthProvider.APPLE,
};
//# sourceMappingURL=index.js.map