"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmbeddedWalletSdk = void 0;
const domains_js_1 = require("../../../../utils/domains.js");
const embedded_wallets_js_1 = require("../interfaces/embedded-wallets/embedded-wallets.js");
const EmbeddedWalletIframeCommunicator_js_1 = require("../utils/iFrameCommunication/EmbeddedWalletIframeCommunicator.js");
const index_js_1 = require("./auth/index.js");
const embedded_wallet_js_1 = require("./core/embedded-wallet.js");
/**
 * @internal
 */
class EmbeddedWalletSdk {
    isClientIdLegacyPaper(clientId) {
        if (clientId.indexOf("-") > 0 && clientId.length === 36) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @example
     * `const thirdwebEmbeddedWallet = new EmbeddedWalletSdk({ clientId: "", chain: "Goerli" });`
     * @internal
     */
    constructor({ client, onAuthSuccess }) {
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "querier", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "wallet", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Used to manage the Auth state of the user.
         */
        Object.defineProperty(this, "auth", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        if (this.isClientIdLegacyPaper(client.clientId)) {
            throw new Error("You are using a legacy clientId. Please use the clientId found on the thirdweb dashboard settings page");
        }
        const baseUrl = `https://${(0, domains_js_1.getThirdwebDomains)().embeddedWallet}`;
        this.client = client;
        this.querier = new EmbeddedWalletIframeCommunicator_js_1.EmbeddedWalletIframeCommunicator({
            clientId: client.clientId,
            baseUrl,
        });
        this.wallet = new embedded_wallet_js_1.EmbeddedWallet({
            client,
            querier: this.querier,
        });
        this.auth = new index_js_1.Auth({
            client,
            querier: this.querier,
            baseUrl,
            onAuthSuccess: async (authResult) => {
                onAuthSuccess?.(authResult);
                await this.wallet.postWalletSetUp({
                    ...authResult.walletDetails,
                    walletUserId: authResult.storedToken.authDetails.userWalletId,
                });
                await this.querier.call({
                    procedureName: "initIframe",
                    params: {
                        deviceShareStored: authResult.walletDetails.deviceShareStored,
                        clientId: this.client.clientId,
                        walletUserId: authResult.storedToken.authDetails.userWalletId,
                        authCookie: authResult.storedToken.cookieString,
                    },
                });
                return {
                    user: {
                        status: embedded_wallets_js_1.UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED,
                        authDetails: authResult.storedToken.authDetails,
                        wallet: this.wallet,
                        walletAddress: authResult.walletDetails.walletAddress,
                    },
                };
            },
        });
    }
    /**
     * Gets the usr if they are logged in
     * @example
     * ```js
     *  const user = await thirdwebEmbeddedWallet.getUser();
     *  switch (user.status) {
     *     case UserWalletStatus.LOGGED_OUT: {
     *       // User is logged out, call one of the auth methods on thirdwebEmbeddedWallet.auth to authenticate the user
     *       break;
     *     }
     *     case UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED: {
     *       // user is logged in and wallet is all set up.
     *       // You have access to:
     *       user.status;
     *       user.authDetails;
     *       user.walletAddress;
     *       user.wallet;
     *       break;
     *     }
     * }
     * ```
     * @returns GetUser - an object to containing various information on the user statuses
     */
    async getUser() {
        return this.wallet.getUserWalletStatus();
    }
}
exports.EmbeddedWalletSdk = EmbeddedWalletSdk;
//# sourceMappingURL=embedded-wallet.js.map