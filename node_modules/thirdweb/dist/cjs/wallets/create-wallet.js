"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.embeddedWallet = exports.smartWallet = exports.createWallet = void 0;
const mipdStore_js_1 = require("./injected/mipdStore.js");
const wallet_emitter_js_1 = require("./wallet-emitter.js");
const track_js_1 = require("../analytics/track.js");
// TODO: figure out how to define the type without tuple args type and using function overloads
/**
 * Creates a wallet based on the provided ID and arguments.
 * @param args - The arguments for creating the wallet.
 * @returns - The created wallet.
 * @example
 * ```ts
 * import { createWallet } from "thirdweb/wallets";
 *
 * const metamaskWallet = createWallet("io.metamask");
 *
 * const account = await metamaskWallet.connect({
 *  client,
 * });
 * ```
 * @wallet
 */
function createWallet(...args) {
    const [id, creationOptions] = args;
    switch (true) {
        /**
         * SMART WALLET
         */
        case id === "smart": {
            return smartWallet(creationOptions);
        }
        /**
         * EMBEDDED WALLET
         */
        case id === "embedded": {
            return embeddedWallet(creationOptions);
        }
        /**
         * COINBASE WALLET VIA SDK
         * -> if no injected coinbase found, we'll use the coinbase SDK
         */
        case id === "com.coinbase.wallet": {
            return coinbaseWalletSDK();
        }
        /**
         * WALLET CONNECT AND INJECTED WALLETS
         */
        default: {
            const emitter = (0, wallet_emitter_js_1.createWalletEmitter)();
            let account = undefined;
            let chain = undefined;
            const unsubscribeChain = emitter.subscribe("chainChanged", (newChain) => {
                chain = newChain;
            });
            const unsubscribeDisconnect = emitter.subscribe("disconnect", () => {
                account = undefined;
                chain = undefined;
                // unsubscribe
                unsubscribeChain();
                unsubscribeDisconnect();
            });
            let handleSwitchChain = async () => {
                throw new Error("Not implemented yet");
            };
            let handleDisconnect = () => {
                account = undefined;
                chain = undefined;
            };
            const wallet = {
                id,
                subscribe: emitter.subscribe,
                getConfig: () => args[1],
                getChain: () => chain,
                getAccount: () => account,
                autoConnect: async (options) => {
                    // injected wallet priority for autoConnect
                    if ((0, mipdStore_js_1.injectedProvider)(id)) {
                        const { autoConnectInjectedWallet } = await Promise.resolve().then(() => require("./injected/index.js"));
                        const [connectedAccount, connectedChain, doDisconnect, doSwitchChain,] = await autoConnectInjectedWallet(id, emitter);
                        // set the states
                        account = connectedAccount;
                        chain = connectedChain;
                        handleDisconnect = doDisconnect;
                        handleSwitchChain = doSwitchChain;
                        (0, track_js_1.trackConnect)({
                            client: options.client,
                            walletType: id,
                            walletAddress: account.address,
                        });
                        // return account
                        return account;
                    }
                    if (options && "client" in options) {
                        const { autoConnectWC } = await Promise.resolve().then(() => require("./wallet-connect/index.js"));
                        const [connectedAccount, connectedChain, doDisconnect, doSwitchChain,] = await autoConnectWC(options, emitter, wallet.id);
                        // set the states
                        account = connectedAccount;
                        chain = connectedChain;
                        handleDisconnect = doDisconnect;
                        handleSwitchChain = doSwitchChain;
                        (0, track_js_1.trackConnect)({
                            client: options.client,
                            walletType: id,
                            walletAddress: account.address,
                        });
                        // return account
                        return account;
                    }
                    throw new Error("Failed to auto connect");
                },
                connect: async (options) => {
                    // prefer walletconnect over injected for connect (more explicit)
                    if (options && "walletConnect" in options) {
                        const { connectWC } = await Promise.resolve().then(() => require("./wallet-connect/index.js"));
                        const [connectedAccount, connectedChain, doDisconnect, doSwitchChain,] = await connectWC(options, emitter, wallet.id);
                        // set the states
                        account = connectedAccount;
                        chain = connectedChain;
                        handleDisconnect = doDisconnect;
                        handleSwitchChain = doSwitchChain;
                        (0, track_js_1.trackConnect)({
                            client: options.client,
                            walletType: id,
                            walletAddress: account.address,
                        });
                        // return account
                        return account;
                    }
                    if ((0, mipdStore_js_1.injectedProvider)(id)) {
                        const { connectInjectedWallet } = await Promise.resolve().then(() => require("./injected/index.js"));
                        const [connectedAccount, connectedChain, doDisconnect, doSwitchChain,] = await connectInjectedWallet(id, options, emitter);
                        // set the states
                        account = connectedAccount;
                        chain = connectedChain;
                        handleDisconnect = doDisconnect;
                        handleSwitchChain = doSwitchChain;
                        (0, track_js_1.trackConnect)({
                            client: options.client,
                            walletType: id,
                            walletAddress: account.address,
                        });
                        // return account
                        return account;
                    }
                    throw new Error("Failed to connect");
                },
                // these get overridden in connect and autoconnect
                disconnect: async () => handleDisconnect(),
                switchChain: (c) => handleSwitchChain(c),
            };
            return wallet;
        }
    }
}
exports.createWallet = createWallet;
/**
 * Creates a smart wallet.
 * @param createOptions - The options for creating the wallet.
 * @returns The created smart wallet.
 * @example
 * ```ts
 * import { smartWallet } from "thirdweb/wallets";
 *
 * const wallet = smartWallet({
 *  factoryAddress: "0x1234...",
 *  chain: sepolia,
 *  gasless: true,
 * });
 *
 * const account = await wallet.connect({
 *   client,
 *   personalAccount: account,
 * });
 * ```
 * @wallet
 */
function smartWallet(createOptions) {
    const emitter = (0, wallet_emitter_js_1.createWalletEmitter)();
    let account = undefined;
    let chain = undefined;
    const _smartWallet = {
        id: "smart",
        subscribe: emitter.subscribe,
        getChain: () => chain,
        getConfig: () => createOptions,
        getAccount: () => account,
        autoConnect: async (options) => {
            const { connectSmartWallet } = await Promise.resolve().then(() => require("./smart/index.js"));
            const [connectedAccount, connectedChain] = await connectSmartWallet(_smartWallet, options, createOptions);
            // set the states
            account = connectedAccount;
            chain = connectedChain;
            (0, track_js_1.trackConnect)({
                client: options.client,
                walletType: "smart",
                walletAddress: account.address,
            });
            // return account
            return account;
        },
        connect: async (options) => {
            const { connectSmartWallet } = await Promise.resolve().then(() => require("./smart/index.js"));
            const [connectedAccount, connectedChain] = await connectSmartWallet(_smartWallet, options, createOptions);
            // set the states
            account = connectedAccount;
            chain = connectedChain;
            (0, track_js_1.trackConnect)({
                client: options.client,
                walletType: "smart",
                walletAddress: account.address,
            });
            // return account
            return account;
        },
        disconnect: async () => {
            const { disconnectSmartWallet } = await Promise.resolve().then(() => require("./smart/index.js"));
            await disconnectSmartWallet(_smartWallet);
            account = undefined;
            chain = undefined;
            emitter.emit("disconnect", undefined);
        },
        switchChain: async () => {
            throw new Error("Not implemented yet");
        },
    };
    return _smartWallet;
}
exports.smartWallet = smartWallet;
/**
 * Creates an embedded wallet.
 * @param createOptions - configuration options
 * @returns The created embedded wallet.
 * @example
 * ```ts
 * import { embeddedWallet } from "thirdweb/wallets";
 *
 * const wallet = embeddedWallet();
 *
 * const account = await wallet.connect({
 *   client,
 *   chain,
 *   strategy: "google",
 * });
 * ```
 * @wallet
 */
function embeddedWallet(createOptions) {
    const emitter = (0, wallet_emitter_js_1.createWalletEmitter)();
    let account = undefined;
    let chain = undefined;
    return {
        id: "embedded",
        subscribe: emitter.subscribe,
        getChain: () => chain,
        getConfig: () => createOptions,
        getAccount: () => account,
        autoConnect: async (options) => {
            const { autoConnectEmbeddedWallet } = await Promise.resolve().then(() => require("./embedded/core/wallet/index.js"));
            const [connectedAccount, connectedChain] = await autoConnectEmbeddedWallet(options);
            // set the states
            account = connectedAccount;
            chain = connectedChain;
            (0, track_js_1.trackConnect)({
                client: options.client,
                walletType: "embedded",
                walletAddress: account.address,
            });
            // return only the account
            return account;
        },
        connect: async (options) => {
            const { connectEmbeddedWallet } = await Promise.resolve().then(() => require("./embedded/core/wallet/index.js"));
            const [connectedAccount, connectedChain] = await connectEmbeddedWallet(options);
            // set the states
            account = connectedAccount;
            chain = connectedChain;
            (0, track_js_1.trackConnect)({
                client: options.client,
                walletType: "embedded",
                walletAddress: account.address,
            });
            // return only the account
            return account;
        },
        disconnect: async () => {
            // simply un-set the states
            account = undefined;
            chain = undefined;
            emitter.emit("disconnect", undefined);
        },
        switchChain: async (newChain) => {
            // simply set the new chain
            chain = newChain;
            emitter.emit("chainChanged", newChain);
        },
    };
}
exports.embeddedWallet = embeddedWallet;
/**
 * internal helper functions
 */
function coinbaseWalletSDK() {
    const emitter = (0, wallet_emitter_js_1.createWalletEmitter)();
    let account = undefined;
    let chain = undefined;
    let handleDisconnect = () => {
        account = undefined;
        chain = undefined;
    };
    let handleSwitchChain = async (newChain) => {
        chain = newChain;
    };
    const unsubscribeChainChanged = emitter.subscribe("chainChanged", (newChain) => {
        chain = newChain;
    });
    const unsubscribeDisconnect = emitter.subscribe("disconnect", () => {
        handleDisconnect();
        // unsubscribe
        unsubscribeChainChanged();
        unsubscribeDisconnect();
    });
    return {
        id: "com.coinbase.wallet",
        subscribe: emitter.subscribe,
        getChain: () => chain,
        getConfig: () => undefined,
        getAccount: () => account,
        autoConnect: async (options) => {
            const { autoConnectCoinbaseWalletSDK } = await Promise.resolve().then(() => require("./coinbase/coinbaseSDKWallet.js"));
            const [connectedAccount, connectedChain, doDisconnect, doSwitchChain] = await autoConnectCoinbaseWalletSDK(options, emitter);
            // set the states
            account = connectedAccount;
            chain = connectedChain;
            handleDisconnect = doDisconnect;
            handleSwitchChain = doSwitchChain;
            (0, track_js_1.trackConnect)({
                client: options.client,
                walletType: "com.coinbase.wallet",
                walletAddress: account.address,
            });
            // return account
            return account;
        },
        connect: async (options) => {
            const { connectCoinbaseWalletSDK } = await Promise.resolve().then(() => require("./coinbase/coinbaseSDKWallet.js"));
            const [connectedAccount, connectedChain, doDisconnect, doSwitchChain] = await connectCoinbaseWalletSDK(options, emitter);
            // set the states
            account = connectedAccount;
            chain = connectedChain;
            handleDisconnect = doDisconnect;
            handleSwitchChain = doSwitchChain;
            (0, track_js_1.trackConnect)({
                client: options.client,
                walletType: "com.coinbase.wallet",
                walletAddress: account.address,
            });
            // return account
            return account;
        },
        disconnect: async () => {
            handleDisconnect();
        },
        switchChain: async (newChain) => {
            await handleSwitchChain(newChain);
        },
    };
}
//# sourceMappingURL=create-wallet.js.map