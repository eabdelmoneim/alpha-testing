"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.viemToThirdwebAccount = exports.privateKeyAccount = void 0;
const accounts_1 = require("viem/accounts");
const utils_js_1 = require("../chains/utils.js");
const rpc_js_1 = require("../rpc/rpc.js");
const eth_sendRawTransaction_js_1 = require("../rpc/actions/eth_sendRawTransaction.js");
/**
 * Get an `Account` object from a private key.
 * @param options - The options for `privateKeyAccount`
 * Refer to the type [`PrivateKeyAccountOptions`](https://portal.thirdweb.com/references/typescript/v5/PrivateKeyAccountOptions)
 * @returns The `Account` object that represents the private key
 * @example
 * ```ts
 * import { privateKeyAccount } from "thirdweb/wallets"
 *
 * const wallet = privateKeyAccount({
 *  client,
 *  privateKey: "...",
 * });
 * ```
 * @wallet
 */
function privateKeyAccount(options) {
    if (!options.privateKey.startsWith("0x")) {
        options.privateKey = "0x" + options.privateKey;
    }
    const viemAccount = (0, accounts_1.privateKeyToAccount)(options.privateKey);
    return viemToThirdwebAccount(viemAccount, options.client);
}
exports.privateKeyAccount = privateKeyAccount;
/**
 * @internal
 */
function viemToThirdwebAccount(viemAccount, client) {
    const account = {
        address: viemAccount.address,
        sendTransaction: async (
        // TODO: figure out how we would pass our "chain" object in here?
        // maybe we *do* actually have to take in a tx object instead of the raw tx?
        tx) => {
            const rpcRequest = (0, rpc_js_1.getRpcClient)({
                client: client,
                chain: (0, utils_js_1.defineChain)(tx.chainId),
            });
            const signedTx = await viemAccount.signTransaction(tx);
            const transactionHash = await (0, eth_sendRawTransaction_js_1.eth_sendRawTransaction)(rpcRequest, signedTx);
            return {
                transactionHash,
            };
        },
        signTransaction: viemAccount.signTransaction,
        signMessage: viemAccount.signMessage,
        signTypedData: viemAccount.signTypedData,
    };
    return account;
}
exports.viemToThirdwebAccount = viemToThirdwebAccount;
//# sourceMappingURL=private-key.js.map