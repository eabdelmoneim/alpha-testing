{"version":3,"file":"index.cjs.js","sources":["../src/constants/client.ts","../src/constants/history.ts","../src/constants/proposal.ts","../src/constants/session.ts","../src/constants/engine.ts","../src/constants/pendingRequest.ts","../src/constants/verify.ts","../src/controllers/engine.ts","../src/controllers/proposal.ts","../src/controllers/session.ts","../src/controllers/pendingRequest.ts","../src/client.ts","../src/index.ts"],"sourcesContent":["import { SignClientTypes } from \"@walletconnect/types\";\n\nexport const SIGN_CLIENT_PROTOCOL = \"wc\";\nexport const SIGN_CLIENT_VERSION = 2;\nexport const SIGN_CLIENT_CONTEXT = \"client\";\n\nexport const SIGN_CLIENT_STORAGE_PREFIX = `${SIGN_CLIENT_PROTOCOL}@${SIGN_CLIENT_VERSION}:${SIGN_CLIENT_CONTEXT}:`;\n\nexport const SIGN_CLIENT_DEFAULT = {\n  name: SIGN_CLIENT_CONTEXT,\n  logger: \"error\",\n  controller: false,\n  relayUrl: \"wss://relay.walletconnect.com\",\n};\n\nexport const SIGN_CLIENT_EVENTS: Record<SignClientTypes.Event, SignClientTypes.Event> = {\n  session_proposal: \"session_proposal\",\n  session_update: \"session_update\",\n  session_extend: \"session_extend\",\n  session_ping: \"session_ping\",\n  session_delete: \"session_delete\",\n  session_expire: \"session_expire\",\n  session_request: \"session_request\",\n  session_request_sent: \"session_request_sent\",\n  session_event: \"session_event\",\n  proposal_expire: \"proposal_expire\",\n  session_request_expire: \"session_request_expire\",\n};\n\nexport const SIGN_CLIENT_STORAGE_OPTIONS = {\n  database: \":memory:\",\n};\n\nexport const WALLETCONNECT_DEEPLINK_CHOICE = \"WALLETCONNECT_DEEPLINK_CHOICE\";\n","export const HISTORY_EVENTS = {\n  created: \"history_created\",\n  updated: \"history_updated\",\n  deleted: \"history_deleted\",\n  sync: \"history_sync\",\n};\n\nexport const HISTORY_CONTEXT = \"history\";\n\nexport const HISTORY_STORAGE_VERSION = \"0.3\";\n","import { THIRTY_DAYS } from \"@walletconnect/time\";\n\nexport const PROPOSAL_CONTEXT = \"proposal\";\n\nexport const PROPOSAL_EXPIRY = THIRTY_DAYS;\n\nexport const PROPOSAL_EXPIRY_MESSAGE = \"Proposal expired\";\n","import { SEVEN_DAYS } from \"@walletconnect/time\";\n\nexport const SESSION_CONTEXT = \"session\";\n\nexport const SESSION_EXPIRY = SEVEN_DAYS;\n","import { FIVE_MINUTES, ONE_DAY, SEVEN_DAYS } from \"@walletconnect/time\";\nimport { EngineTypes } from \"@walletconnect/types\";\n\nexport const ENGINE_CONTEXT = \"engine\";\n\nexport const ENGINE_RPC_OPTS: EngineTypes.RpcOptsMap = {\n  wc_sessionPropose: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1100,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1101,\n    },\n  },\n  wc_sessionSettle: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1102,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1103,\n    },\n  },\n  wc_sessionUpdate: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1104,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1105,\n    },\n  },\n  wc_sessionExtend: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1106,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1107,\n    },\n  },\n  wc_sessionRequest: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1108,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1109,\n    },\n  },\n  wc_sessionEvent: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1110,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1111,\n    },\n  },\n\n  wc_sessionDelete: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1112,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1113,\n    },\n  },\n  wc_sessionPing: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1114,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1115,\n    },\n  },\n};\n\nexport const SESSION_REQUEST_EXPIRY_BOUNDARIES = {\n  min: FIVE_MINUTES,\n  max: SEVEN_DAYS,\n};\n\nexport const ENGINE_QUEUE_STATES: { idle: \"IDLE\"; active: \"ACTIVE\" } = {\n  idle: \"IDLE\",\n  active: \"ACTIVE\",\n};\n","export const REQUEST_CONTEXT = \"request\";\n","export const METHODS_TO_VERIFY = [\"wc_sessionPropose\", \"wc_sessionRequest\", \"wc_authRequest\"];\n","import {\n  EXPIRER_EVENTS,\n  PAIRING_EVENTS,\n  RELAYER_DEFAULT_PROTOCOL,\n  RELAYER_EVENTS,\n  VERIFY_SERVER,\n} from \"@walletconnect/core\";\n\nimport {\n  formatJsonRpcError,\n  formatJsonRpcRequest,\n  formatJsonRpcResult,\n  payloadId,\n  isJsonRpcError,\n  isJsonRpcRequest,\n  isJsonRpcResponse,\n  isJsonRpcResult,\n  JsonRpcRequest,\n  ErrorResponse,\n  getBigIntRpcId,\n} from \"@walletconnect/jsonrpc-utils\";\nimport { FIVE_MINUTES, ONE_SECOND, toMiliseconds } from \"@walletconnect/time\";\nimport {\n  EnginePrivate,\n  EngineTypes,\n  ExpirerTypes,\n  IEngine,\n  IEngineEvents,\n  JsonRpcTypes,\n  PendingRequestTypes,\n  Verify,\n  CoreTypes,\n  ProposalTypes,\n  RelayerTypes,\n  SessionTypes,\n  PairingTypes,\n} from \"@walletconnect/types\";\nimport {\n  calcExpiry,\n  createDelayedPromise,\n  engineEvent,\n  getInternalError,\n  getSdkError,\n  isConformingNamespaces,\n  isExpired,\n  isSessionCompatible,\n  isUndefined,\n  isValidController,\n  isValidErrorReason,\n  isValidEvent,\n  isValidId,\n  isValidNamespaces,\n  isValidNamespacesChainId,\n  isValidNamespacesEvent,\n  isValidNamespacesRequest,\n  isValidObject,\n  isValidParams,\n  isValidRelay,\n  isValidRelays,\n  isValidRequest,\n  isValidRequestExpiry,\n  hashMessage,\n  isBrowser,\n  isValidRequiredNamespaces,\n  isValidResponse,\n  isValidString,\n  parseExpirerTarget,\n  TYPE_1,\n  handleDeeplinkRedirect,\n  MemoryStore,\n  getDeepLink,\n} from \"@walletconnect/utils\";\nimport EventEmmiter from \"events\";\nimport {\n  ENGINE_CONTEXT,\n  ENGINE_RPC_OPTS,\n  PROPOSAL_EXPIRY_MESSAGE,\n  SESSION_EXPIRY,\n  SESSION_REQUEST_EXPIRY_BOUNDARIES,\n  METHODS_TO_VERIFY,\n  WALLETCONNECT_DEEPLINK_CHOICE,\n  ENGINE_QUEUE_STATES,\n} from \"../constants\";\n\nexport class Engine extends IEngine {\n  public name = ENGINE_CONTEXT;\n\n  private events: IEngineEvents = new EventEmmiter();\n  private initialized = false;\n  private ignoredPayloadTypes = [TYPE_1];\n\n  /**\n   * Queue responsible for processing incoming requests such as session_update, session_event, session_ping etc\n   * It's needed when the client receives multiple requests at once from the mailbox immediately after initialization and to avoid attempting to process them all at the same time\n   */\n  private requestQueue: EngineTypes.EngineQueue<EngineTypes.EventCallback<JsonRpcRequest>> = {\n    state: ENGINE_QUEUE_STATES.idle,\n    queue: [],\n  };\n\n  /**\n   * Queue responsible for processing incoming session_request\n   * The queue emits the next request only after the previous one has been responded to\n   */\n  private sessionRequestQueue: EngineTypes.EngineQueue<PendingRequestTypes.Struct> = {\n    state: ENGINE_QUEUE_STATES.idle,\n    queue: [],\n  };\n\n  private requestQueueDelay = ONE_SECOND;\n\n  // Ephemeral (in-memory) map to store recently deleted items\n  private recentlyDeletedMap = new Map<\n    string | number,\n    \"pairing\" | \"session\" | \"proposal\" | \"request\"\n  >();\n\n  private recentlyDeletedLimit = 200;\n\n  constructor(client: IEngine[\"client\"]) {\n    super(client);\n  }\n\n  public init: IEngine[\"init\"] = async () => {\n    if (!this.initialized) {\n      await this.cleanup();\n      this.registerRelayerEvents();\n      this.registerExpirerEvents();\n      this.registerPairingEvents();\n      this.client.core.pairing.register({ methods: Object.keys(ENGINE_RPC_OPTS) });\n      this.initialized = true;\n      setTimeout(() => {\n        this.sessionRequestQueue.queue = this.getPendingSessionRequests();\n        this.processSessionRequestQueue();\n      }, toMiliseconds(this.requestQueueDelay));\n    }\n  };\n\n  // ---------- Public ------------------------------------------------ //\n\n  public connect: IEngine[\"connect\"] = async (params) => {\n    await this.isInitialized();\n    const connectParams = {\n      ...params,\n      requiredNamespaces: params.requiredNamespaces || {},\n      optionalNamespaces: params.optionalNamespaces || {},\n    };\n    await this.isValidConnect(connectParams);\n    const { pairingTopic, requiredNamespaces, optionalNamespaces, sessionProperties, relays } =\n      connectParams;\n    let topic = pairingTopic;\n    let uri: string | undefined;\n    let active = false;\n\n    try {\n      if (topic) {\n        const pairing = this.client.core.pairing.pairings.get(topic);\n        active = pairing.active;\n      }\n    } catch (error) {\n      this.client.logger.error(`connect() -> pairing.get(${topic}) failed`);\n      throw error;\n    }\n    if (!topic || !active) {\n      const { topic: newTopic, uri: newUri } = await this.client.core.pairing.create();\n      topic = newTopic;\n      uri = newUri;\n    }\n    // safety check to ensure pairing topic is available\n    if (!topic) {\n      const { message } = getInternalError(\"NO_MATCHING_KEY\", `connect() pairing topic: ${topic}`);\n      throw new Error(message);\n    }\n\n    const publicKey = await this.client.core.crypto.generateKeyPair();\n\n    const expiry = ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl || FIVE_MINUTES;\n    const expiryTimestamp = calcExpiry(expiry);\n    const proposal = {\n      requiredNamespaces,\n      optionalNamespaces,\n      relays: relays ?? [{ protocol: RELAYER_DEFAULT_PROTOCOL }],\n      proposer: {\n        publicKey,\n        metadata: this.client.metadata,\n      },\n      expiryTimestamp,\n      ...(sessionProperties && { sessionProperties }),\n    };\n    const {\n      reject,\n      resolve,\n      done: approval,\n    } = createDelayedPromise<SessionTypes.Struct>(expiry, PROPOSAL_EXPIRY_MESSAGE);\n    this.events.once<\"session_connect\">(\n      engineEvent(\"session_connect\"),\n      async ({ error, session }) => {\n        if (error) reject(error);\n        else if (session) {\n          session.self.publicKey = publicKey;\n          const completeSession = {\n            ...session,\n            requiredNamespaces: proposal.requiredNamespaces,\n            optionalNamespaces: proposal.optionalNamespaces,\n          };\n          await this.client.session.set(session.topic, completeSession);\n          await this.setExpiry(session.topic, session.expiry);\n          if (topic) {\n            await this.client.core.pairing.updateMetadata({\n              topic,\n              metadata: session.peer.metadata,\n            });\n          }\n          resolve(completeSession);\n        }\n      },\n    );\n    const id = await this.sendRequest({\n      topic,\n      method: \"wc_sessionPropose\",\n      params: proposal,\n      throwOnFailedPublish: true,\n    });\n    await this.setProposal(id, { id, ...proposal });\n    return { uri, approval };\n  };\n\n  public pair: IEngine[\"pair\"] = async (params) => {\n    await this.isInitialized();\n    try {\n      return await this.client.core.pairing.pair(params);\n    } catch (error) {\n      this.client.logger.error(\"pair() failed\");\n      throw error;\n    }\n  };\n\n  public approve: IEngine[\"approve\"] = async (params) => {\n    await this.isInitialized();\n    try {\n      await this.isValidApprove(params);\n    } catch (error) {\n      this.client.logger.error(\"approve() -> isValidApprove() failed\");\n      throw error;\n    }\n    const { id, relayProtocol, namespaces, sessionProperties } = params;\n    let proposal;\n    try {\n      proposal = this.client.proposal.get(id);\n    } catch (error) {\n      this.client.logger.error(`approve() -> proposal.get(${id}) failed`);\n      throw error;\n    }\n\n    let { pairingTopic, proposer, requiredNamespaces, optionalNamespaces } = proposal;\n    pairingTopic = pairingTopic || \"\";\n\n    const selfPublicKey = await this.client.core.crypto.generateKeyPair();\n    const peerPublicKey = proposer.publicKey;\n    const sessionTopic = await this.client.core.crypto.generateSharedKey(\n      selfPublicKey,\n      peerPublicKey,\n    );\n    const sessionSettle = {\n      relay: { protocol: relayProtocol ?? \"irn\" },\n      namespaces,\n      pairingTopic,\n      controller: { publicKey: selfPublicKey, metadata: this.client.metadata },\n      expiry: calcExpiry(SESSION_EXPIRY),\n      ...(sessionProperties && { sessionProperties }),\n    };\n    await this.client.core.relayer.subscribe(sessionTopic);\n    const session = {\n      ...sessionSettle,\n      topic: sessionTopic,\n      requiredNamespaces,\n      optionalNamespaces,\n      pairingTopic,\n      acknowledged: false,\n      self: sessionSettle.controller,\n      peer: {\n        publicKey: proposer.publicKey,\n        metadata: proposer.metadata,\n      },\n      controller: selfPublicKey,\n    };\n    await this.client.session.set(sessionTopic, session);\n    try {\n      await this.sendResult<\"wc_sessionPropose\">({\n        id,\n        topic: pairingTopic,\n        result: {\n          relay: {\n            protocol: relayProtocol ?? \"irn\",\n          },\n          responderPublicKey: selfPublicKey,\n        },\n        throwOnFailedPublish: true,\n      });\n      await this.sendRequest({\n        topic: sessionTopic,\n        method: \"wc_sessionSettle\",\n        params: sessionSettle,\n        throwOnFailedPublish: true,\n      });\n    } catch (error) {\n      this.client.logger.error(error);\n      // if the publish fails, delete the session and throw an error\n      this.client.session.delete(sessionTopic, getSdkError(\"USER_DISCONNECTED\"));\n      await this.client.core.relayer.unsubscribe(sessionTopic);\n      throw error;\n    }\n\n    await this.client.core.pairing.updateMetadata({\n      topic: pairingTopic,\n      metadata: proposer.metadata,\n    });\n    await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n    await this.client.core.pairing.activate({ topic: pairingTopic });\n    await this.setExpiry(sessionTopic, calcExpiry(SESSION_EXPIRY));\n    return {\n      topic: sessionTopic,\n      acknowledged: () =>\n        new Promise((resolve) =>\n          setTimeout(() => resolve(this.client.session.get(sessionTopic)), 5_00),\n        ), // artificial delay to allow for the session to be processed by the peer\n    };\n  };\n\n  public reject: IEngine[\"reject\"] = async (params) => {\n    await this.isInitialized();\n    try {\n      await this.isValidReject(params);\n    } catch (error) {\n      this.client.logger.error(\"reject() -> isValidReject() failed\");\n      throw error;\n    }\n    const { id, reason } = params;\n    let pairingTopic;\n    try {\n      const proposal = this.client.proposal.get(id);\n      pairingTopic = proposal.pairingTopic;\n    } catch (error) {\n      this.client.logger.error(`reject() -> proposal.get(${id}) failed`);\n      throw error;\n    }\n\n    if (pairingTopic) {\n      await this.sendError(id, pairingTopic, reason);\n      await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n    }\n  };\n\n  public update: IEngine[\"update\"] = async (params) => {\n    await this.isInitialized();\n    try {\n      await this.isValidUpdate(params);\n    } catch (error) {\n      this.client.logger.error(\"update() -> isValidUpdate() failed\");\n      throw error;\n    }\n    const { topic, namespaces } = params;\n\n    const { done: acknowledged, resolve, reject } = createDelayedPromise<void>();\n    const clientRpcId = payloadId();\n    const relayRpcId = getBigIntRpcId().toString() as any;\n\n    const oldNamespaces = this.client.session.get(topic).namespaces;\n    this.events.once(engineEvent(\"session_update\", clientRpcId), async ({ error }: any) => {\n      if (error) reject(error);\n      else {\n        await this.client.session.update(topic, { namespaces });\n        resolve();\n      }\n    });\n\n    this.sendRequest({\n      topic,\n      method: \"wc_sessionUpdate\",\n      params: { namespaces },\n      throwOnFailedPublish: true,\n      clientRpcId,\n      relayRpcId,\n    }).catch((error) => {\n      this.client.logger.error(error);\n      this.client.session.update(topic, { namespaces: oldNamespaces });\n      reject(error);\n    });\n    return { acknowledged };\n  };\n\n  public extend: IEngine[\"extend\"] = async (params) => {\n    await this.isInitialized();\n    try {\n      await this.isValidExtend(params);\n    } catch (error) {\n      this.client.logger.error(\"extend() -> isValidExtend() failed\");\n      throw error;\n    }\n\n    const { topic } = params;\n    const clientRpcId = payloadId();\n    const { done: acknowledged, resolve, reject } = createDelayedPromise<void>();\n    this.events.once(engineEvent(\"session_extend\", clientRpcId), ({ error }: any) => {\n      if (error) reject(error);\n      else resolve();\n    });\n\n    await this.setExpiry(topic, calcExpiry(SESSION_EXPIRY));\n    this.sendRequest({\n      topic,\n      method: \"wc_sessionExtend\",\n      params: {},\n      clientRpcId,\n      throwOnFailedPublish: true,\n    }).catch((e) => {\n      reject(e);\n    });\n\n    return { acknowledged };\n  };\n\n  public request: IEngine[\"request\"] = async <T>(params: EngineTypes.RequestParams) => {\n    await this.isInitialized();\n    try {\n      await this.isValidRequest(params);\n    } catch (error) {\n      this.client.logger.error(\"request() -> isValidRequest() failed\");\n      throw error;\n    }\n    const { chainId, request, topic, expiry = ENGINE_RPC_OPTS.wc_sessionRequest.req.ttl } = params;\n    const clientRpcId = payloadId();\n    const relayRpcId = getBigIntRpcId().toString() as any;\n    const { done, resolve, reject } = createDelayedPromise<T>(\n      expiry,\n      \"Request expired. Please try again.\",\n    );\n    this.events.once<\"session_request\">(\n      engineEvent(\"session_request\", clientRpcId),\n      ({ error, result }) => {\n        if (error) reject(error);\n        else resolve(result);\n      },\n    );\n    return await Promise.all([\n      new Promise<void>(async (resolve) => {\n        await this.sendRequest({\n          clientRpcId,\n          relayRpcId,\n          topic,\n          method: \"wc_sessionRequest\",\n          params: {\n            request: {\n              ...request,\n              expiryTimestamp: calcExpiry(expiry),\n            },\n            chainId,\n          },\n          expiry,\n          throwOnFailedPublish: true,\n        }).catch((error) => reject(error));\n        this.client.events.emit(\"session_request_sent\", {\n          topic,\n          request,\n          chainId,\n          id: clientRpcId,\n        });\n        resolve();\n      }),\n      new Promise<void>(async (resolve) => {\n        const wcDeepLink = await getDeepLink(\n          this.client.core.storage,\n          WALLETCONNECT_DEEPLINK_CHOICE,\n        );\n        handleDeeplinkRedirect({ id: clientRpcId, topic, wcDeepLink });\n        resolve();\n      }),\n      done(),\n    ]).then((result) => result[2]); // order is important here, we want to return the result of the `done` promise\n  };\n\n  public respond: IEngine[\"respond\"] = async (params) => {\n    await this.isInitialized();\n    await this.isValidRespond(params);\n    const { topic, response } = params;\n    const { id } = response;\n    if (isJsonRpcResult(response)) {\n      await this.sendResult({ id, topic, result: response.result, throwOnFailedPublish: true });\n    } else if (isJsonRpcError(response)) {\n      await this.sendError(id, topic, response.error);\n    }\n    this.cleanupAfterResponse(params);\n  };\n\n  public ping: IEngine[\"ping\"] = async (params) => {\n    await this.isInitialized();\n    try {\n      await this.isValidPing(params);\n    } catch (error) {\n      this.client.logger.error(\"ping() -> isValidPing() failed\");\n      throw error;\n    }\n    const { topic } = params;\n    if (this.client.session.keys.includes(topic)) {\n      const clientRpcId = payloadId();\n      const relayRpcId = getBigIntRpcId().toString() as any;\n      const { done, resolve, reject } = createDelayedPromise<void>();\n      this.events.once(engineEvent(\"session_ping\", clientRpcId), ({ error }: any) => {\n        if (error) reject(error);\n        else resolve();\n      });\n      await Promise.all([\n        this.sendRequest({\n          topic,\n          method: \"wc_sessionPing\",\n          params: {},\n          throwOnFailedPublish: true,\n          clientRpcId,\n          relayRpcId,\n        }),\n        done(),\n      ]);\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      await this.client.core.pairing.ping({ topic });\n    }\n  };\n\n  public emit: IEngine[\"emit\"] = async (params) => {\n    await this.isInitialized();\n    await this.isValidEmit(params);\n    const { topic, event, chainId } = params;\n    const relayRpcId = getBigIntRpcId().toString() as any;\n    await this.sendRequest({\n      topic,\n      method: \"wc_sessionEvent\",\n      params: { event, chainId },\n      throwOnFailedPublish: true,\n      relayRpcId,\n    });\n  };\n\n  public disconnect: IEngine[\"disconnect\"] = async (params) => {\n    await this.isInitialized();\n    await this.isValidDisconnect(params);\n    const { topic } = params;\n    if (this.client.session.keys.includes(topic)) {\n      // await an ack to ensure the relay has received the disconnect request\n      await this.sendRequest({\n        topic,\n        method: \"wc_sessionDelete\",\n        params: getSdkError(\"USER_DISCONNECTED\"),\n        throwOnFailedPublish: true,\n      });\n      await this.deleteSession({ topic, emitEvent: false });\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      await this.client.core.pairing.disconnect({ topic });\n    } else {\n      const { message } = getInternalError(\n        \"MISMATCHED_TOPIC\",\n        `Session or pairing topic not found: ${topic}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  public find: IEngine[\"find\"] = (params) => {\n    this.isInitialized();\n    return this.client.session.getAll().filter((session) => isSessionCompatible(session, params));\n  };\n\n  public getPendingSessionRequests: IEngine[\"getPendingSessionRequests\"] = () => {\n    return this.client.pendingRequest.getAll();\n  };\n\n  // ---------- Private Helpers --------------------------------------- //\n\n  private cleanupDuplicatePairings: EnginePrivate[\"cleanupDuplicatePairings\"] = async (\n    session: SessionTypes.Struct,\n  ) => {\n    // older SDK versions are missing the `pairingTopic` prop thus we need to check for it\n    if (!session.pairingTopic) return;\n\n    try {\n      const pairing = this.client.core.pairing.pairings.get(session.pairingTopic);\n      const allPairings = this.client.core.pairing.pairings.getAll();\n      const duplicates = allPairings.filter(\n        (p) =>\n          p.peerMetadata?.url &&\n          p.peerMetadata?.url === session.peer.metadata.url &&\n          p.topic &&\n          p.topic !== pairing.topic,\n      );\n      if (duplicates.length === 0) return;\n      this.client.logger.info(`Cleaning up ${duplicates.length} duplicate pairing(s)`);\n      await Promise.all(\n        duplicates.map((p) => this.client.core.pairing.disconnect({ topic: p.topic })),\n      );\n      this.client.logger.info(`Duplicate pairings clean up finished`);\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  };\n\n  private deleteSession: EnginePrivate[\"deleteSession\"] = async (params) => {\n    const { topic, expirerHasDeleted = false, emitEvent = true, id = 0 } = params;\n    const { self } = this.client.session.get(topic);\n    // Await the unsubscribe first to avoid deleting the symKey too early below.\n    await this.client.core.relayer.unsubscribe(topic);\n    await this.client.session.delete(topic, getSdkError(\"USER_DISCONNECTED\"));\n    this.addToRecentlyDeleted(topic, \"session\");\n    if (this.client.core.crypto.keychain.has(self.publicKey)) {\n      await this.client.core.crypto.deleteKeyPair(self.publicKey);\n    }\n    if (this.client.core.crypto.keychain.has(topic)) {\n      await this.client.core.crypto.deleteSymKey(topic);\n    }\n    if (!expirerHasDeleted) this.client.core.expirer.del(topic);\n    // remove any deeplinks from storage after the session is deleted\n    // to avoid navigating to incorrect deeplink later on\n    this.client.core.storage\n      .removeItem(WALLETCONNECT_DEEPLINK_CHOICE)\n      .catch((e) => this.client.logger.warn(e));\n    this.getPendingSessionRequests().forEach((r) => {\n      if (r.topic === topic) {\n        this.deletePendingSessionRequest(r.id, getSdkError(\"USER_DISCONNECTED\"));\n      }\n    });\n    if (emitEvent) this.client.events.emit(\"session_delete\", { id, topic });\n  };\n\n  private deleteProposal: EnginePrivate[\"deleteProposal\"] = async (id, expirerHasDeleted) => {\n    await Promise.all([\n      this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\")),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n    this.addToRecentlyDeleted(id, \"proposal\");\n  };\n\n  private deletePendingSessionRequest: EnginePrivate[\"deletePendingSessionRequest\"] = async (\n    id,\n    reason,\n    expirerHasDeleted = false,\n  ) => {\n    await Promise.all([\n      this.client.pendingRequest.delete(id, reason),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n    this.addToRecentlyDeleted(id, \"request\");\n    this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((r) => r.id !== id);\n    // set the requestQueue state to idle if expirer has deleted a request as trying to respond to it would result in an exception\n    if (expirerHasDeleted) {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n      this.client.events.emit(\"session_request_expire\", { id });\n    }\n  };\n\n  private setExpiry: EnginePrivate[\"setExpiry\"] = async (topic, expiry) => {\n    if (this.client.session.keys.includes(topic)) {\n      await this.client.session.update(topic, { expiry });\n    }\n    this.client.core.expirer.set(topic, expiry);\n  };\n\n  private setProposal: EnginePrivate[\"setProposal\"] = async (id, proposal) => {\n    await this.client.proposal.set(id, proposal);\n    this.client.core.expirer.set(id, calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl));\n  };\n\n  private setPendingSessionRequest: EnginePrivate[\"setPendingSessionRequest\"] = async (\n    pendingRequest: PendingRequestTypes.Struct,\n  ) => {\n    const { id, topic, params, verifyContext } = pendingRequest;\n    const expiry =\n      params.request.expiryTimestamp || calcExpiry(ENGINE_RPC_OPTS.wc_sessionRequest.req.ttl);\n    await this.client.pendingRequest.set(id, {\n      id,\n      topic,\n      params,\n      verifyContext,\n    });\n    if (expiry) this.client.core.expirer.set(id, expiry);\n  };\n\n  private sendRequest: EnginePrivate[\"sendRequest\"] = async (args) => {\n    const { topic, method, params, expiry, relayRpcId, clientRpcId, throwOnFailedPublish } = args;\n    const payload = formatJsonRpcRequest(method, params, clientRpcId);\n    if (isBrowser() && METHODS_TO_VERIFY.includes(method)) {\n      const hash = hashMessage(JSON.stringify(payload));\n      this.client.core.verify.register({ attestationId: hash });\n    }\n    let message;\n    try {\n      message = await this.client.core.crypto.encode(topic, payload);\n    } catch (error) {\n      await this.cleanup();\n      this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n    const opts = ENGINE_RPC_OPTS[method].req;\n    if (expiry) opts.ttl = expiry;\n    if (relayRpcId) opts.id = relayRpcId;\n    this.client.core.history.set(topic, payload);\n    if (throwOnFailedPublish) {\n      opts.internal = {\n        ...opts.internal,\n        throwOnFailedPublish: true,\n      };\n      await this.client.core.relayer.publish(topic, message, opts);\n    } else {\n      this.client.core.relayer\n        .publish(topic, message, opts)\n        .catch((error) => this.client.logger.error(error));\n    }\n    return payload.id;\n  };\n\n  private sendResult: EnginePrivate[\"sendResult\"] = async (args) => {\n    const { id, topic, result, throwOnFailedPublish } = args;\n    const payload = formatJsonRpcResult(id, result);\n    let message;\n    try {\n      message = await this.client.core.crypto.encode(topic, payload);\n    } catch (error) {\n      // if encoding fails e.g. due to missing keychain, we want to cleanup all related data as its unusable\n      await this.cleanup();\n      this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n    let record;\n    try {\n      record = await this.client.core.history.get(topic, id);\n    } catch (error) {\n      this.client.logger.error(`sendResult() -> history.get(${topic}, ${id}) failed`);\n      throw error;\n    }\n    const opts = ENGINE_RPC_OPTS[record.request.method].res;\n    if (throwOnFailedPublish) {\n      opts.internal = {\n        ...opts.internal,\n        throwOnFailedPublish: true,\n      };\n      await this.client.core.relayer.publish(topic, message, opts);\n    } else {\n      this.client.core.relayer\n        .publish(topic, message, opts)\n        .catch((error) => this.client.logger.error(error));\n    }\n    await this.client.core.history.resolve(payload);\n  };\n\n  private sendError: EnginePrivate[\"sendError\"] = async (id, topic, error) => {\n    const payload = formatJsonRpcError(id, error);\n    let message;\n    try {\n      message = await this.client.core.crypto.encode(topic, payload);\n    } catch (error) {\n      await this.cleanup();\n      this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n    let record;\n    try {\n      record = await this.client.core.history.get(topic, id);\n    } catch (error) {\n      this.client.logger.error(`sendError() -> history.get(${topic}, ${id}) failed`);\n      throw error;\n    }\n    const opts = ENGINE_RPC_OPTS[record.request.method].res;\n    // await is intentionally omitted to speed up performance\n    this.client.core.relayer.publish(topic, message, opts);\n    await this.client.core.history.resolve(payload);\n  };\n\n  private cleanup: EnginePrivate[\"cleanup\"] = async () => {\n    const sessionTopics: string[] = [];\n    const proposalIds: number[] = [];\n    this.client.session.getAll().forEach((session) => {\n      let toCleanup = false;\n      if (isExpired(session.expiry)) toCleanup = true;\n      if (!this.client.core.crypto.keychain.has(session.topic)) toCleanup = true;\n      if (toCleanup) sessionTopics.push(session.topic);\n    });\n    this.client.proposal.getAll().forEach((proposal) => {\n      if (isExpired(proposal.expiryTimestamp)) proposalIds.push(proposal.id);\n    });\n    await Promise.all([\n      ...sessionTopics.map((topic) => this.deleteSession({ topic })),\n      ...proposalIds.map((id) => this.deleteProposal(id)),\n    ]);\n  };\n\n  private async isInitialized() {\n    if (!this.initialized) {\n      const { message } = getInternalError(\"NOT_INITIALIZED\", this.name);\n      throw new Error(message);\n    }\n    await this.client.core.relayer.confirmOnlineStateOrThrow();\n  }\n\n  // ---------- Relay Events Router ----------------------------------- //\n\n  private registerRelayerEvents() {\n    this.client.core.relayer.on(\n      RELAYER_EVENTS.message,\n      async (event: RelayerTypes.MessageEvent) => {\n        const { topic, message } = event;\n\n        // messages of certain types should be ignored as they are handled by their respective SDKs\n        if (this.ignoredPayloadTypes.includes(this.client.core.crypto.getPayloadType(message))) {\n          return;\n        }\n\n        const payload = await this.client.core.crypto.decode(topic, message);\n        try {\n          if (isJsonRpcRequest(payload)) {\n            this.client.core.history.set(topic, payload);\n            this.onRelayEventRequest({ topic, payload });\n          } else if (isJsonRpcResponse(payload)) {\n            await this.client.core.history.resolve(payload);\n            await this.onRelayEventResponse({ topic, payload });\n            this.client.core.history.delete(topic, payload.id);\n          } else {\n            this.onRelayEventUnknownPayload({ topic, payload });\n          }\n        } catch (error) {\n          this.client.logger.error(error);\n        }\n      },\n    );\n  }\n\n  private onRelayEventRequest: EnginePrivate[\"onRelayEventRequest\"] = async (event) => {\n    this.requestQueue.queue.push(event);\n    await this.processRequestsQueue();\n  };\n\n  private processRequestsQueue = async () => {\n    if (this.requestQueue.state === ENGINE_QUEUE_STATES.active) {\n      this.client.logger.info(`Request queue already active, skipping...`);\n      return;\n    }\n\n    this.client.logger.info(\n      `Request queue starting with ${this.requestQueue.queue.length} requests`,\n    );\n\n    while (this.requestQueue.queue.length > 0) {\n      this.requestQueue.state = ENGINE_QUEUE_STATES.active;\n      const request = this.requestQueue.queue.shift();\n      if (!request) continue;\n\n      try {\n        this.processRequest(request);\n        // small delay to allow for any async tasks to complete\n        await new Promise((resolve) => setTimeout(resolve, 300));\n      } catch (error) {\n        this.client.logger.warn(error);\n      }\n    }\n    this.requestQueue.state = ENGINE_QUEUE_STATES.idle;\n  };\n\n  private processRequest: EnginePrivate[\"onRelayEventRequest\"] = (event) => {\n    const { topic, payload } = event;\n    const reqMethod = payload.method as JsonRpcTypes.WcMethod;\n    switch (reqMethod) {\n      case \"wc_sessionPropose\":\n        return this.onSessionProposeRequest(topic, payload);\n      case \"wc_sessionSettle\":\n        return this.onSessionSettleRequest(topic, payload);\n      case \"wc_sessionUpdate\":\n        return this.onSessionUpdateRequest(topic, payload);\n      case \"wc_sessionExtend\":\n        return this.onSessionExtendRequest(topic, payload);\n      case \"wc_sessionPing\":\n        return this.onSessionPingRequest(topic, payload);\n      case \"wc_sessionDelete\":\n        return this.onSessionDeleteRequest(topic, payload);\n      case \"wc_sessionRequest\":\n        return this.onSessionRequest(topic, payload);\n      case \"wc_sessionEvent\":\n        return this.onSessionEventRequest(topic, payload);\n      default:\n        return this.client.logger.info(`Unsupported request method ${reqMethod}`);\n    }\n  };\n\n  private onRelayEventResponse: EnginePrivate[\"onRelayEventResponse\"] = async (event) => {\n    const { topic, payload } = event;\n    const record = await this.client.core.history.get(topic, payload.id);\n    const resMethod = record.request.method as JsonRpcTypes.WcMethod;\n    switch (resMethod) {\n      case \"wc_sessionPropose\":\n        return this.onSessionProposeResponse(topic, payload);\n      case \"wc_sessionSettle\":\n        return this.onSessionSettleResponse(topic, payload);\n      case \"wc_sessionUpdate\":\n        return this.onSessionUpdateResponse(topic, payload);\n      case \"wc_sessionExtend\":\n        return this.onSessionExtendResponse(topic, payload);\n      case \"wc_sessionPing\":\n        return this.onSessionPingResponse(topic, payload);\n      case \"wc_sessionRequest\":\n        return this.onSessionRequestResponse(topic, payload);\n      default:\n        return this.client.logger.info(`Unsupported response method ${resMethod}`);\n    }\n  };\n\n  private onRelayEventUnknownPayload: EnginePrivate[\"onRelayEventUnknownPayload\"] = (event) => {\n    const { topic } = event;\n    const { message } = getInternalError(\n      \"MISSING_OR_INVALID\",\n      `Decoded payload on topic ${topic} is not identifiable as a JSON-RPC request or a response.`,\n    );\n    throw new Error(message);\n  };\n\n  // ---------- Relay Events Handlers --------------------------------- //\n\n  private onSessionProposeRequest: EnginePrivate[\"onSessionProposeRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { params, id } = payload;\n    try {\n      this.isValidConnect({ ...payload.params });\n      const expiryTimestamp =\n        params.expiryTimestamp || calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl);\n      const proposal = { id, pairingTopic: topic, expiryTimestamp, ...params };\n      await this.setProposal(id, proposal);\n      const hash = hashMessage(JSON.stringify(payload));\n      const verifyContext = await this.getVerifyContext(hash, proposal.proposer.metadata);\n      this.client.events.emit(\"session_proposal\", { id, params: proposal, verifyContext });\n    } catch (err: any) {\n      await this.sendError(id, topic, err);\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionProposeResponse: EnginePrivate[\"onSessionProposeResponse\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    if (isJsonRpcResult(payload)) {\n      const { result } = payload;\n      this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", result });\n      const proposal = this.client.proposal.get(id);\n      this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", proposal });\n      const selfPublicKey = proposal.proposer.publicKey;\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        selfPublicKey,\n      });\n      const peerPublicKey = result.responderPublicKey;\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        peerPublicKey,\n      });\n      const sessionTopic = await this.client.core.crypto.generateSharedKey(\n        selfPublicKey,\n        peerPublicKey,\n      );\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        sessionTopic,\n      });\n      const subscriptionId = await this.client.core.relayer.subscribe(sessionTopic);\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        subscriptionId,\n      });\n      await this.client.core.pairing.activate({ topic });\n    } else if (isJsonRpcError(payload)) {\n      await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n      const target = engineEvent(\"session_connect\");\n      const listeners = this.events.listenerCount(target);\n      if (listeners === 0) {\n        throw new Error(`emitting ${target} without any listeners, 954`);\n      }\n      this.events.emit(engineEvent(\"session_connect\"), { error: payload.error });\n    }\n  };\n\n  private onSessionSettleRequest: EnginePrivate[\"onSessionSettleRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id, params } = payload;\n    try {\n      this.isValidSessionSettleRequest(params);\n      const { relay, controller, expiry, namespaces, sessionProperties, pairingTopic } =\n        payload.params;\n      const session = {\n        topic,\n        relay,\n        expiry,\n        namespaces,\n        acknowledged: true,\n        pairingTopic,\n        requiredNamespaces: {},\n        optionalNamespaces: {},\n        controller: controller.publicKey,\n        self: {\n          publicKey: \"\",\n          metadata: this.client.metadata,\n        },\n        peer: {\n          publicKey: controller.publicKey,\n          metadata: controller.metadata,\n        },\n        ...(sessionProperties && { sessionProperties }),\n      };\n      await this.sendResult<\"wc_sessionSettle\">({\n        id: payload.id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n      const target = engineEvent(\"session_connect\");\n      const listeners = this.events.listenerCount(target);\n      if (listeners === 0) {\n        throw new Error(`emitting ${target} without any listeners 997`);\n      }\n      this.events.emit(engineEvent(\"session_connect\"), { session });\n      this.cleanupDuplicatePairings(session);\n    } catch (err: any) {\n      await this.sendError(id, topic, err);\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionSettleResponse: EnginePrivate[\"onSessionSettleResponse\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    if (isJsonRpcResult(payload)) {\n      await this.client.session.update(topic, { acknowledged: true });\n      this.events.emit(engineEvent(\"session_approve\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      await this.client.session.delete(topic, getSdkError(\"USER_DISCONNECTED\"));\n      this.events.emit(engineEvent(\"session_approve\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionUpdateRequest: EnginePrivate[\"onSessionUpdateRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { params, id } = payload;\n    try {\n      const memoryKey = `${topic}_session_update`;\n      // compare the current request id with the last processed session update\n      // we want to update only if the request is newer than the last processed one\n      const lastSessionUpdateId = MemoryStore.get<number>(memoryKey);\n\n      if (lastSessionUpdateId && this.isRequestOutOfSync(lastSessionUpdateId, id)) {\n        this.client.logger.info(`Discarding out of sync request - ${id}`);\n        this.sendError(id, topic, getSdkError(\"INVALID_UPDATE_REQUEST\"));\n        return;\n      }\n      this.isValidUpdate({ topic, ...params });\n      try {\n        MemoryStore.set(memoryKey, id);\n        await this.client.session.update(topic, { namespaces: params.namespaces });\n        await this.sendResult<\"wc_sessionUpdate\">({\n          id,\n          topic,\n          result: true,\n          throwOnFailedPublish: true,\n        });\n      } catch (e) {\n        MemoryStore.delete(memoryKey);\n        throw e;\n      }\n      this.client.events.emit(\"session_update\", { id, topic, params });\n    } catch (err: any) {\n      await this.sendError(id, topic, err);\n      this.client.logger.error(err);\n    }\n  };\n\n  // compares the timestamp of the last processed request with the current request\n  // client <-> client rpc ID is timestamp + 3 random digits\n  private isRequestOutOfSync = (lastId: number, currentId: number) => {\n    return parseInt(currentId.toString().slice(0, -3)) <= parseInt(lastId.toString().slice(0, -3));\n  };\n\n  private onSessionUpdateResponse: EnginePrivate[\"onSessionUpdateResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_update\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_update\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_update\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionExtendRequest: EnginePrivate[\"onSessionExtendRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    try {\n      this.isValidExtend({ topic });\n      await this.setExpiry(topic, calcExpiry(SESSION_EXPIRY));\n      await this.sendResult<\"wc_sessionExtend\">({\n        id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n      this.client.events.emit(\"session_extend\", { id, topic });\n    } catch (err: any) {\n      await this.sendError(id, topic, err);\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionExtendResponse: EnginePrivate[\"onSessionExtendResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_extend\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_extend\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_extend\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionPingRequest: EnginePrivate[\"onSessionPingRequest\"] = async (topic, payload) => {\n    const { id } = payload;\n    try {\n      this.isValidPing({ topic });\n      await this.sendResult<\"wc_sessionPing\">({\n        id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n      this.client.events.emit(\"session_ping\", { id, topic });\n    } catch (err: any) {\n      await this.sendError(id, topic, err);\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionPingResponse: EnginePrivate[\"onSessionPingResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_ping\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    // put at the end of the stack to avoid a race condition\n    // where session_ping listener is not yet initialized\n    setTimeout(() => {\n      if (isJsonRpcResult(payload)) {\n        this.events.emit(engineEvent(\"session_ping\", id), {});\n      } else if (isJsonRpcError(payload)) {\n        this.events.emit(engineEvent(\"session_ping\", id), { error: payload.error });\n      }\n    }, 500);\n  };\n\n  private onSessionDeleteRequest: EnginePrivate[\"onSessionDeleteRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    try {\n      this.isValidDisconnect({ topic, reason: payload.params });\n      await Promise.all([\n        new Promise((resolve) => {\n          // RPC request needs to happen before deletion as it utalises session encryption\n          this.client.core.relayer.once(RELAYER_EVENTS.publish, async () => {\n            resolve(await this.deleteSession({ topic, id }));\n          });\n        }),\n        this.sendResult<\"wc_sessionDelete\">({\n          id,\n          topic,\n          result: true,\n          throwOnFailedPublish: true,\n        }),\n        this.cleanupPendingSentRequestsForTopic({ topic, error: getSdkError(\"USER_DISCONNECTED\") }),\n      ]);\n    } catch (err: any) {\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionRequest: EnginePrivate[\"onSessionRequest\"] = async (topic, payload) => {\n    const { id, params } = payload;\n    try {\n      this.isValidRequest({ topic, ...params });\n      const hash = hashMessage(\n        JSON.stringify(formatJsonRpcRequest(\"wc_sessionRequest\", params, id)),\n      );\n      const session = this.client.session.get(topic);\n      const verifyContext = await this.getVerifyContext(hash, session.peer.metadata);\n      const request = {\n        id,\n        topic,\n        params,\n        verifyContext,\n      };\n      await this.setPendingSessionRequest(request);\n      this.addSessionRequestToSessionRequestQueue(request);\n      this.processSessionRequestQueue();\n    } catch (err: any) {\n      await this.sendError(id, topic, err);\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionRequestResponse: EnginePrivate[\"onSessionRequestResponse\"] = (\n    _topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_request\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { result: payload.result });\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionEventRequest: EnginePrivate[\"onSessionEventRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id, params } = payload;\n    try {\n      // similar to session update, we want to discard out of sync requests\n      // additionally we have to check the event type as well e.g. chainChanged/accountsChanged\n      const memoryKey = `${topic}_session_event_${params.event.name}`;\n      // compare the current request id with the last processed session update\n      // we want to update only if the request is newer than the last processed one\n      const lastSessionUpdateId = MemoryStore.get<number>(memoryKey);\n      if (lastSessionUpdateId && this.isRequestOutOfSync(lastSessionUpdateId, id)) {\n        this.client.logger.info(`Discarding out of sync request - ${id}`);\n        return;\n      }\n\n      this.isValidEmit({ topic, ...params });\n      this.client.events.emit(\"session_event\", { id, topic, params });\n      MemoryStore.set(memoryKey, id);\n    } catch (err: any) {\n      await this.sendError(id, topic, err);\n      this.client.logger.error(err);\n    }\n  };\n\n  private addSessionRequestToSessionRequestQueue = (request: PendingRequestTypes.Struct) => {\n    this.sessionRequestQueue.queue.push(request);\n  };\n\n  private cleanupAfterResponse = (params: EngineTypes.RespondParams) => {\n    this.deletePendingSessionRequest(params.response.id, { message: \"fulfilled\", code: 0 });\n    // intentionally delay the emitting of the next pending request a bit\n    setTimeout(() => {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n      this.processSessionRequestQueue();\n    }, toMiliseconds(this.requestQueueDelay));\n  };\n\n  // Allows for cleanup on any sent pending requests if the peer disconnects the session before responding\n  private cleanupPendingSentRequestsForTopic = ({\n    topic,\n    error,\n  }: {\n    topic: string;\n    error: ErrorResponse;\n  }) => {\n    const pendingRequests = this.client.core.history.pending;\n    if (pendingRequests.length > 0) {\n      const forSession = pendingRequests.filter(\n        (r) => r.topic === topic && r.request.method === \"wc_sessionRequest\",\n      );\n      forSession.forEach((r) => {\n        const id = r.request.id;\n        const target = engineEvent(\"session_request\", id);\n        const listeners = this.events.listenerCount(target);\n        if (listeners === 0) {\n          throw new Error(`emitting ${target} without any listeners`);\n        }\n        // notify .request() handler of the rejection\n        this.events.emit(engineEvent(\"session_request\", r.request.id), {\n          error,\n        });\n      });\n    }\n  };\n\n  private processSessionRequestQueue = () => {\n    if (this.sessionRequestQueue.state === ENGINE_QUEUE_STATES.active) {\n      this.client.logger.info(\"session request queue is already active.\");\n      return;\n    }\n    // Select the first/oldest request in the array to ensure last-in-first-out (LIFO)\n    const request = this.sessionRequestQueue.queue[0];\n    if (!request) {\n      this.client.logger.info(\"session request queue is empty.\");\n      return;\n    }\n\n    try {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.active;\n      this.client.events.emit(\"session_request\", request);\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  };\n\n  // ---------- Expirer Events ---------------------------------------- //\n\n  private registerExpirerEvents() {\n    this.client.core.expirer.on(EXPIRER_EVENTS.expired, async (event: ExpirerTypes.Expiration) => {\n      const { topic, id } = parseExpirerTarget(event.target);\n      if (id && this.client.pendingRequest.keys.includes(id)) {\n        return await this.deletePendingSessionRequest(id, getInternalError(\"EXPIRED\"), true);\n      }\n\n      if (topic) {\n        if (this.client.session.keys.includes(topic)) {\n          await this.deleteSession({ topic, expirerHasDeleted: true });\n          this.client.events.emit(\"session_expire\", { topic });\n        }\n      } else if (id) {\n        await this.deleteProposal(id, true);\n        this.client.events.emit(\"proposal_expire\", { id });\n      }\n    });\n  }\n\n  // ---------- Pairing Events ---------------------------------------- //\n  private registerPairingEvents() {\n    this.client.core.pairing.events.on(PAIRING_EVENTS.create, (pairing: PairingTypes.Struct) =>\n      this.onPairingCreated(pairing),\n    );\n    this.client.core.pairing.events.on(PAIRING_EVENTS.delete, (pairing: PairingTypes.Struct) => {\n      this.addToRecentlyDeleted(pairing.topic, \"pairing\");\n    });\n  }\n\n  /**\n   * when a pairing is created, we check if there is a pending proposal for it.\n   * if there is, we send it to onSessionProposeRequest to be processed as if it was received from the relay.\n   * It allows QR/URI to be scanned multiple times without having to create new pairing.\n   */\n  private onPairingCreated = (pairing: PairingTypes.Struct) => {\n    if (pairing.active) return;\n    const proposals = this.client.proposal.getAll();\n    const proposal = proposals.find((p) => p.pairingTopic === pairing.topic);\n    if (!proposal) return;\n    this.onSessionProposeRequest(\n      pairing.topic,\n      formatJsonRpcRequest(\n        \"wc_sessionPropose\",\n        {\n          requiredNamespaces: proposal.requiredNamespaces,\n          optionalNamespaces: proposal.optionalNamespaces,\n          relays: proposal.relays,\n          proposer: proposal.proposer,\n          sessionProperties: proposal.sessionProperties,\n        },\n        proposal.id,\n      ),\n    );\n  };\n\n  // ---------- Validation Helpers ------------------------------------ //\n  private isValidPairingTopic(topic: any) {\n    if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `pairing topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (!this.client.core.pairing.pairings.keys.includes(topic)) {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `pairing topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (isExpired(this.client.core.pairing.pairings.get(topic).expiry)) {\n      const { message } = getInternalError(\"EXPIRED\", `pairing topic: ${topic}`);\n      throw new Error(message);\n    }\n  }\n\n  private async isValidSessionTopic(topic: any) {\n    if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    // Store will throw custom message if topic was recently deleted\n    this.checkRecentlyDeleted(topic);\n    if (!this.client.session.keys.includes(topic)) {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `session topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (isExpired(this.client.session.get(topic).expiry)) {\n      await this.deleteSession({ topic });\n      const { message } = getInternalError(\"EXPIRED\", `session topic: ${topic}`);\n      throw new Error(message);\n    }\n\n    if (!this.client.core.crypto.keychain.has(topic)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session topic does not exist in keychain: ${topic}`,\n      );\n      await this.deleteSession({ topic });\n      throw new Error(message);\n    }\n  }\n\n  private async isValidSessionOrPairingTopic(topic: string) {\n    this.checkRecentlyDeleted(topic);\n    if (this.client.session.keys.includes(topic)) {\n      await this.isValidSessionTopic(topic);\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      this.isValidPairingTopic(topic);\n    } else if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session or pairing topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    } else {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `session or pairing topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n  }\n\n  private async isValidProposalId(id: any) {\n    if (!isValidId(id)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `proposal id should be a number: ${id}`,\n      );\n      throw new Error(message);\n    }\n    if (!this.client.proposal.keys.includes(id)) {\n      const { message } = getInternalError(\"NO_MATCHING_KEY\", `proposal id doesn't exist: ${id}`);\n      throw new Error(message);\n    }\n    if (isExpired(this.client.proposal.get(id).expiryTimestamp)) {\n      await this.deleteProposal(id);\n      const { message } = getInternalError(\"EXPIRED\", `proposal id: ${id}`);\n      throw new Error(message);\n    }\n  }\n\n  // ---------- Validation  ------------------------------------------- //\n\n  private isValidConnect: EnginePrivate[\"isValidConnect\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `connect() params: ${JSON.stringify(params)}`,\n      );\n      throw new Error(message);\n    }\n    const { pairingTopic, requiredNamespaces, optionalNamespaces, sessionProperties, relays } =\n      params;\n    if (!isUndefined(pairingTopic)) await this.isValidPairingTopic(pairingTopic);\n\n    if (!isValidRelays(relays, true)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `connect() relays: ${relays}`);\n      throw new Error(message);\n    }\n\n    // validate required namespaces only if they are defined\n    if (!isUndefined(requiredNamespaces) && isValidObject(requiredNamespaces) !== 0) {\n      this.validateNamespaces(requiredNamespaces, \"requiredNamespaces\");\n    }\n\n    // validate optional namespaces only if they are defined\n    if (!isUndefined(optionalNamespaces) && isValidObject(optionalNamespaces) !== 0) {\n      this.validateNamespaces(optionalNamespaces, \"optionalNamespaces\");\n    }\n\n    // validate session properties only if they are defined\n    if (!isUndefined(sessionProperties)) {\n      this.validateSessionProps(sessionProperties, \"sessionProperties\");\n    }\n  };\n\n  private validateNamespaces = (\n    namespaces: ProposalTypes.RequiredNamespaces | ProposalTypes.OptionalNamespaces,\n    type: string,\n  ) => {\n    const validRequiredNamespacesError = isValidRequiredNamespaces(namespaces, \"connect()\", type);\n    if (validRequiredNamespacesError) throw new Error(validRequiredNamespacesError.message);\n  };\n\n  private isValidApprove: EnginePrivate[\"isValidApprove\"] = async (params) => {\n    if (!isValidParams(params))\n      throw new Error(\n        getInternalError(\"MISSING_OR_INVALID\", `approve() params: ${params}`).message,\n      );\n    const { id, namespaces, relayProtocol, sessionProperties } = params;\n\n    this.checkRecentlyDeleted(id);\n    await this.isValidProposalId(id);\n    const proposal = this.client.proposal.get(id);\n    const validNamespacesError = isValidNamespaces(namespaces, \"approve()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    const conformingNamespacesError = isConformingNamespaces(\n      proposal.requiredNamespaces,\n      namespaces,\n      \"approve()\",\n    );\n    if (conformingNamespacesError) throw new Error(conformingNamespacesError.message);\n    if (!isValidString(relayProtocol, true)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `approve() relayProtocol: ${relayProtocol}`,\n      );\n      throw new Error(message);\n    }\n\n    if (!isUndefined(sessionProperties)) {\n      this.validateSessionProps(sessionProperties, \"sessionProperties\");\n    }\n  };\n\n  private isValidReject: EnginePrivate[\"isValidReject\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `reject() params: ${params}`);\n      throw new Error(message);\n    }\n    const { id, reason } = params;\n    this.checkRecentlyDeleted(id);\n    await this.isValidProposalId(id);\n    if (!isValidErrorReason(reason)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `reject() reason: ${JSON.stringify(reason)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidSessionSettleRequest: EnginePrivate[\"isValidSessionSettleRequest\"] = (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `onSessionSettleRequest() params: ${params}`,\n      );\n      throw new Error(message);\n    }\n    const { relay, controller, namespaces, expiry } = params;\n    if (!isValidRelay(relay)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `onSessionSettleRequest() relay protocol should be a string`,\n      );\n      throw new Error(message);\n    }\n    const validControllerError = isValidController(controller, \"onSessionSettleRequest()\");\n    if (validControllerError) throw new Error(validControllerError.message);\n    const validNamespacesError = isValidNamespaces(namespaces, \"onSessionSettleRequest()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    if (isExpired(expiry)) {\n      const { message } = getInternalError(\"EXPIRED\", `onSessionSettleRequest()`);\n      throw new Error(message);\n    }\n  };\n\n  private isValidUpdate: EnginePrivate[\"isValidUpdate\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `update() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, namespaces } = params;\n\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n    const session = this.client.session.get(topic);\n    const validNamespacesError = isValidNamespaces(namespaces, \"update()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    const conformingNamespacesError = isConformingNamespaces(\n      session.requiredNamespaces,\n      namespaces,\n      \"update()\",\n    );\n    if (conformingNamespacesError) throw new Error(conformingNamespacesError.message);\n    // TODO(ilja) - check if wallet\n  };\n\n  private isValidExtend: EnginePrivate[\"isValidExtend\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `extend() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n  };\n\n  private isValidRequest: EnginePrivate[\"isValidRequest\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `request() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, request, chainId, expiry } = params;\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n    const { namespaces } = this.client.session.get(topic);\n    if (!isValidNamespacesChainId(namespaces, chainId)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `request() chainId: ${chainId}`);\n      throw new Error(message);\n    }\n    if (!isValidRequest(request)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() ${JSON.stringify(request)}`,\n      );\n      throw new Error(message);\n    }\n    if (!isValidNamespacesRequest(namespaces, chainId, request.method)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() method: ${request.method}`,\n      );\n      throw new Error(message);\n    }\n    if (expiry && !isValidRequestExpiry(expiry, SESSION_REQUEST_EXPIRY_BOUNDARIES)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() expiry: ${expiry}. Expiry must be a number (in seconds) between ${SESSION_REQUEST_EXPIRY_BOUNDARIES.min} and ${SESSION_REQUEST_EXPIRY_BOUNDARIES.max}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidRespond: EnginePrivate[\"isValidRespond\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `respond() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, response } = params;\n    try {\n      // if the session is already disconnected, we can't respond to the request so we need to delete it\n      await this.isValidSessionTopic(topic);\n    } catch (error) {\n      if (params?.response?.id) this.cleanupAfterResponse(params);\n      throw error;\n    }\n    if (!isValidResponse(response)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `respond() response: ${JSON.stringify(response)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidPing: EnginePrivate[\"isValidPing\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `ping() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n    await this.isValidSessionOrPairingTopic(topic);\n  };\n\n  private isValidEmit: EnginePrivate[\"isValidEmit\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `emit() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, event, chainId } = params;\n    await this.isValidSessionTopic(topic);\n    const { namespaces } = this.client.session.get(topic);\n    if (!isValidNamespacesChainId(namespaces, chainId)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `emit() chainId: ${chainId}`);\n      throw new Error(message);\n    }\n    if (!isValidEvent(event)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `emit() event: ${JSON.stringify(event)}`,\n      );\n      throw new Error(message);\n    }\n    if (!isValidNamespacesEvent(namespaces, chainId, event.name)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `emit() event: ${JSON.stringify(event)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidDisconnect: EnginePrivate[\"isValidDisconnect\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `disconnect() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n    await this.isValidSessionOrPairingTopic(topic);\n  };\n\n  private getVerifyContext = async (hash: string, metadata: CoreTypes.Metadata) => {\n    const context: Verify.Context = {\n      verified: {\n        verifyUrl: metadata.verifyUrl || VERIFY_SERVER,\n        validation: \"UNKNOWN\",\n        origin: metadata.url || \"\",\n      },\n    };\n\n    try {\n      const result = await this.client.core.verify.resolve({\n        attestationId: hash,\n        verifyUrl: metadata.verifyUrl,\n      });\n      if (result) {\n        context.verified.origin = result.origin;\n        context.verified.isScam = result.isScam;\n        context.verified.validation =\n          result.origin === new URL(metadata.url).origin ? \"VALID\" : \"INVALID\";\n      }\n    } catch (e) {\n      this.client.logger.info(e);\n    }\n\n    this.client.logger.info(`Verify context: ${JSON.stringify(context)}`);\n    return context;\n  };\n\n  private validateSessionProps = (properties: ProposalTypes.SessionProperties, type: string) => {\n    Object.values(properties).forEach((property) => {\n      if (!isValidString(property, false)) {\n        const { message } = getInternalError(\n          \"MISSING_OR_INVALID\",\n          `${type} must be in Record<string, string> format. Received: ${JSON.stringify(property)}`,\n        );\n        throw new Error(message);\n      }\n    });\n  };\n\n  private addToRecentlyDeleted = (\n    id: string | number,\n    type: \"pairing\" | \"session\" | \"proposal\" | \"request\",\n  ) => {\n    this.recentlyDeletedMap.set(id, type);\n    // remove first half of the map if it exceeds the limit\n    if (this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {\n      let i = 0;\n      const numItemsToDelete = this.recentlyDeletedLimit / 2;\n      for (const k of this.recentlyDeletedMap.keys()) {\n        if (i++ >= numItemsToDelete) {\n          break;\n        }\n        this.recentlyDeletedMap.delete(k);\n      }\n    }\n  };\n\n  private checkRecentlyDeleted = (id: string | number) => {\n    const deletedRecord = this.recentlyDeletedMap.get(id);\n    if (deletedRecord) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `Record was recently deleted - ${deletedRecord}: ${id}`,\n      );\n      throw new Error(message);\n    }\n  };\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, ProposalTypes } from \"@walletconnect/types\";\n\nimport { SIGN_CLIENT_STORAGE_PREFIX, PROPOSAL_CONTEXT } from \"../constants\";\n\nexport class Proposal extends Store<number, ProposalTypes.Struct> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(core, logger, PROPOSAL_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, SessionTypes } from \"@walletconnect/types\";\n\nimport { SIGN_CLIENT_STORAGE_PREFIX, SESSION_CONTEXT } from \"../constants\";\n\nexport class Session extends Store<string, SessionTypes.Struct> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(core, logger, SESSION_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, PendingRequestTypes } from \"@walletconnect/types\";\nimport { REQUEST_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX } from \"../constants\";\n\nexport class PendingRequest extends Store<number, PendingRequestTypes.Struct> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(\n      core,\n      logger,\n      REQUEST_CONTEXT,\n      SIGN_CLIENT_STORAGE_PREFIX,\n      (val: PendingRequestTypes.Struct) => val.id,\n    );\n  }\n}\n","import { Core } from \"@walletconnect/core\";\nimport {\n  generateChildLogger,\n  getDefaultLoggerOptions,\n  getLoggerContext,\n  pino,\n} from \"@walletconnect/logger\";\nimport { SignClientTypes, ISignClient, ISignClientEvents, EngineTypes } from \"@walletconnect/types\";\nimport { getAppMetadata } from \"@walletconnect/utils\";\nimport { EventEmitter } from \"events\";\nimport { SIGN_CLIENT_DEFAULT, SIGN_CLIENT_PROTOCOL, SIGN_CLIENT_VERSION } from \"./constants\";\nimport { Engine, PendingRequest, Proposal, Session } from \"./controllers\";\n\nexport class SignClient extends ISignClient {\n  public readonly protocol = SIGN_CLIENT_PROTOCOL;\n  public readonly version = SIGN_CLIENT_VERSION;\n  public readonly name: ISignClient[\"name\"] = SIGN_CLIENT_DEFAULT.name;\n  public readonly metadata: ISignClient[\"metadata\"];\n\n  public core: ISignClient[\"core\"];\n  public logger: ISignClient[\"logger\"];\n  public events: ISignClient[\"events\"] = new EventEmitter();\n  public engine: ISignClient[\"engine\"];\n  public session: ISignClient[\"session\"];\n  public proposal: ISignClient[\"proposal\"];\n  public pendingRequest: ISignClient[\"pendingRequest\"];\n\n  static async init(opts?: SignClientTypes.Options) {\n    const client = new SignClient(opts);\n    await client.initialize();\n\n    return client;\n  }\n\n  constructor(opts?: SignClientTypes.Options) {\n    super(opts);\n\n    this.name = opts?.name || SIGN_CLIENT_DEFAULT.name;\n    this.metadata = opts?.metadata || getAppMetadata();\n\n    const logger =\n      typeof opts?.logger !== \"undefined\" && typeof opts?.logger !== \"string\"\n        ? opts.logger\n        : pino(getDefaultLoggerOptions({ level: opts?.logger || SIGN_CLIENT_DEFAULT.logger }));\n\n    this.core = opts?.core || new Core(opts);\n    this.logger = generateChildLogger(logger, this.name);\n    this.session = new Session(this.core, this.logger);\n    this.proposal = new Proposal(this.core, this.logger);\n    this.pendingRequest = new PendingRequest(this.core, this.logger);\n    this.engine = new Engine(this);\n  }\n\n  get context() {\n    return getLoggerContext(this.logger);\n  }\n\n  get pairing() {\n    return this.core.pairing.pairings;\n  }\n\n  // ---------- Events ----------------------------------------------- //\n\n  public on: ISignClientEvents[\"on\"] = (name, listener) => {\n    return this.events.on(name, listener);\n  };\n\n  public once: ISignClientEvents[\"once\"] = (name, listener) => {\n    return this.events.once(name, listener);\n  };\n\n  public off: ISignClientEvents[\"off\"] = (name, listener) => {\n    return this.events.off(name, listener);\n  };\n\n  public removeListener: ISignClientEvents[\"removeListener\"] = (name, listener) => {\n    return this.events.removeListener(name, listener);\n  };\n\n  public removeAllListeners: ISignClientEvents[\"removeAllListeners\"] = (name) => {\n    return this.events.removeAllListeners(name);\n  };\n\n  // ---------- Engine ----------------------------------------------- //\n\n  public connect: ISignClient[\"connect\"] = async (params) => {\n    try {\n      return await this.engine.connect(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public pair: ISignClient[\"pair\"] = async (params) => {\n    try {\n      return await this.engine.pair(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public approve: ISignClient[\"approve\"] = async (params) => {\n    try {\n      return await this.engine.approve(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public reject: ISignClient[\"reject\"] = async (params) => {\n    try {\n      return await this.engine.reject(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public update: ISignClient[\"update\"] = async (params) => {\n    try {\n      return await this.engine.update(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public extend: ISignClient[\"extend\"] = async (params) => {\n    try {\n      return await this.engine.extend(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public request: ISignClient[\"request\"] = async <T>(params: EngineTypes.RequestParams) => {\n    try {\n      return await this.engine.request<T>(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public respond: ISignClient[\"respond\"] = async (params) => {\n    try {\n      return await this.engine.respond(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public ping: ISignClient[\"ping\"] = async (params) => {\n    try {\n      return await this.engine.ping(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public emit: ISignClient[\"emit\"] = async (params) => {\n    try {\n      return await this.engine.emit(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public disconnect: ISignClient[\"disconnect\"] = async (params) => {\n    try {\n      return await this.engine.disconnect(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public find: ISignClient[\"find\"] = (params) => {\n    try {\n      return this.engine.find(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public getPendingSessionRequests: ISignClient[\"getPendingSessionRequests\"] = () => {\n    try {\n      return this.engine.getPendingSessionRequests();\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  // ---------- Private ----------------------------------------------- //\n\n  private async initialize() {\n    this.logger.trace(`Initialized`);\n    try {\n      await this.core.start();\n      await this.session.init();\n      await this.proposal.init();\n      await this.pendingRequest.init();\n      await this.engine.init();\n      this.core.verify.init({ verifyUrl: this.metadata.verifyUrl });\n      this.logger.info(`SignClient Initialization Success`);\n    } catch (error: any) {\n      this.logger.info(`SignClient Initialization Failure`);\n      this.logger.error(error.message);\n      throw error;\n    }\n  }\n}\n","import { SignClient as Client } from \"./client\";\nimport { Session } from \"./controllers/session\";\nexport * from \"./constants\";\n\nexport const SessionStore = Session;\nexport const SignClient = Client;\nexport default Client;\n"],"names":["THIRTY_DAYS","SEVEN_DAYS","FIVE_MINUTES","ONE_DAY","IEngine","client","ENGINE_CONTEXT","EventEmmiter","TYPE_1","ENGINE_QUEUE_STATES","ONE_SECOND","ENGINE_RPC_OPTS","toMiliseconds","params","connectParams","__spreadProps","__spreadValues","pairingTopic","requiredNamespaces","optionalNamespaces","sessionProperties","relays","topic","uri","active","error","newTopic","newUri","message","getInternalError","publicKey","expiry","expiryTimestamp","calcExpiry","proposal","RELAYER_DEFAULT_PROTOCOL","reject","resolve","approval","createDelayedPromise","PROPOSAL_EXPIRY_MESSAGE","engineEvent","session","completeSession","id","relayProtocol","namespaces","proposer","selfPublicKey","peerPublicKey","sessionTopic","sessionSettle","SESSION_EXPIRY","getSdkError","reason","acknowledged","clientRpcId","payloadId","relayRpcId","getBigIntRpcId","oldNamespaces","e","chainId","request","done","result","wcDeepLink","getDeepLink","WALLETCONNECT_DEEPLINK_CHOICE","handleDeeplinkRedirect","response","isJsonRpcResult","isJsonRpcError","event","isSessionCompatible","pairing","duplicates","p","_a","_b","expirerHasDeleted","emitEvent","self","r","pendingRequest","verifyContext","args","method","throwOnFailedPublish","payload","formatJsonRpcRequest","isBrowser","METHODS_TO_VERIFY","hash","hashMessage","opts","formatJsonRpcResult","record","formatJsonRpcError","sessionTopics","proposalIds","toCleanup","isExpired","reqMethod","resMethod","err","subscriptionId","target","relay","controller","memoryKey","lastSessionUpdateId","MemoryStore","lastId","currentId","_topic","RELAYER_EVENTS","pendingRequests","isValidParams","isUndefined","isValidRelays","isValidObject","type","validRequiredNamespacesError","isValidRequiredNamespaces","validNamespacesError","isValidNamespaces","conformingNamespacesError","isConformingNamespaces","isValidString","isValidErrorReason","isValidRelay","validControllerError","isValidController","isValidNamespacesChainId","isValidRequest","isValidNamespacesRequest","isValidRequestExpiry","SESSION_REQUEST_EXPIRY_BOUNDARIES","isValidResponse","isValidEvent","isValidNamespacesEvent","metadata","context","VERIFY_SERVER","properties","property","i","numItemsToDelete","k","deletedRecord","isJsonRpcRequest","isJsonRpcResponse","EXPIRER_EVENTS","parseExpirerTarget","PAIRING_EVENTS","isValidId","Store","core","logger","PROPOSAL_CONTEXT","SIGN_CLIENT_STORAGE_PREFIX","SESSION_CONTEXT","REQUEST_CONTEXT","val","SignClient","ISignClient","SIGN_CLIENT_PROTOCOL","SIGN_CLIENT_VERSION","SIGN_CLIENT_DEFAULT","EventEmitter","name","listener","getAppMetadata","pino","getDefaultLoggerOptions","Core","generateChildLogger","Session","Proposal","PendingRequest","Engine","getLoggerContext","Client"],"mappings":";;;;;;;;;;;;;;;;AAEa,MAAA,oBAAA,CAAuB,IACvB,CAAA,mBAAA,CAAsB,CACtB,CAAA,mBAAA,CAAsB,SAEtB,0BAA6B,CAAA,CAAA,EAAG,oBAAwB,CAAA,CAAA,EAAA,mBAAA,CAAA,CAAA,EAAuB,mBAE/E,CAAA,CAAA,CAAA,CAAA,mBAAA,CAAsB,CACjC,IAAM,CAAA,mBAAA,CACN,MAAQ,CAAA,OAAA,CACR,UAAY,CAAA,CAAA,CAAA,CACZ,SAAU,+BACZ,CAAA,CAEa,kBAA2E,CAAA,CACtF,gBAAkB,CAAA,kBAAA,CAClB,eAAgB,gBAChB,CAAA,cAAA,CAAgB,gBAChB,CAAA,YAAA,CAAc,cACd,CAAA,cAAA,CAAgB,iBAChB,cAAgB,CAAA,gBAAA,CAChB,eAAiB,CAAA,iBAAA,CACjB,oBAAsB,CAAA,sBAAA,CACtB,cAAe,eACf,CAAA,eAAA,CAAiB,iBACjB,CAAA,sBAAA,CAAwB,wBAC1B,CAAA,CAEa,4BAA8B,CACzC,QAAA,CAAU,UACZ,CAAA,CAEa,6BAAgC,CAAA;;ACjCtC,MAAM,cAAiB,CAAA,CAC5B,OAAS,CAAA,iBAAA,CACT,OAAS,CAAA,iBAAA,CACT,OAAS,CAAA,iBAAA,CACT,IAAM,CAAA,cACR,CAEa,CAAA,eAAA,CAAkB,UAElB,uBAA0B,CAAA;;ACPhC,MAAM,iBAAmB,UAEnB,CAAA,eAAA,CAAkBA,iBAElB,uBAA0B,CAAA;;ACJ1B,MAAA,eAAA,CAAkB,UAElB,cAAiBC,CAAAA;;MCDjB,cAAiB,CAAA,QAAA,CAEjB,gBAA0C,CACrD,iBAAA,CAAmB,CACjB,GAAK,CAAA,CACH,IAAKC,iBACL,CAAA,MAAA,CAAQ,GACR,GAAK,CAAA,IACP,EACA,GAAK,CAAA,CACH,IAAKA,iBACL,CAAA,MAAA,CAAQ,GACR,GAAK,CAAA,IACP,CACF,CACA,CAAA,gBAAA,CAAkB,CAChB,GAAK,CAAA,CACH,IAAKA,iBACL,CAAA,MAAA,CAAQ,GACR,GAAK,CAAA,IACP,CACA,CAAA,GAAA,CAAK,CACH,GAAA,CAAKA,kBACL,MAAQ,CAAA,CAAA,CAAA,CACR,IAAK,IACP,CACF,EACA,gBAAkB,CAAA,CAChB,IAAK,CACH,GAAA,CAAKC,aACL,MAAQ,CAAA,CAAA,CAAA,CACR,IAAK,IACP,CAAA,CACA,IAAK,CACH,GAAA,CAAKA,aACL,MAAQ,CAAA,CAAA,CAAA,CACR,IAAK,IACP,CACF,EACA,gBAAkB,CAAA,CAChB,IAAK,CACH,GAAA,CAAKA,aACL,MAAQ,CAAA,CAAA,CAAA,CACR,IAAK,IACP,CAAA,CACA,IAAK,CACH,GAAA,CAAKA,aACL,MAAQ,CAAA,CAAA,CAAA,CACR,GAAK,CAAA,IACP,CACF,CAAA,CACA,kBAAmB,CACjB,GAAA,CAAK,CACH,GAAKD,CAAAA,iBAAAA,CACL,OAAQ,CACR,CAAA,CAAA,GAAA,CAAK,IACP,CACA,CAAA,GAAA,CAAK,CACH,GAAKA,CAAAA,iBAAAA,CACL,OAAQ,CACR,CAAA,CAAA,GAAA,CAAK,IACP,CACF,CAAA,CACA,gBAAiB,CACf,GAAA,CAAK,CACH,GAAKA,CAAAA,iBAAAA,CACL,OAAQ,CACR,CAAA,CAAA,GAAA,CAAK,IACP,CACA,CAAA,GAAA,CAAK,CACH,GAAKA,CAAAA,iBAAAA,CACL,OAAQ,CACR,CAAA,CAAA,GAAA,CAAK,IACP,CACF,CAAA,CAEA,iBAAkB,CAChB,GAAA,CAAK,CACH,GAAA,CAAKC,YACL,CAAA,MAAA,CAAQ,GACR,GAAK,CAAA,IACP,EACA,GAAK,CAAA,CACH,IAAKA,YACL,CAAA,MAAA,CAAQ,GACR,GAAK,CAAA,IACP,CACF,CACA,CAAA,cAAA,CAAgB,CACd,GAAK,CAAA,CACH,IAAKA,YACL,CAAA,MAAA,CAAQ,CACR,CAAA,CAAA,GAAA,CAAK,IACP,CAAA,CACA,IAAK,CACH,GAAA,CAAKA,aACL,MAAQ,CAAA,CAAA,CAAA,CACR,IAAK,IACP,CACF,CACF,CAEa,CAAA,iCAAA,CAAoC,CAC/C,GAAKD,CAAAA,iBAAAA,CACL,IAAKD,eACP,CAAA,CAEa,oBAA0D,CACrE,IAAA,CAAM,MACN,CAAA,MAAA,CAAQ,QACV;;ACjHO,MAAM,eAAkB,CAAA;;ACAxB,MAAM,iBAAoB,CAAA,CAAC,mBAAqB,CAAA,mBAAA,CAAqB,gBAAgB;;ubCoF/E,MAAA,MAAA,SAAeG,aAAQ,CAmClC,WAAA,CAAYC,EAA2B,CACrC,KAAA,CAAMA,CAAM,CAnCd,CAAA,IAAA,CAAO,IAAOC,CAAAA,cAAAA,CAEd,IAAQ,CAAA,MAAA,CAAwB,IAAIC,sBACpC,CAAA,IAAA,CAAQ,YAAc,CACtB,CAAA,CAAA,IAAA,CAAQ,oBAAsB,CAACC,YAAM,EAMrC,IAAQ,CAAA,YAAA,CAAmF,CACzF,KAAOC,CAAAA,mBAAAA,CAAoB,KAC3B,KAAO,CAAA,EACT,CAMA,CAAA,IAAA,CAAQ,mBAA2E,CAAA,CACjF,KAAOA,CAAAA,mBAAAA,CAAoB,KAC3B,KAAO,CAAA,EACT,CAEA,CAAA,IAAA,CAAQ,kBAAoBC,eAG5B,CAAA,IAAA,CAAQ,mBAAqB,IAAI,GAAA,CAKjC,KAAQ,oBAAuB,CAAA,GAAA,CAM/B,KAAO,IAAwB,CAAA,SAAY,CACpC,IAAK,CAAA,WAAA,GACR,MAAM,IAAA,CAAK,OAAQ,EAAA,CACnB,KAAK,qBAAsB,EAAA,CAC3B,KAAK,qBAAsB,EAAA,CAC3B,KAAK,qBAAsB,EAAA,CAC3B,KAAK,MAAO,CAAA,IAAA,CAAK,QAAQ,QAAS,CAAA,CAAE,QAAS,MAAO,CAAA,IAAA,CAAKC,eAAe,CAAE,CAAC,CAC3E,CAAA,IAAA,CAAK,WAAc,CAAA,CAAA,CAAA,CACnB,WAAW,IAAM,CACf,KAAK,mBAAoB,CAAA,KAAA,CAAQ,KAAK,yBAA0B,EAAA,CAChE,KAAK,0BAA2B,GAClC,EAAGC,kBAAc,CAAA,IAAA,CAAK,iBAAiB,CAAC,CAAA,EAE5C,EAIA,IAAO,CAAA,OAAA,CAA8B,MAAOC,CAAAA,EAAW,CACrD,MAAM,KAAK,aAAc,EAAA,CACzB,MAAMC,CAAgBC,CAAAA,CAAAA,CAAAC,EAAA,EACjBH,CAAAA,CAAAA,CAAAA,CADiB,CAEpB,kBAAoBA,CAAAA,CAAAA,CAAO,oBAAsB,EAAC,CAClD,mBAAoBA,CAAO,CAAA,kBAAA,EAAsB,EACnD,CAAA,CAAA,CACA,MAAM,IAAA,CAAK,cAAeC,CAAAA,CAAa,EACvC,KAAM,CAAE,aAAAG,CAAc,CAAA,kBAAA,CAAAC,EAAoB,kBAAAC,CAAAA,CAAAA,CAAoB,kBAAAC,CAAmB,CAAA,MAAA,CAAAC,CAAO,CACtFP,CAAAA,CAAAA,CACF,IAAIQ,CAAQL,CAAAA,CAAAA,CACRM,EACAC,CAAS,CAAA,CAAA,CAAA,CAEb,GAAI,CACEF,CAEFE,GAAAA,CAAAA,CADgB,KAAK,MAAO,CAAA,IAAA,CAAK,QAAQ,QAAS,CAAA,GAAA,CAAIF,CAAK,CAC1C,CAAA,MAAA,EAErB,OAASG,CAAP,CAAA,CACA,WAAK,MAAO,CAAA,MAAA,CAAO,MAAM,CAA4BH,yBAAAA,EAAAA,CAAAA,CAAAA,QAAAA,CAAe,EAC9DG,CACR,CACA,GAAI,CAACH,CAAS,EAAA,CAACE,EAAQ,CACrB,KAAM,CAAE,KAAOE,CAAAA,CAAAA,CAAU,IAAKC,CAAO,CAAA,CAAI,MAAM,IAAK,CAAA,MAAA,CAAO,KAAK,OAAQ,CAAA,MAAA,GACxEL,CAAQI,CAAAA,CAAAA,CACRH,EAAMI,EAGR,CAAA,GAAI,CAACL,CAAAA,CAAO,CACV,KAAM,CAAE,OAAAM,CAAAA,CAAQ,EAAIC,sBAAiB,CAAA,iBAAA,CAAmB,4BAA4BP,CAAO,CAAA,CAAA,CAAA,CAC3F,MAAM,IAAI,KAAA,CAAMM,CAAO,CAGzB,CAAA,MAAME,EAAY,MAAM,IAAA,CAAK,OAAO,IAAK,CAAA,MAAA,CAAO,eAAgB,EAAA,CAE1DC,CAASpB,CAAAA,eAAAA,CAAgB,kBAAkB,GAAI,CAAA,GAAA,EAAOT,kBACtD8B,CAAkBC,CAAAA,gBAAAA,CAAWF,CAAM,CACnCG,CAAAA,CAAAA,CAAWlB,EAAA,CACf,kBAAA,CAAAE,EACA,kBAAAC,CAAAA,CAAAA,CACA,OAAQE,CAAA,EAAA,IAAA,CAAAA,EAAU,CAAC,CAAE,QAAUc,CAAAA,6BAAyB,CAAC,CAAA,CACzD,SAAU,CACR,SAAA,CAAAL,EACA,QAAU,CAAA,IAAA,CAAK,OAAO,QACxB,CAAA,CACA,gBAAAE,CACIZ,CAAAA,CAAAA,CAAAA,EAAqB,CAAE,iBAAAA,CAAAA,CAAkB,GAEzC,CACJ,MAAA,CAAAgB,EACA,OAAAC,CAAAA,CAAAA,CACA,KAAMC,EACR,CAAA,CAAIC,2BAA0CR,CAAQS,CAAAA,uBAAuB,EAC7E,IAAK,CAAA,MAAA,CAAO,KACVC,iBAAY,CAAA,iBAAiB,EAC7B,MAAO,CAAE,MAAAhB,CAAO,CAAA,OAAA,CAAAiB,CAAQ,CAAM,GAAA,CAC5B,GAAIjB,CAAOW,CAAAA,CAAAA,CAAOX,CAAK,CAAA,CAAA,KAAA,GACdiB,CAAS,CAAA,CAChBA,EAAQ,IAAK,CAAA,SAAA,CAAYZ,EACzB,MAAMa,CAAAA,CAAkB5B,EAAAC,CAAA,CAAA,EAAA,CACnB0B,GADmB,CAEtB,kBAAA,CAAoBR,EAAS,kBAC7B,CAAA,kBAAA,CAAoBA,EAAS,kBAC/B,CAAA,CAAA,CACA,MAAM,IAAK,CAAA,MAAA,CAAO,OAAQ,CAAA,GAAA,CAAIQ,CAAQ,CAAA,KAAA,CAAOC,CAAe,CAC5D,CAAA,MAAM,KAAK,SAAUD,CAAAA,CAAAA,CAAQ,MAAOA,CAAQ,CAAA,MAAM,EAC9CpB,CACF,EAAA,MAAM,KAAK,MAAO,CAAA,IAAA,CAAK,QAAQ,cAAe,CAAA,CAC5C,MAAAA,CACA,CAAA,QAAA,CAAUoB,CAAQ,CAAA,IAAA,CAAK,QACzB,CAAC,EAEHL,CAAQM,CAAAA,CAAe,GAE3B,CACF,CAAA,CACA,MAAMC,CAAK,CAAA,MAAM,KAAK,WAAY,CAAA,CAChC,MAAAtB,CACA,CAAA,MAAA,CAAQ,oBACR,MAAQY,CAAAA,CAAAA,CACR,qBAAsB,CACxB,CAAA,CAAC,CACD,CAAA,OAAA,MAAM,IAAK,CAAA,WAAA,CAAYU,EAAI5B,CAAA,CAAA,CAAE,GAAA4B,CAAOV,CAAAA,CAAAA,CAAAA,CAAU,EACvC,CAAE,GAAA,CAAAX,EAAK,QAAAe,CAAAA,EAAS,CACzB,CAEA,CAAA,IAAA,CAAO,KAAwB,MAAOzB,CAAAA,EAAW,CAC/C,MAAM,IAAA,CAAK,aAAc,EAAA,CACzB,GAAI,CACF,OAAO,MAAM,IAAA,CAAK,OAAO,IAAK,CAAA,OAAA,CAAQ,KAAKA,CAAM,CACnD,OAASY,CAAP,CAAA,CACA,WAAK,MAAO,CAAA,MAAA,CAAO,MAAM,eAAe,CAAA,CAClCA,CACR,CACF,CAAA,CAEA,IAAO,CAAA,OAAA,CAA8B,MAAOZ,CAAAA,EAAW,CACrD,MAAM,IAAA,CAAK,eACX,CAAA,GAAI,CACF,MAAM,IAAA,CAAK,eAAeA,CAAM,EAClC,OAASY,CAAP,CAAA,CACA,WAAK,MAAO,CAAA,MAAA,CAAO,MAAM,sCAAsC,CAAA,CACzDA,CACR,CACA,KAAM,CAAE,GAAAmB,CAAI,CAAA,aAAA,CAAAC,EAAe,UAAAC,CAAAA,CAAAA,CAAY,kBAAA1B,CAAkB,CAAA,CAAIP,EAC7D,IAAIqB,CAAAA,CACJ,GAAI,CACFA,CAAAA,CAAW,KAAK,MAAO,CAAA,QAAA,CAAS,IAAIU,CAAE,EACxC,CAASnB,MAAAA,CAAAA,CAAP,CACA,MAAA,IAAA,CAAK,OAAO,MAAO,CAAA,KAAA,CAAM,6BAA6BmB,CAAY,CAAA,QAAA,CAAA,CAAA,CAC5DnB,CACR,CAEA,GAAI,CAAE,YAAAR,CAAAA,CAAAA,CAAc,SAAA8B,CAAU,CAAA,kBAAA,CAAA7B,EAAoB,kBAAAC,CAAAA,CAAmB,EAAIe,CACzEjB,CAAAA,CAAAA,CAAeA,CAAgB,EAAA,EAAA,CAE/B,MAAM+B,CAAAA,CAAgB,MAAM,IAAK,CAAA,MAAA,CAAO,KAAK,MAAO,CAAA,eAAA,GAC9CC,CAAgBF,CAAAA,CAAAA,CAAS,UACzBG,CAAe,CAAA,MAAM,KAAK,MAAO,CAAA,IAAA,CAAK,OAAO,iBACjDF,CAAAA,CAAAA,CACAC,CACF,CACME,CAAAA,CAAAA,CAAgBnC,CAAA,CAAA,CACpB,KAAO,CAAA,CAAE,SAAU6B,CAAA,EAAA,IAAA,CAAAA,EAAiB,KAAM,CAAA,CAC1C,WAAAC,CACA,CAAA,YAAA,CAAA7B,EACA,UAAY,CAAA,CAAE,UAAW+B,CAAe,CAAA,QAAA,CAAU,KAAK,MAAO,CAAA,QAAS,EACvE,MAAQf,CAAAA,gBAAAA,CAAWmB,cAAc,CAAA,CAAA,CAC7BhC,CAAqB,EAAA,CAAE,kBAAAA,CAAkB,CAAA,CAAA,CAE/C,MAAM,IAAK,CAAA,MAAA,CAAO,KAAK,OAAQ,CAAA,SAAA,CAAU8B,CAAY,CACrD,CAAA,MAAMR,EAAU3B,CAAAC,CAAAA,CAAAA,CAAA,GACXmC,CADW,CAAA,CAAA,CAEd,MAAOD,CACP,CAAA,kBAAA,CAAAhC,CACA,CAAA,kBAAA,CAAAC,CACA,CAAA,YAAA,CAAAF,EACA,YAAc,CAAA,CAAA,CAAA,CACd,KAAMkC,CAAc,CAAA,UAAA,CACpB,KAAM,CACJ,SAAA,CAAWJ,EAAS,SACpB,CAAA,QAAA,CAAUA,EAAS,QACrB,CAAA,CACA,WAAYC,CACd,CAAA,CAAA,CACA,MAAM,IAAK,CAAA,MAAA,CAAO,OAAQ,CAAA,GAAA,CAAIE,CAAcR,CAAAA,CAAO,EACnD,GAAI,CACF,MAAM,IAAK,CAAA,UAAA,CAAgC,CACzC,EAAAE,CAAAA,CAAAA,CACA,MAAO3B,CACP,CAAA,MAAA,CAAQ,CACN,KAAO,CAAA,CACL,SAAU4B,CAAA,EAAA,IAAA,CAAAA,EAAiB,KAC7B,CAAA,CACA,kBAAoBG,CAAAA,CACtB,CACA,CAAA,oBAAA,CAAsB,EACxB,CAAC,CAAA,CACD,MAAM,IAAK,CAAA,WAAA,CAAY,CACrB,KAAOE,CAAAA,CAAAA,CACP,OAAQ,kBACR,CAAA,MAAA,CAAQC,EACR,oBAAsB,CAAA,CAAA,CACxB,CAAC,EACH,CAAA,MAAS1B,EAAP,CACA,MAAA,IAAA,CAAK,MAAO,CAAA,MAAA,CAAO,KAAMA,CAAAA,CAAK,EAE9B,IAAK,CAAA,MAAA,CAAO,QAAQ,MAAOyB,CAAAA,CAAAA,CAAcG,kBAAY,mBAAmB,CAAC,EACzE,MAAM,IAAA,CAAK,OAAO,IAAK,CAAA,OAAA,CAAQ,YAAYH,CAAY,CAAA,CACjDzB,CACR,CAEA,OAAA,MAAM,KAAK,MAAO,CAAA,IAAA,CAAK,QAAQ,cAAe,CAAA,CAC5C,MAAOR,CACP,CAAA,QAAA,CAAU8B,EAAS,QACrB,CAAC,EACD,MAAM,IAAA,CAAK,OAAO,QAAS,CAAA,MAAA,CAAOH,EAAIS,iBAAY,CAAA,mBAAmB,CAAC,CACtE,CAAA,MAAM,IAAK,CAAA,MAAA,CAAO,IAAK,CAAA,OAAA,CAAQ,SAAS,CAAE,KAAA,CAAOpC,CAAa,CAAC,CAAA,CAC/D,MAAM,IAAK,CAAA,SAAA,CAAUiC,EAAcjB,gBAAWmB,CAAAA,cAAc,CAAC,CACtD,CAAA,CACL,MAAOF,CACP,CAAA,YAAA,CAAc,IACZ,IAAI,OAAA,CAASb,CACX,EAAA,UAAA,CAAW,IAAMA,CAAAA,CAAQ,KAAK,MAAO,CAAA,OAAA,CAAQ,IAAIa,CAAY,CAAC,EAAG,GAAI,CACvE,CACJ,CACF,CAAA,CAEA,KAAO,MAA4B,CAAA,MAAOrC,GAAW,CACnD,MAAM,KAAK,aAAc,EAAA,CACzB,GAAI,CACF,MAAM,IAAA,CAAK,cAAcA,CAAM,EACjC,OAASY,CAAP,CAAA,CACA,WAAK,MAAO,CAAA,MAAA,CAAO,MAAM,oCAAoC,CAAA,CACvDA,CACR,CACA,KAAM,CAAE,EAAAmB,CAAAA,CAAAA,CAAI,OAAAU,CAAO,CAAA,CAAIzC,CACvB,CAAA,IAAII,CACJ,CAAA,GAAI,CAEFA,CADiB,CAAA,IAAA,CAAK,OAAO,QAAS,CAAA,GAAA,CAAI2B,CAAE,CACpB,CAAA,aAC1B,OAASnB,CAAP,CAAA,CACA,WAAK,MAAO,CAAA,MAAA,CAAO,MAAM,CAA4BmB,yBAAAA,EAAAA,CAAAA,CAAAA,QAAAA,CAAY,EAC3DnB,CACR,CAEIR,CACF,GAAA,MAAM,IAAK,CAAA,SAAA,CAAU2B,EAAI3B,CAAcqC,CAAAA,CAAM,EAC7C,MAAM,IAAA,CAAK,OAAO,QAAS,CAAA,MAAA,CAAOV,EAAIS,iBAAY,CAAA,mBAAmB,CAAC,CAE1E,EAAA,CAAA,CAEA,KAAO,MAA4B,CAAA,MAAOxC,GAAW,CACnD,MAAM,IAAK,CAAA,aAAA,EACX,CAAA,GAAI,CACF,MAAM,IAAA,CAAK,cAAcA,CAAM,EACjC,OAASY,CAAP,CAAA,CACA,WAAK,MAAO,CAAA,MAAA,CAAO,MAAM,oCAAoC,CAAA,CACvDA,CACR,CACA,KAAM,CAAE,KAAAH,CAAAA,CAAAA,CAAO,UAAAwB,CAAAA,CAAW,CAAIjC,CAAAA,CAAAA,CAExB,CAAE,IAAM0C,CAAAA,CAAAA,CAAc,QAAAlB,CAAS,CAAA,MAAA,CAAAD,CAAO,CAAIG,CAAAA,0BAAAA,GAC1CiB,CAAcC,CAAAA,sBAAAA,GACdC,CAAaC,CAAAA,2BAAAA,GAAiB,QAAS,EAAA,CAEvCC,EAAgB,IAAK,CAAA,MAAA,CAAO,OAAQ,CAAA,GAAA,CAAItC,CAAK,CAAA,CAAE,WACrD,OAAK,IAAA,CAAA,MAAA,CAAO,KAAKmB,iBAAY,CAAA,gBAAA,CAAkBe,CAAW,CAAG,CAAA,MAAO,CAAE,KAAA/B,CAAAA,CAAM,IAAW,CACjFA,CAAAA,CAAOW,EAAOX,CAAK,CAAA,EAErB,MAAM,IAAK,CAAA,MAAA,CAAO,OAAQ,CAAA,MAAA,CAAOH,CAAO,CAAA,CAAE,WAAAwB,CAAW,CAAC,EACtDT,CAAQ,EAAA,EAEZ,CAAC,CAED,CAAA,IAAA,CAAK,YAAY,CACf,KAAA,CAAAf,EACA,MAAQ,CAAA,kBAAA,CACR,OAAQ,CAAE,UAAA,CAAAwB,CAAW,CACrB,CAAA,oBAAA,CAAsB,CACtB,CAAA,CAAA,WAAA,CAAAU,CACA,CAAA,UAAA,CAAAE,CACF,CAAC,CAAA,CAAE,MAAOjC,CAAU,EAAA,CAClB,KAAK,MAAO,CAAA,MAAA,CAAO,MAAMA,CAAK,CAAA,CAC9B,KAAK,MAAO,CAAA,OAAA,CAAQ,OAAOH,CAAO,CAAA,CAAE,WAAYsC,CAAc,CAAC,CAC/DxB,CAAAA,CAAAA,CAAOX,CAAK,EACd,CAAC,CACM,CAAA,CAAE,aAAA8B,CAAa,CACxB,EAEA,IAAO,CAAA,MAAA,CAA4B,MAAO1C,CAAW,EAAA,CACnD,MAAM,IAAK,CAAA,aAAA,GACX,GAAI,CACF,MAAM,IAAK,CAAA,aAAA,CAAcA,CAAM,EACjC,CAASY,MAAAA,CAAAA,CAAP,CACA,MAAK,IAAA,CAAA,MAAA,CAAO,OAAO,KAAM,CAAA,oCAAoC,EACvDA,CACR,CAEA,KAAM,CAAE,KAAA,CAAAH,CAAM,CAAIT,CAAAA,CAAAA,CACZ2C,EAAcC,sBAAU,EAAA,CACxB,CAAE,IAAMF,CAAAA,CAAAA,CAAc,OAAAlB,CAAAA,CAAAA,CAAS,MAAAD,CAAAA,CAAO,EAAIG,0BAA2B,EAAA,CAC3E,YAAK,MAAO,CAAA,IAAA,CAAKE,kBAAY,gBAAkBe,CAAAA,CAAW,EAAG,CAAC,CAAE,MAAA/B,CAAM,CAAA,GAAW,CAC3EA,CAAOW,CAAAA,CAAAA,CAAOX,CAAK,CAClBY,CAAAA,CAAAA,GACP,CAAC,CAED,CAAA,MAAM,KAAK,SAAUf,CAAAA,CAAAA,CAAOW,iBAAWmB,cAAc,CAAC,EACtD,IAAK,CAAA,WAAA,CAAY,CACf,KAAA9B,CAAAA,CAAAA,CACA,OAAQ,kBACR,CAAA,MAAA,CAAQ,EACR,CAAA,WAAA,CAAAkC,EACA,oBAAsB,CAAA,CAAA,CACxB,CAAC,CAAA,CAAE,KAAOK,CAAAA,CAAAA,EAAM,CACdzB,CAAOyB,CAAAA,CAAC,EACV,CAAC,CAAA,CAEM,CAAE,YAAAN,CAAAA,CAAa,CACxB,CAEA,CAAA,IAAA,CAAO,QAA8B,MAAU1C,CAAAA,EAAsC,CACnF,MAAM,IAAA,CAAK,eACX,CAAA,GAAI,CACF,MAAM,IAAA,CAAK,eAAeA,CAAM,EAClC,OAASY,CAAP,CAAA,CACA,WAAK,MAAO,CAAA,MAAA,CAAO,MAAM,sCAAsC,CAAA,CACzDA,CACR,CACA,KAAM,CAAE,OAAAqC,CAAAA,CAAAA,CAAS,QAAAC,CAAS,CAAA,KAAA,CAAAzC,CAAO,CAAA,MAAA,CAAAS,CAASpB,CAAAA,eAAAA,CAAgB,kBAAkB,GAAI,CAAA,GAAI,EAAIE,CAClF2C,CAAAA,CAAAA,CAAcC,wBACdC,CAAAA,CAAAA,CAAaC,6BAAiB,CAAA,QAAA,GAC9B,CAAE,IAAA,CAAAK,EAAM,OAAA3B,CAAAA,CAAAA,CAAS,OAAAD,CAAO,CAAA,CAAIG,0BAChCR,CAAAA,CAAAA,CACA,oCACF,CAAA,CACA,YAAK,MAAO,CAAA,IAAA,CACVU,kBAAY,iBAAmBe,CAAAA,CAAW,EAC1C,CAAC,CAAE,MAAA/B,CAAO,CAAA,MAAA,CAAAwC,CAAO,CAAM,GAAA,CACjBxC,EAAOW,CAAOX,CAAAA,CAAK,EAClBY,CAAQ4B,CAAAA,CAAM,EACrB,CACF,CACO,CAAA,MAAM,QAAQ,GAAI,CAAA,CACvB,IAAI,OAAc,CAAA,MAAO5B,GAAY,CACnC,MAAM,KAAK,WAAY,CAAA,CACrB,YAAAmB,CACA,CAAA,UAAA,CAAAE,EACA,KAAApC,CAAAA,CAAAA,CACA,OAAQ,mBACR,CAAA,MAAA,CAAQ,CACN,OAAA,CAASP,CAAAC,CAAAA,CAAAA,CAAA,GACJ+C,CADI,CAAA,CAAA,CAEP,gBAAiB9B,gBAAWF,CAAAA,CAAM,CACpC,CACA,CAAA,CAAA,OAAA,CAAA+B,CACF,CACA,CAAA,MAAA,CAAA/B,EACA,oBAAsB,CAAA,CAAA,CACxB,CAAC,CAAE,CAAA,KAAA,CAAON,GAAUW,CAAOX,CAAAA,CAAK,CAAC,CAAA,CACjC,IAAK,CAAA,MAAA,CAAO,OAAO,IAAK,CAAA,sBAAA,CAAwB,CAC9C,KAAAH,CAAAA,CAAAA,CACA,QAAAyC,CACA,CAAA,OAAA,CAAAD,EACA,EAAIN,CAAAA,CACN,CAAC,CACDnB,CAAAA,CAAAA,GACF,CAAC,CAAA,CACD,IAAI,OAAc,CAAA,MAAOA,CAAY,EAAA,CACnC,MAAM6B,CAAAA,CAAa,MAAMC,iBACvB,CAAA,IAAA,CAAK,OAAO,IAAK,CAAA,OAAA,CACjBC,6BACF,CACAC,CAAAA,4BAAAA,CAAuB,CAAE,EAAIb,CAAAA,CAAAA,CAAa,MAAAlC,CAAO,CAAA,UAAA,CAAA4C,CAAW,CAAC,CAAA,CAC7D7B,IACF,CAAC,CACD2B,CAAAA,CAAAA,EACF,CAAC,EAAE,IAAMC,CAAAA,CAAAA,EAAWA,EAAO,CAAC,CAAC,CAC/B,CAEA,CAAA,IAAA,CAAO,QAA8B,MAAOpD,CAAAA,EAAW,CACrD,MAAM,IAAA,CAAK,eACX,CAAA,MAAM,KAAK,cAAeA,CAAAA,CAAM,CAChC,CAAA,KAAM,CAAE,KAAA,CAAAS,EAAO,QAAAgD,CAAAA,CAAS,EAAIzD,CACtB,CAAA,CAAE,GAAA+B,CAAG,CAAA,CAAI0B,EACXC,4BAAgBD,CAAAA,CAAQ,EAC1B,MAAM,IAAA,CAAK,WAAW,CAAE,EAAA,CAAA1B,EAAI,KAAAtB,CAAAA,CAAAA,CAAO,MAAQgD,CAAAA,CAAAA,CAAS,MAAQ,CAAA,oBAAA,CAAsB,EAAK,CAAC,CAAA,CAC/EE,4BAAeF,CAAQ,CAAA,EAChC,MAAM,IAAK,CAAA,SAAA,CAAU1B,EAAItB,CAAOgD,CAAAA,CAAAA,CAAS,KAAK,CAEhD,CAAA,IAAA,CAAK,qBAAqBzD,CAAM,EAClC,EAEA,IAAO,CAAA,IAAA,CAAwB,MAAOA,CAAAA,EAAW,CAC/C,MAAM,KAAK,aAAc,EAAA,CACzB,GAAI,CACF,MAAM,KAAK,WAAYA,CAAAA,CAAM,EAC/B,CAASY,MAAAA,CAAAA,CAAP,CACA,MAAK,IAAA,CAAA,MAAA,CAAO,OAAO,KAAM,CAAA,gCAAgC,EACnDA,CACR,CACA,KAAM,CAAE,KAAAH,CAAAA,CAAM,EAAIT,CAClB,CAAA,GAAI,KAAK,MAAO,CAAA,OAAA,CAAQ,KAAK,QAASS,CAAAA,CAAK,EAAG,CAC5C,MAAMkC,EAAcC,sBAAU,EAAA,CACxBC,EAAaC,2BAAe,EAAA,CAAE,UAC9B,CAAA,CAAE,IAAAK,CAAAA,CAAAA,CAAM,OAAA3B,CAAAA,CAAAA,CAAS,OAAAD,CAAO,CAAA,CAAIG,4BAClC,CAAA,IAAA,CAAK,OAAO,IAAKE,CAAAA,iBAAAA,CAAY,eAAgBe,CAAW,CAAA,CAAG,CAAC,CAAE,KAAA,CAAA/B,CAAM,CAAW,GAAA,CACzEA,EAAOW,CAAOX,CAAAA,CAAK,CAClBY,CAAAA,CAAAA,GACP,CAAC,EACD,MAAM,OAAA,CAAQ,IAAI,CAChB,IAAA,CAAK,YAAY,CACf,KAAA,CAAAf,EACA,MAAQ,CAAA,gBAAA,CACR,OAAQ,EAAC,CACT,qBAAsB,CACtB,CAAA,CAAA,WAAA,CAAAkC,EACA,UAAAE,CAAAA,CACF,CAAC,CAAA,CACDM,CAAK,EACP,CAAC,EACQ,CAAA,KAAA,IAAA,CAAK,OAAO,IAAK,CAAA,OAAA,CAAQ,SAAS,IAAK,CAAA,QAAA,CAAS1C,CAAK,CAC9D,EAAA,MAAM,KAAK,MAAO,CAAA,IAAA,CAAK,QAAQ,IAAK,CAAA,CAAE,MAAAA,CAAM,CAAC,EAEjD,CAAA,CAEA,IAAO,CAAA,IAAA,CAAwB,MAAOT,CAAW,EAAA,CAC/C,MAAM,IAAK,CAAA,aAAA,GACX,MAAM,IAAA,CAAK,YAAYA,CAAM,CAAA,CAC7B,KAAM,CAAE,KAAA,CAAAS,EAAO,KAAAmD,CAAAA,CAAAA,CAAO,QAAAX,CAAQ,CAAA,CAAIjD,EAC5B6C,CAAaC,CAAAA,2BAAAA,GAAiB,QAAS,EAAA,CAC7C,MAAM,IAAK,CAAA,WAAA,CAAY,CACrB,KAAArC,CAAAA,CAAAA,CACA,OAAQ,iBACR,CAAA,MAAA,CAAQ,CAAE,KAAAmD,CAAAA,CAAAA,CAAO,QAAAX,CAAQ,CAAA,CACzB,qBAAsB,CACtB,CAAA,CAAA,UAAA,CAAAJ,CACF,CAAC,EACH,CAAA,CAEA,KAAO,UAAoC,CAAA,MAAO7C,GAAW,CAC3D,MAAM,KAAK,aAAc,EAAA,CACzB,MAAM,IAAK,CAAA,iBAAA,CAAkBA,CAAM,CACnC,CAAA,KAAM,CAAE,KAAAS,CAAAA,CAAM,EAAIT,CAClB,CAAA,GAAI,IAAK,CAAA,MAAA,CAAO,OAAQ,CAAA,IAAA,CAAK,SAASS,CAAK,CAAA,CAEzC,MAAM,IAAK,CAAA,WAAA,CAAY,CACrB,KAAAA,CAAAA,CAAAA,CACA,OAAQ,kBACR,CAAA,MAAA,CAAQ+B,kBAAY,mBAAmB,CAAA,CACvC,qBAAsB,CACxB,CAAA,CAAC,EACD,MAAM,IAAA,CAAK,aAAc,CAAA,CAAE,KAAA/B,CAAAA,CAAAA,CAAO,UAAW,CAAM,CAAA,CAAC,UAC3C,IAAK,CAAA,MAAA,CAAO,KAAK,OAAQ,CAAA,QAAA,CAAS,KAAK,QAASA,CAAAA,CAAK,EAC9D,MAAM,IAAA,CAAK,OAAO,IAAK,CAAA,OAAA,CAAQ,WAAW,CAAE,KAAA,CAAAA,CAAM,CAAC,CAC9C,CAAA,KAAA,CACL,KAAM,CAAE,OAAA,CAAAM,CAAQ,CAAIC,CAAAA,sBAAAA,CAClB,mBACA,CAAuCP,oCAAAA,EAAAA,CAAAA,CAAAA,CACzC,EACA,MAAM,IAAI,MAAMM,CAAO,CAAA,CAE3B,EAEA,IAAO,CAAA,IAAA,CAAyBf,IAC9B,IAAK,CAAA,aAAA,EACE,CAAA,IAAA,CAAK,MAAO,CAAA,OAAA,CAAQ,QAAS,CAAA,MAAA,CAAQ6B,GAAYgC,yBAAoBhC,CAAAA,CAAAA,CAAS7B,CAAM,CAAC,CAAA,CAAA,CAG9F,KAAO,yBAAkE,CAAA,IAChE,KAAK,MAAO,CAAA,cAAA,CAAe,QAKpC,CAAA,IAAA,CAAQ,yBAAsE,MAC5E6B,CAAAA,EACG,CAEH,GAAKA,CAAQ,CAAA,YAAA,CAEb,GAAI,CACF,MAAMiC,EAAU,IAAK,CAAA,MAAA,CAAO,KAAK,OAAQ,CAAA,QAAA,CAAS,IAAIjC,CAAQ,CAAA,YAAY,EAEpEkC,CADc,CAAA,IAAA,CAAK,OAAO,IAAK,CAAA,OAAA,CAAQ,SAAS,MAAO,EAAA,CAC9B,MAC5BC,CAAAA,CAAAA,EAAG,CA1kBZ,IAAAC,EAAAC,CA2kBU,CAAA,OAAA,CAAA,CAAAD,EAAAD,CAAE,CAAA,YAAA,GAAF,YAAAC,CAAgB,CAAA,GAAA,GAAA,CAAA,CAChBC,EAAAF,CAAE,CAAA,YAAA,GAAF,YAAAE,CAAgB,CAAA,GAAA,IAAQrC,EAAQ,IAAK,CAAA,QAAA,CAAS,KAC9CmC,CAAE,CAAA,KAAA,EACFA,CAAE,CAAA,KAAA,GAAUF,CAAQ,CAAA,KAAA,CACxB,EACA,GAAIC,CAAAA,CAAW,SAAW,CAAG,CAAA,OAC7B,KAAK,MAAO,CAAA,MAAA,CAAO,KAAK,CAAeA,YAAAA,EAAAA,CAAAA,CAAW,6BAA6B,CAC/E,CAAA,MAAM,QAAQ,GACZA,CAAAA,CAAAA,CAAW,IAAKC,CAAM,EAAA,IAAA,CAAK,MAAO,CAAA,IAAA,CAAK,OAAQ,CAAA,UAAA,CAAW,CAAE,KAAOA,CAAAA,CAAAA,CAAE,KAAM,CAAC,CAAC,CAC/E,CACA,CAAA,IAAA,CAAK,OAAO,MAAO,CAAA,IAAA,CAAK,sCAAsC,EAChE,CAAA,MAASpD,EAAP,CACA,IAAA,CAAK,OAAO,MAAO,CAAA,KAAA,CAAMA,CAAK,EAChC,CACF,CAAA,CAEA,KAAQ,aAAgD,CAAA,MAAOZ,GAAW,CACxE,KAAM,CAAE,KAAAS,CAAAA,CAAAA,CAAO,kBAAA0D,CAAoB,CAAA,CAAA,CAAA,CAAO,UAAAC,CAAY,CAAA,CAAA,CAAA,CAAM,GAAArC,CAAK,CAAA,CAAE,EAAI/B,CACjE,CAAA,CAAE,IAAAqE,CAAAA,CAAK,CAAI,CAAA,IAAA,CAAK,OAAO,OAAQ,CAAA,GAAA,CAAI5D,CAAK,CAE9C,CAAA,MAAM,KAAK,MAAO,CAAA,IAAA,CAAK,QAAQ,WAAYA,CAAAA,CAAK,EAChD,MAAM,IAAA,CAAK,OAAO,OAAQ,CAAA,MAAA,CAAOA,EAAO+B,iBAAY,CAAA,mBAAmB,CAAC,CAAA,CACxE,IAAK,CAAA,oBAAA,CAAqB/B,EAAO,SAAS,CAAA,CACtC,KAAK,MAAO,CAAA,IAAA,CAAK,OAAO,QAAS,CAAA,GAAA,CAAI4D,EAAK,SAAS,CAAA,EACrD,MAAM,IAAK,CAAA,MAAA,CAAO,KAAK,MAAO,CAAA,aAAA,CAAcA,EAAK,SAAS,CAAA,CAExD,IAAK,CAAA,MAAA,CAAO,IAAK,CAAA,MAAA,CAAO,SAAS,GAAI5D,CAAAA,CAAK,GAC5C,MAAM,IAAA,CAAK,OAAO,IAAK,CAAA,MAAA,CAAO,aAAaA,CAAK,CAAA,CAE7C0D,GAAmB,IAAK,CAAA,MAAA,CAAO,KAAK,OAAQ,CAAA,GAAA,CAAI1D,CAAK,CAG1D,CAAA,IAAA,CAAK,MAAO,CAAA,IAAA,CAAK,OACd,CAAA,UAAA,CAAW8C,6BAA6B,CACxC,CAAA,KAAA,CAAOP,GAAM,IAAK,CAAA,MAAA,CAAO,OAAO,IAAKA,CAAAA,CAAC,CAAC,CAC1C,CAAA,IAAA,CAAK,2BAA4B,CAAA,OAAA,CAASsB,GAAM,CAC1CA,CAAAA,CAAE,QAAU7D,CACd,EAAA,IAAA,CAAK,2BAA4B6D,CAAAA,CAAAA,CAAE,EAAI9B,CAAAA,iBAAAA,CAAY,mBAAmB,CAAC,EAE3E,CAAC,CACG4B,CAAAA,CAAAA,EAAW,KAAK,MAAO,CAAA,MAAA,CAAO,KAAK,gBAAkB,CAAA,CAAE,GAAArC,CAAI,CAAA,KAAA,CAAAtB,CAAM,CAAC,EACxE,EAEA,IAAQ,CAAA,cAAA,CAAkD,MAAOsB,CAAIoC,CAAAA,CAAAA,GAAsB,CACzF,MAAM,OAAA,CAAQ,IAAI,CAChB,IAAA,CAAK,OAAO,QAAS,CAAA,MAAA,CAAOpC,EAAIS,iBAAY,CAAA,mBAAmB,CAAC,CAChE2B,CAAAA,CAAAA,CAAoB,QAAQ,OAAQ,EAAA,CAAI,KAAK,MAAO,CAAA,IAAA,CAAK,OAAQ,CAAA,GAAA,CAAIpC,CAAE,CACzE,CAAC,CACD,CAAA,IAAA,CAAK,qBAAqBA,CAAI,CAAA,UAAU,EAC1C,CAEA,CAAA,IAAA,CAAQ,4BAA4E,MAClFA,CAAAA,CACAU,EACA0B,CAAoB,CAAA,CAAA,CAAA,GACjB,CACH,MAAM,OAAA,CAAQ,IAAI,CAChB,IAAA,CAAK,MAAO,CAAA,cAAA,CAAe,MAAOpC,CAAAA,CAAAA,CAAIU,CAAM,CAC5C0B,CAAAA,CAAAA,CAAoB,QAAQ,OAAQ,EAAA,CAAI,KAAK,MAAO,CAAA,IAAA,CAAK,QAAQ,GAAIpC,CAAAA,CAAE,CACzE,CAAC,CAAA,CACD,KAAK,oBAAqBA,CAAAA,CAAAA,CAAI,SAAS,CACvC,CAAA,IAAA,CAAK,mBAAoB,CAAA,KAAA,CAAQ,IAAK,CAAA,mBAAA,CAAoB,MAAM,MAAQuC,CAAAA,CAAAA,EAAMA,EAAE,EAAOvC,GAAAA,CAAE,EAErFoC,CACF,GAAA,IAAA,CAAK,oBAAoB,KAAQvE,CAAAA,mBAAAA,CAAoB,KACrD,IAAK,CAAA,MAAA,CAAO,OAAO,IAAK,CAAA,wBAAA,CAA0B,CAAE,EAAAmC,CAAAA,CAAG,CAAC,CAAA,EAE5D,CAEA,CAAA,IAAA,CAAQ,UAAwC,MAAOtB,CAAAA,CAAOS,IAAW,CACnE,IAAA,CAAK,OAAO,OAAQ,CAAA,IAAA,CAAK,SAAST,CAAK,CAAA,EACzC,MAAM,IAAK,CAAA,MAAA,CAAO,QAAQ,MAAOA,CAAAA,CAAAA,CAAO,CAAE,MAAAS,CAAAA,CAAO,CAAC,CAAA,CAEpD,IAAK,CAAA,MAAA,CAAO,KAAK,OAAQ,CAAA,GAAA,CAAIT,EAAOS,CAAM,EAC5C,EAEA,IAAQ,CAAA,WAAA,CAA4C,MAAOa,CAAIV,CAAAA,CAAAA,GAAa,CAC1E,MAAM,IAAA,CAAK,OAAO,QAAS,CAAA,GAAA,CAAIU,EAAIV,CAAQ,CAAA,CAC3C,IAAK,CAAA,MAAA,CAAO,IAAK,CAAA,OAAA,CAAQ,IAAIU,CAAIX,CAAAA,gBAAAA,CAAWtB,gBAAgB,iBAAkB,CAAA,GAAA,CAAI,GAAG,CAAC,EACxF,EAEA,IAAQ,CAAA,wBAAA,CAAsE,MAC5EyE,CACG,EAAA,CACH,KAAM,CAAE,EAAA,CAAAxC,EAAI,KAAAtB,CAAAA,CAAAA,CAAO,MAAAT,CAAAA,CAAAA,CAAQ,aAAAwE,CAAAA,CAAc,EAAID,CACvCrD,CAAAA,CAAAA,CACJlB,EAAO,OAAQ,CAAA,eAAA,EAAmBoB,iBAAWtB,eAAgB,CAAA,iBAAA,CAAkB,IAAI,GAAG,CAAA,CACxF,MAAM,IAAK,CAAA,MAAA,CAAO,eAAe,GAAIiC,CAAAA,CAAAA,CAAI,CACvC,EAAAA,CAAAA,CAAAA,CACA,KAAAtB,CAAAA,CAAAA,CACA,MAAAT,CAAAA,CAAAA,CACA,cAAAwE,CACF,CAAC,EACGtD,CAAQ,EAAA,IAAA,CAAK,OAAO,IAAK,CAAA,OAAA,CAAQ,IAAIa,CAAIb,CAAAA,CAAM,EACrD,CAEA,CAAA,IAAA,CAAQ,YAA4C,MAAOuD,CAAAA,EAAS,CAClE,KAAM,CAAE,KAAAhE,CAAAA,CAAAA,CAAO,MAAAiE,CAAAA,CAAAA,CAAQ,OAAA1E,CAAQ,CAAA,MAAA,CAAAkB,EAAQ,UAAA2B,CAAAA,CAAAA,CAAY,YAAAF,CAAa,CAAA,oBAAA,CAAAgC,CAAqB,CAAIF,CAAAA,CAAAA,CACnFG,EAAUC,iCAAqBH,CAAAA,CAAAA,CAAQ1E,EAAQ2C,CAAW,CAAA,CAChE,GAAImC,eAAU,EAAA,EAAKC,iBAAkB,CAAA,QAAA,CAASL,CAAM,CAAA,CAAG,CACrD,MAAMM,CAAAA,CAAOC,kBAAY,IAAK,CAAA,SAAA,CAAUL,CAAO,CAAC,CAAA,CAChD,KAAK,MAAO,CAAA,IAAA,CAAK,OAAO,QAAS,CAAA,CAAE,cAAeI,CAAK,CAAC,GAE1D,IAAIjE,CAAAA,CACJ,GAAI,CACFA,CAAU,CAAA,MAAM,KAAK,MAAO,CAAA,IAAA,CAAK,OAAO,MAAON,CAAAA,CAAAA,CAAOmE,CAAO,EAC/D,CAAA,MAAShE,EAAP,CACA,MAAA,MAAM,KAAK,OAAQ,EAAA,CACnB,KAAK,MAAO,CAAA,MAAA,CAAO,MAAM,CAAmDH,gDAAAA,EAAAA,CAAAA,CAAAA,OAAAA,CAAc,CACpFG,CAAAA,CACR,CACA,MAAMsE,EAAOpF,eAAgB4E,CAAAA,CAAM,EAAE,GACrC,CAAA,OAAIxD,IAAQgE,CAAK,CAAA,GAAA,CAAMhE,GACnB2B,CAAYqC,GAAAA,CAAAA,CAAK,GAAKrC,CAC1B,CAAA,CAAA,IAAA,CAAK,OAAO,IAAK,CAAA,OAAA,CAAQ,IAAIpC,CAAOmE,CAAAA,CAAO,CACvCD,CAAAA,CAAAA,EACFO,CAAK,CAAA,QAAA,CAAWhF,EAAAC,CAAA,CAAA,EAAA,CACX+E,EAAK,QADM,CAAA,CAAA,CAEd,qBAAsB,CACxB,CAAA,CAAA,CAAA,CACA,MAAM,IAAK,CAAA,MAAA,CAAO,KAAK,OAAQ,CAAA,OAAA,CAAQzE,EAAOM,CAASmE,CAAAA,CAAI,GAE3D,IAAK,CAAA,MAAA,CAAO,IAAK,CAAA,OAAA,CACd,OAAQzE,CAAAA,CAAAA,CAAOM,EAASmE,CAAI,CAAA,CAC5B,MAAOtE,CAAU,EAAA,IAAA,CAAK,OAAO,MAAO,CAAA,KAAA,CAAMA,CAAK,CAAC,CAAA,CAE9CgE,EAAQ,EACjB,CAAA,CAEA,KAAQ,UAA0C,CAAA,MAAOH,GAAS,CAChE,KAAM,CAAE,EAAA,CAAA1C,CAAI,CAAA,KAAA,CAAAtB,EAAO,MAAA2C,CAAAA,CAAAA,CAAQ,qBAAAuB,CAAqB,CAAA,CAAIF,EAC9CG,CAAUO,CAAAA,gCAAAA,CAAoBpD,EAAIqB,CAAM,CAAA,CAC9C,IAAIrC,CACJ,CAAA,GAAI,CACFA,CAAU,CAAA,MAAM,KAAK,MAAO,CAAA,IAAA,CAAK,OAAO,MAAON,CAAAA,CAAAA,CAAOmE,CAAO,EAC/D,CAAA,MAAShE,EAAP,CAEA,MAAA,MAAM,KAAK,OAAQ,EAAA,CACnB,KAAK,MAAO,CAAA,MAAA,CAAO,MAAM,CAAkDH,+CAAAA,EAAAA,CAAAA,CAAAA,OAAAA,CAAc,EACnFG,CACR,CACA,IAAIwE,CACJ,CAAA,GAAI,CACFA,CAAAA,CAAS,MAAM,IAAA,CAAK,OAAO,IAAK,CAAA,OAAA,CAAQ,IAAI3E,CAAOsB,CAAAA,CAAE,EACvD,CAASnB,MAAAA,CAAAA,CAAP,CACA,MAAK,IAAA,CAAA,MAAA,CAAO,OAAO,KAAM,CAAA,CAAA,4BAAA,EAA+BH,MAAUsB,CAAY,CAAA,QAAA,CAAA,CAAA,CACxEnB,CACR,CACA,MAAMsE,CAAOpF,CAAAA,eAAAA,CAAgBsF,CAAO,CAAA,OAAA,CAAQ,MAAM,CAAE,CAAA,GAAA,CAChDT,GACFO,CAAK,CAAA,QAAA,CAAWhF,EAAAC,CAAA,CAAA,EAAA,CACX+E,EAAK,QADM,CAAA,CAAA,CAEd,qBAAsB,CACxB,CAAA,CAAA,CAAA,CACA,MAAM,IAAK,CAAA,MAAA,CAAO,KAAK,OAAQ,CAAA,OAAA,CAAQzE,CAAOM,CAAAA,CAAAA,CAASmE,CAAI,CAAA,EAE3D,KAAK,MAAO,CAAA,IAAA,CAAK,QACd,OAAQzE,CAAAA,CAAAA,CAAOM,EAASmE,CAAI,CAAA,CAC5B,MAAOtE,CAAU,EAAA,IAAA,CAAK,OAAO,MAAO,CAAA,KAAA,CAAMA,CAAK,CAAC,CAAA,CAErD,MAAM,IAAK,CAAA,MAAA,CAAO,IAAK,CAAA,OAAA,CAAQ,OAAQgE,CAAAA,CAAO,EAChD,CAEA,CAAA,IAAA,CAAQ,UAAwC,MAAO7C,CAAAA,CAAItB,EAAOG,CAAU,GAAA,CAC1E,MAAMgE,CAAUS,CAAAA,+BAAAA,CAAmBtD,EAAInB,CAAK,CAAA,CAC5C,IAAIG,CACJ,CAAA,GAAI,CACFA,CAAU,CAAA,MAAM,IAAK,CAAA,MAAA,CAAO,IAAK,CAAA,MAAA,CAAO,OAAON,CAAOmE,CAAAA,CAAO,EAC/D,CAAShE,MAAAA,CAAAA,CAAP,CACA,MAAM,MAAA,IAAA,CAAK,SACX,CAAA,IAAA,CAAK,OAAO,MAAO,CAAA,KAAA,CAAM,iDAAiDH,CAAc,CAAA,OAAA,CAAA,CAAA,CAClFG,CACR,CACA,IAAIwE,CACJ,CAAA,GAAI,CACFA,CAAAA,CAAS,MAAM,IAAK,CAAA,MAAA,CAAO,KAAK,OAAQ,CAAA,GAAA,CAAI3E,EAAOsB,CAAE,EACvD,OAASnB,CAAP,CAAA,CACA,WAAK,MAAO,CAAA,MAAA,CAAO,MAAM,CAA8BH,2BAAAA,EAAAA,CAAAA,CAAAA,EAAAA,EAAUsB,WAAY,CACvEnB,CAAAA,CACR,CACA,MAAMsE,CAAOpF,CAAAA,eAAAA,CAAgBsF,EAAO,OAAQ,CAAA,MAAM,EAAE,GAEpD,CAAA,IAAA,CAAK,OAAO,IAAK,CAAA,OAAA,CAAQ,QAAQ3E,CAAOM,CAAAA,CAAAA,CAASmE,CAAI,CACrD,CAAA,MAAM,KAAK,MAAO,CAAA,IAAA,CAAK,QAAQ,OAAQN,CAAAA,CAAO,EAChD,CAAA,CAEA,IAAQ,CAAA,OAAA,CAAoC,SAAY,CACtD,MAAMU,EAA0B,EAAC,CAC3BC,EAAwB,EAAC,CAC/B,KAAK,MAAO,CAAA,OAAA,CAAQ,QAAS,CAAA,OAAA,CAAS1D,GAAY,CAChD,IAAI2D,EAAY,CACZC,CAAAA,CAAAA,eAAAA,CAAU5D,CAAQ,CAAA,MAAM,CAAG2D,GAAAA,CAAAA,CAAY,IACtC,IAAK,CAAA,MAAA,CAAO,KAAK,MAAO,CAAA,QAAA,CAAS,IAAI3D,CAAQ,CAAA,KAAK,IAAG2D,CAAY,CAAA,CAAA,CAAA,CAAA,CAClEA,GAAWF,CAAc,CAAA,IAAA,CAAKzD,EAAQ,KAAK,EACjD,CAAC,CACD,CAAA,IAAA,CAAK,MAAO,CAAA,QAAA,CAAS,MAAO,EAAA,CAAE,QAASR,CAAa,EAAA,CAC9CoE,gBAAUpE,CAAS,CAAA,eAAe,GAAGkE,CAAY,CAAA,IAAA,CAAKlE,EAAS,EAAE,EACvE,CAAC,CACD,CAAA,MAAM,QAAQ,GAAI,CAAA,CAChB,GAAGiE,CAAc,CAAA,GAAA,CAAK7E,CAAU,EAAA,IAAA,CAAK,aAAc,CAAA,CAAE,MAAAA,CAAM,CAAC,CAAC,CAC7D,CAAA,GAAG8E,EAAY,GAAKxD,CAAAA,CAAAA,EAAO,KAAK,cAAeA,CAAAA,CAAE,CAAC,CACpD,CAAC,EACH,CA0CA,CAAA,IAAA,CAAQ,oBAA4D,MAAO6B,CAAAA,EAAU,CACnF,IAAA,CAAK,YAAa,CAAA,KAAA,CAAM,KAAKA,CAAK,CAAA,CAClC,MAAM,IAAK,CAAA,oBAAA,GACb,CAEA,CAAA,IAAA,CAAQ,qBAAuB,SAAY,CACzC,GAAI,IAAK,CAAA,YAAA,CAAa,QAAUhE,mBAAoB,CAAA,MAAA,CAAQ,CAC1D,IAAK,CAAA,MAAA,CAAO,MAAO,CAAA,IAAA,CAAK,2CAA2C,CAAA,CACnE,OAOF,IAJA,IAAA,CAAK,OAAO,MAAO,CAAA,IAAA,CACjB,+BAA+B,IAAK,CAAA,YAAA,CAAa,MAAM,MACzD,CAAA,SAAA,CAAA,CAAA,CAEO,KAAK,YAAa,CAAA,KAAA,CAAM,OAAS,CAAG,EAAA,CACzC,KAAK,YAAa,CAAA,KAAA,CAAQA,mBAAoB,CAAA,MAAA,CAC9C,MAAMsD,CAAAA,CAAU,KAAK,YAAa,CAAA,KAAA,CAAM,OACxC,CAAA,GAAKA,EAEL,GAAI,CACF,KAAK,cAAeA,CAAAA,CAAO,EAE3B,MAAM,IAAI,QAAS1B,CAAY,EAAA,UAAA,CAAWA,EAAS,GAAG,CAAC,EACzD,CAAA,MAASZ,CAAP,CAAA,CACA,KAAK,MAAO,CAAA,MAAA,CAAO,KAAKA,CAAK,EAC/B,EAEF,IAAK,CAAA,YAAA,CAAa,MAAQhB,mBAAoB,CAAA,KAChD,EAEA,IAAQ,CAAA,cAAA,CAAwDgE,GAAU,CACxE,KAAM,CAAE,KAAAnD,CAAAA,CAAAA,CAAO,QAAAmE,CAAQ,CAAA,CAAIhB,EACrB8B,CAAYd,CAAAA,CAAAA,CAAQ,OAC1B,OAAQc,CAAAA,EACN,IAAK,mBAAA,CACH,OAAO,IAAK,CAAA,uBAAA,CAAwBjF,EAAOmE,CAAO,CAAA,CACpD,IAAK,kBACH,CAAA,OAAO,KAAK,sBAAuBnE,CAAAA,CAAAA,CAAOmE,CAAO,CAAA,CACnD,IAAK,kBAAA,CACH,OAAO,IAAK,CAAA,sBAAA,CAAuBnE,EAAOmE,CAAO,CAAA,CACnD,IAAK,kBACH,CAAA,OAAO,KAAK,sBAAuBnE,CAAAA,CAAAA,CAAOmE,CAAO,CACnD,CAAA,IAAK,iBACH,OAAO,IAAA,CAAK,qBAAqBnE,CAAOmE,CAAAA,CAAO,CACjD,CAAA,IAAK,kBACH,CAAA,OAAO,KAAK,sBAAuBnE,CAAAA,CAAAA,CAAOmE,CAAO,CACnD,CAAA,IAAK,oBACH,OAAO,IAAA,CAAK,iBAAiBnE,CAAOmE,CAAAA,CAAO,EAC7C,IAAK,iBAAA,CACH,OAAO,IAAK,CAAA,qBAAA,CAAsBnE,EAAOmE,CAAO,CAAA,CAClD,QACE,OAAO,IAAK,CAAA,MAAA,CAAO,OAAO,IAAK,CAAA,CAAA,2BAAA,EAA8Bc,GAAW,CAC5E,CACF,EAEA,IAAQ,CAAA,oBAAA,CAA8D,MAAO9B,CAAU,EAAA,CACrF,KAAM,CAAE,KAAA,CAAAnD,EAAO,OAAAmE,CAAAA,CAAQ,EAAIhB,CAErB+B,CAAAA,CAAAA,CAAAA,CADS,MAAM,IAAA,CAAK,MAAO,CAAA,IAAA,CAAK,QAAQ,GAAIlF,CAAAA,CAAAA,CAAOmE,EAAQ,EAAE,CAAA,EAC1C,QAAQ,MACjC,CAAA,OAAQe,GACN,IAAK,oBACH,OAAO,IAAA,CAAK,yBAAyBlF,CAAOmE,CAAAA,CAAO,EACrD,IAAK,kBAAA,CACH,OAAO,IAAA,CAAK,uBAAwBnE,CAAAA,CAAAA,CAAOmE,CAAO,CACpD,CAAA,IAAK,mBACH,OAAO,IAAA,CAAK,wBAAwBnE,CAAOmE,CAAAA,CAAO,EACpD,IAAK,kBAAA,CACH,OAAO,IAAK,CAAA,uBAAA,CAAwBnE,EAAOmE,CAAO,CAAA,CACpD,IAAK,gBACH,CAAA,OAAO,IAAK,CAAA,qBAAA,CAAsBnE,CAAOmE,CAAAA,CAAO,EAClD,IAAK,mBAAA,CACH,OAAO,IAAK,CAAA,wBAAA,CAAyBnE,EAAOmE,CAAO,CAAA,CACrD,QACE,OAAO,IAAA,CAAK,OAAO,MAAO,CAAA,IAAA,CAAK,+BAA+Be,CAAW,CAAA,CAAA,CAC7E,CACF,CAEA,CAAA,IAAA,CAAQ,0BAA2E/B,CAAAA,CAAAA,EAAU,CAC3F,KAAM,CAAE,KAAAnD,CAAAA,CAAM,EAAImD,CACZ,CAAA,CAAE,QAAA7C,CAAQ,CAAA,CAAIC,uBAClB,oBACA,CAAA,CAAA,yBAAA,EAA4BP,4DAC9B,CACA,CAAA,MAAM,IAAI,KAAMM,CAAAA,CAAO,CACzB,CAIA,CAAA,IAAA,CAAQ,uBAAoE,CAAA,MAC1EN,CACAmE,CAAAA,CAAAA,GACG,CACH,KAAM,CAAE,OAAA5E,CAAQ,CAAA,EAAA,CAAA+B,CAAG,CAAI6C,CAAAA,CAAAA,CACvB,GAAI,CACF,IAAA,CAAK,eAAezE,CAAA,CAAA,EAAA,CAAKyE,EAAQ,MAAQ,CAAA,CAAA,CACzC,MAAMzD,CACJnB,CAAAA,CAAAA,CAAO,eAAmBoB,EAAAA,gBAAAA,CAAWtB,eAAgB,CAAA,iBAAA,CAAkB,IAAI,GAAG,CAAA,CAC1EuB,EAAWlB,CAAA,CAAA,CAAE,GAAA4B,CAAI,CAAA,YAAA,CAActB,EAAO,eAAAU,CAAAA,CAAAA,CAAAA,CAAoBnB,GAChE,MAAM,IAAA,CAAK,YAAY+B,CAAIV,CAAAA,CAAQ,EACnC,MAAM2D,CAAAA,CAAOC,iBAAY,CAAA,IAAA,CAAK,SAAUL,CAAAA,CAAO,CAAC,CAC1CJ,CAAAA,CAAAA,CAAgB,MAAM,IAAK,CAAA,gBAAA,CAAiBQ,EAAM3D,CAAS,CAAA,QAAA,CAAS,QAAQ,CAClF,CAAA,IAAA,CAAK,OAAO,MAAO,CAAA,IAAA,CAAK,mBAAoB,CAAE,EAAA,CAAAU,EAAI,MAAQV,CAAAA,CAAAA,CAAU,aAAAmD,CAAAA,CAAc,CAAC,EACrF,OAASoB,CAAP,CAAA,CACA,MAAM,IAAK,CAAA,SAAA,CAAU7D,EAAItB,CAAOmF,CAAAA,CAAG,EACnC,IAAK,CAAA,MAAA,CAAO,OAAO,KAAMA,CAAAA,CAAG,EAC9B,CACF,CAAA,CAEA,KAAQ,wBAAsE,CAAA,MAC5EnF,CACAmE,CAAAA,CAAAA,GACG,CACH,KAAM,CAAE,EAAA7C,CAAAA,CAAG,EAAI6C,CACf,CAAA,GAAIlB,6BAAgBkB,CAAO,CAAA,CAAG,CAC5B,KAAM,CAAE,OAAAxB,CAAO,CAAA,CAAIwB,EACnB,IAAK,CAAA,MAAA,CAAO,OAAO,KAAM,CAAA,CAAE,IAAM,CAAA,QAAA,CAAU,MAAQ,CAAA,0BAAA,CAA4B,OAAAxB,CAAO,CAAC,EACvF,MAAM/B,CAAAA,CAAW,KAAK,MAAO,CAAA,QAAA,CAAS,IAAIU,CAAE,CAAA,CAC5C,KAAK,MAAO,CAAA,MAAA,CAAO,MAAM,CAAE,IAAA,CAAM,SAAU,MAAQ,CAAA,0BAAA,CAA4B,QAAAV,CAAAA,CAAS,CAAC,CAAA,CACzF,MAAMc,CAAgBd,CAAAA,CAAAA,CAAS,SAAS,SACxC,CAAA,IAAA,CAAK,OAAO,MAAO,CAAA,KAAA,CAAM,CACvB,IAAM,CAAA,QAAA,CACN,OAAQ,0BACR,CAAA,aAAA,CAAAc,CACF,CAAC,CAAA,CACD,MAAMC,CAAgBgB,CAAAA,CAAAA,CAAO,kBAC7B,CAAA,IAAA,CAAK,MAAO,CAAA,MAAA,CAAO,MAAM,CACvB,IAAA,CAAM,SACN,MAAQ,CAAA,0BAAA,CACR,cAAAhB,CACF,CAAC,EACD,MAAMC,CAAAA,CAAe,MAAM,IAAK,CAAA,MAAA,CAAO,KAAK,MAAO,CAAA,iBAAA,CACjDF,EACAC,CACF,CAAA,CACA,KAAK,MAAO,CAAA,MAAA,CAAO,MAAM,CACvB,IAAA,CAAM,SACN,MAAQ,CAAA,0BAAA,CACR,aAAAC,CACF,CAAC,EACD,MAAMwD,CAAAA,CAAiB,MAAM,IAAK,CAAA,MAAA,CAAO,KAAK,OAAQ,CAAA,SAAA,CAAUxD,CAAY,CAC5E,CAAA,IAAA,CAAK,MAAO,CAAA,MAAA,CAAO,KAAM,CAAA,CACvB,KAAM,QACN,CAAA,MAAA,CAAQ,2BACR,cAAAwD,CAAAA,CACF,CAAC,CACD,CAAA,MAAM,KAAK,MAAO,CAAA,IAAA,CAAK,QAAQ,QAAS,CAAA,CAAE,MAAApF,CAAM,CAAC,WACxCkD,2BAAeiB,CAAAA,CAAO,CAAG,CAAA,CAClC,MAAM,IAAA,CAAK,OAAO,QAAS,CAAA,MAAA,CAAO7C,EAAIS,iBAAY,CAAA,mBAAmB,CAAC,CACtE,CAAA,MAAMsD,EAASlE,iBAAY,CAAA,iBAAiB,EAE5C,GADkB,IAAA,CAAK,OAAO,aAAckE,CAAAA,CAAM,IAChC,CAChB,CAAA,MAAM,IAAI,KAAA,CAAM,CAAYA,SAAAA,EAAAA,CAAAA,CAAAA,2BAAAA,CAAmC,EAEjE,IAAK,CAAA,MAAA,CAAO,KAAKlE,iBAAY,CAAA,iBAAiB,EAAG,CAAE,KAAA,CAAOgD,EAAQ,KAAM,CAAC,GAE7E,CAEA,CAAA,IAAA,CAAQ,uBAAkE,MACxEnE,CAAAA,CACAmE,IACG,CACH,KAAM,CAAE,EAAA,CAAA7C,CAAI,CAAA,MAAA,CAAA/B,CAAO,CAAI4E,CAAAA,CAAAA,CACvB,GAAI,CACF,IAAA,CAAK,4BAA4B5E,CAAM,CAAA,CACvC,KAAM,CAAE,KAAA,CAAA+F,EAAO,UAAAC,CAAAA,CAAAA,CAAY,OAAA9E,CAAQ,CAAA,UAAA,CAAAe,EAAY,iBAAA1B,CAAAA,CAAAA,CAAmB,YAAAH,CAAAA,CAAa,CAC7EwE,CAAAA,CAAAA,CAAQ,OACJ/C,CAAU1B,CAAAA,CAAAA,CAAA,CACd,KAAAM,CAAAA,CAAAA,CACA,MAAAsF,CACA,CAAA,MAAA,CAAA7E,EACA,UAAAe,CAAAA,CAAAA,CACA,aAAc,CACd,CAAA,CAAA,YAAA,CAAA7B,EACA,kBAAoB,CAAA,GACpB,kBAAoB,CAAA,EACpB,CAAA,UAAA,CAAY4F,CAAW,CAAA,SAAA,CACvB,KAAM,CACJ,SAAA,CAAW,GACX,QAAU,CAAA,IAAA,CAAK,OAAO,QACxB,CAAA,CACA,KAAM,CACJ,SAAA,CAAWA,EAAW,SACtB,CAAA,QAAA,CAAUA,EAAW,QACvB,CAAA,CAAA,CACIzF,GAAqB,CAAE,iBAAA,CAAAA,CAAkB,CAAA,CAAA,CAE/C,MAAM,IAAA,CAAK,WAA+B,CACxC,EAAA,CAAIqE,EAAQ,EACZ,CAAA,KAAA,CAAAnE,EACA,MAAQ,CAAA,CAAA,CAAA,CACR,qBAAsB,CACxB,CAAA,CAAC,EACD,MAAMqF,CAAAA,CAASlE,kBAAY,iBAAiB,CAAA,CAE5C,GADkB,IAAK,CAAA,MAAA,CAAO,aAAckE,CAAAA,CAAM,CAChC,GAAA,CAAA,CAChB,MAAM,IAAI,KAAA,CAAM,YAAYA,CAAkC,CAAA,0BAAA,CAAA,CAAA,CAEhE,KAAK,MAAO,CAAA,IAAA,CAAKlE,kBAAY,iBAAiB,CAAA,CAAG,CAAE,OAAAC,CAAAA,CAAQ,CAAC,CAC5D,CAAA,IAAA,CAAK,yBAAyBA,CAAO,EACvC,CAAS+D,MAAAA,CAAAA,CAAP,CACA,MAAM,KAAK,SAAU7D,CAAAA,CAAAA,CAAItB,EAAOmF,CAAG,CAAA,CACnC,KAAK,MAAO,CAAA,MAAA,CAAO,MAAMA,CAAG,EAC9B,CACF,CAEA,CAAA,IAAA,CAAQ,wBAAoE,MAC1EnF,CAAAA,CACAmE,IACG,CACH,KAAM,CAAE,EAAA,CAAA7C,CAAG,CAAA,CAAI6C,EACXlB,4BAAgBkB,CAAAA,CAAO,GACzB,MAAM,IAAA,CAAK,OAAO,OAAQ,CAAA,MAAA,CAAOnE,EAAO,CAAE,YAAA,CAAc,EAAK,CAAC,CAAA,CAC9D,KAAK,MAAO,CAAA,IAAA,CAAKmB,kBAAY,iBAAmBG,CAAAA,CAAE,CAAG,CAAA,EAAE,CAAA,EAC9C4B,4BAAeiB,CAAO,CAAA,GAC/B,MAAM,IAAK,CAAA,MAAA,CAAO,QAAQ,MAAOnE,CAAAA,CAAAA,CAAO+B,kBAAY,mBAAmB,CAAC,EACxE,IAAK,CAAA,MAAA,CAAO,KAAKZ,iBAAY,CAAA,iBAAA,CAAmBG,CAAE,CAAG,CAAA,CAAE,KAAO6C,CAAAA,CAAAA,CAAQ,KAAM,CAAC,GAEjF,CAEA,CAAA,IAAA,CAAQ,uBAAkE,MACxEnE,CAAAA,CACAmE,IACG,CACH,KAAM,CAAE,MAAA5E,CAAAA,CAAAA,CAAQ,GAAA+B,CAAG,CAAA,CAAI6C,EACvB,GAAI,CACF,MAAMqB,CAAY,CAAA,CAAA,EAAGxF,CAGfyF,CAAAA,eAAAA,CAAAA,CAAAA,CAAAA,CAAsBC,iBAAY,CAAA,GAAA,CAAYF,CAAS,CAE7D,CAAA,GAAIC,GAAuB,IAAK,CAAA,kBAAA,CAAmBA,EAAqBnE,CAAE,CAAA,CAAG,CAC3E,IAAK,CAAA,MAAA,CAAO,OAAO,IAAK,CAAA,CAAA,iCAAA,EAAoCA,GAAI,CAChE,CAAA,IAAA,CAAK,UAAUA,CAAItB,CAAAA,CAAAA,CAAO+B,iBAAY,CAAA,wBAAwB,CAAC,CAAA,CAC/D,OAEF,IAAK,CAAA,aAAA,CAAcrC,EAAA,CAAE,KAAA,CAAAM,GAAUT,CAAQ,CAAA,CAAA,CACvC,GAAI,CACFmG,iBAAAA,CAAY,IAAIF,CAAWlE,CAAAA,CAAE,EAC7B,MAAM,IAAA,CAAK,OAAO,OAAQ,CAAA,MAAA,CAAOtB,CAAO,CAAA,CAAE,UAAYT,CAAAA,CAAAA,CAAO,UAAW,CAAC,CAAA,CACzE,MAAM,IAAK,CAAA,UAAA,CAA+B,CACxC,EAAA+B,CAAAA,CAAAA,CACA,MAAAtB,CACA,CAAA,MAAA,CAAQ,GACR,oBAAsB,CAAA,CAAA,CACxB,CAAC,EACH,CAAA,MAASuC,EAAP,CACA,MAAAmD,kBAAY,MAAOF,CAAAA,CAAS,EACtBjD,CACR,CACA,KAAK,MAAO,CAAA,MAAA,CAAO,KAAK,gBAAkB,CAAA,CAAE,GAAAjB,CAAI,CAAA,KAAA,CAAAtB,EAAO,MAAAT,CAAAA,CAAO,CAAC,EACjE,CAAA,MAAS4F,EAAP,CACA,MAAM,IAAK,CAAA,SAAA,CAAU7D,CAAItB,CAAAA,CAAAA,CAAOmF,CAAG,CACnC,CAAA,IAAA,CAAK,OAAO,MAAO,CAAA,KAAA,CAAMA,CAAG,EAC9B,CACF,EAIA,IAAQ,CAAA,kBAAA,CAAqB,CAACQ,CAAgBC,CAAAA,CAAAA,GACrC,SAASA,CAAU,CAAA,QAAA,GAAW,KAAM,CAAA,CAAA,CAAG,CAAE,CAAA,CAAC,CAAK,EAAA,QAAA,CAASD,EAAO,QAAS,EAAA,CAAE,MAAM,CAAG,CAAA,CAAA,CAAE,CAAC,CAG/F,CAAA,IAAA,CAAQ,wBAAoE,CAACE,CAAAA,CAAQ1B,IAAY,CAC/F,KAAM,CAAE,EAAA7C,CAAAA,CAAG,EAAI6C,CACTkB,CAAAA,CAAAA,CAASlE,iBAAY,CAAA,gBAAA,CAAkBG,CAAE,CAAA,CAE/C,GADkB,IAAK,CAAA,MAAA,CAAO,cAAc+D,CAAM,CAAA,GAChC,EAChB,MAAM,IAAI,MAAM,CAAYA,SAAAA,EAAAA,CAAAA,CAAAA,sBAAAA,CAA8B,EAExDpC,4BAAgBkB,CAAAA,CAAO,EACzB,IAAK,CAAA,MAAA,CAAO,KAAKhD,iBAAY,CAAA,gBAAA,CAAkBG,CAAE,CAAA,CAAG,EAAE,EAC7C4B,2BAAeiB,CAAAA,CAAO,GAC/B,IAAK,CAAA,MAAA,CAAO,KAAKhD,iBAAY,CAAA,gBAAA,CAAkBG,CAAE,CAAG,CAAA,CAAE,MAAO6C,CAAQ,CAAA,KAAM,CAAC,EAEhF,CAAA,CAEA,KAAQ,sBAAkE,CAAA,MACxEnE,CACAmE,CAAAA,CAAAA,GACG,CACH,KAAM,CAAE,EAAA7C,CAAAA,CAAG,EAAI6C,CACf,CAAA,GAAI,CACF,IAAK,CAAA,aAAA,CAAc,CAAE,KAAAnE,CAAAA,CAAM,CAAC,CAC5B,CAAA,MAAM,KAAK,SAAUA,CAAAA,CAAAA,CAAOW,iBAAWmB,cAAc,CAAC,CACtD,CAAA,MAAM,IAAK,CAAA,UAAA,CAA+B,CACxC,EAAAR,CAAAA,CAAAA,CACA,MAAAtB,CACA,CAAA,MAAA,CAAQ,GACR,oBAAsB,CAAA,CAAA,CACxB,CAAC,CACD,CAAA,IAAA,CAAK,OAAO,MAAO,CAAA,IAAA,CAAK,iBAAkB,CAAE,EAAA,CAAAsB,EAAI,KAAAtB,CAAAA,CAAM,CAAC,EACzD,CAASmF,MAAAA,CAAAA,CAAP,CACA,MAAM,IAAA,CAAK,UAAU7D,CAAItB,CAAAA,CAAAA,CAAOmF,CAAG,CACnC,CAAA,IAAA,CAAK,OAAO,MAAO,CAAA,KAAA,CAAMA,CAAG,EAC9B,CACF,EAEA,IAAQ,CAAA,uBAAA,CAAoE,CAACU,CAAQ1B,CAAAA,CAAAA,GAAY,CAC/F,KAAM,CAAE,EAAA,CAAA7C,CAAG,CAAI6C,CAAAA,CAAAA,CACTkB,EAASlE,iBAAY,CAAA,gBAAA,CAAkBG,CAAE,CAE/C,CAAA,GADkB,KAAK,MAAO,CAAA,aAAA,CAAc+D,CAAM,CAChC,GAAA,CAAA,CAChB,MAAM,IAAI,KAAA,CAAM,YAAYA,CAA8B,CAAA,sBAAA,CAAA,CAAA,CAExDpC,4BAAgBkB,CAAAA,CAAO,CACzB,CAAA,IAAA,CAAK,OAAO,IAAKhD,CAAAA,iBAAAA,CAAY,iBAAkBG,CAAE,CAAA,CAAG,EAAE,CAAA,CAC7C4B,4BAAeiB,CAAO,CAAA,EAC/B,KAAK,MAAO,CAAA,IAAA,CAAKhD,kBAAY,gBAAkBG,CAAAA,CAAE,EAAG,CAAE,KAAA,CAAO6C,CAAQ,CAAA,KAAM,CAAC,EAEhF,EAEA,IAAQ,CAAA,oBAAA,CAA8D,MAAOnE,CAAOmE,CAAAA,CAAAA,GAAY,CAC9F,KAAM,CAAE,GAAA7C,CAAG,CAAA,CAAI6C,EACf,GAAI,CACF,KAAK,WAAY,CAAA,CAAE,MAAAnE,CAAM,CAAC,CAC1B,CAAA,MAAM,IAAK,CAAA,UAAA,CAA6B,CACtC,EAAAsB,CAAAA,CAAAA,CACA,MAAAtB,CACA,CAAA,MAAA,CAAQ,GACR,oBAAsB,CAAA,CAAA,CACxB,CAAC,CACD,CAAA,IAAA,CAAK,OAAO,MAAO,CAAA,IAAA,CAAK,eAAgB,CAAE,EAAA,CAAAsB,EAAI,KAAAtB,CAAAA,CAAM,CAAC,EACvD,CAASmF,MAAAA,CAAAA,CAAP,CACA,MAAM,IAAA,CAAK,UAAU7D,CAAItB,CAAAA,CAAAA,CAAOmF,CAAG,CACnC,CAAA,IAAA,CAAK,OAAO,MAAO,CAAA,KAAA,CAAMA,CAAG,EAC9B,CACF,EAEA,IAAQ,CAAA,qBAAA,CAAgE,CAACU,CAAQ1B,CAAAA,CAAAA,GAAY,CAC3F,KAAM,CAAE,EAAA,CAAA7C,CAAG,CAAI6C,CAAAA,CAAAA,CACTkB,EAASlE,iBAAY,CAAA,cAAA,CAAgBG,CAAE,CAE7C,CAAA,GADkB,KAAK,MAAO,CAAA,aAAA,CAAc+D,CAAM,CAChC,GAAA,CAAA,CAChB,MAAM,IAAI,KAAA,CAAM,YAAYA,CAA8B,CAAA,sBAAA,CAAA,CAAA,CAI5D,UAAW,CAAA,IAAM,CACXpC,4BAAAA,CAAgBkB,CAAO,CACzB,CAAA,IAAA,CAAK,OAAO,IAAKhD,CAAAA,iBAAAA,CAAY,eAAgBG,CAAE,CAAA,CAAG,EAAE,CAAA,CAC3C4B,4BAAeiB,CAAO,CAAA,EAC/B,KAAK,MAAO,CAAA,IAAA,CAAKhD,kBAAY,cAAgBG,CAAAA,CAAE,CAAG,CAAA,CAAE,KAAO6C,CAAAA,CAAAA,CAAQ,KAAM,CAAC,EAE9E,EAAG,GAAG,EACR,EAEA,IAAQ,CAAA,sBAAA,CAAkE,MACxEnE,CACAmE,CAAAA,CAAAA,GACG,CACH,KAAM,CAAE,GAAA7C,CAAG,CAAA,CAAI6C,EACf,GAAI,CACF,KAAK,iBAAkB,CAAA,CAAE,MAAAnE,CAAO,CAAA,MAAA,CAAQmE,EAAQ,MAAO,CAAC,EACxD,MAAM,OAAA,CAAQ,IAAI,CAChB,IAAI,QAASpD,CAAY,EAAA,CAEvB,KAAK,MAAO,CAAA,IAAA,CAAK,QAAQ,IAAK+E,CAAAA,mBAAAA,CAAe,OAAS,CAAA,SAAY,CAChE/E,CAAAA,CAAQ,MAAM,IAAK,CAAA,aAAA,CAAc,CAAE,KAAAf,CAAAA,CAAAA,CAAO,GAAAsB,CAAG,CAAC,CAAC,EACjD,CAAC,EACH,CAAC,CAAA,CACD,KAAK,UAA+B,CAAA,CAClC,GAAAA,CACA,CAAA,KAAA,CAAAtB,CACA,CAAA,MAAA,CAAQ,CACR,CAAA,CAAA,oBAAA,CAAsB,EACxB,CAAC,CAAA,CACD,KAAK,kCAAmC,CAAA,CAAE,MAAAA,CAAO,CAAA,KAAA,CAAO+B,kBAAY,mBAAmB,CAAE,CAAC,CAC5F,CAAC,EACH,CAASoD,MAAAA,CAAAA,CAAP,CACA,IAAK,CAAA,MAAA,CAAO,MAAO,CAAA,KAAA,CAAMA,CAAG,EAC9B,CACF,CAEA,CAAA,IAAA,CAAQ,iBAAsD,MAAOnF,CAAAA,CAAOmE,IAAY,CACtF,KAAM,CAAE,EAAA7C,CAAAA,CAAAA,CAAI,OAAA/B,CAAO,CAAA,CAAI4E,EACvB,GAAI,CACF,KAAK,cAAezE,CAAAA,CAAAA,CAAA,CAAE,KAAA,CAAAM,CAAUT,CAAAA,CAAAA,CAAAA,CAAQ,EACxC,MAAMgF,CAAAA,CAAOC,kBACX,IAAK,CAAA,SAAA,CAAUJ,kCAAqB,mBAAqB7E,CAAAA,CAAAA,CAAQ+B,CAAE,CAAC,CACtE,EACMF,CAAU,CAAA,IAAA,CAAK,OAAO,OAAQ,CAAA,GAAA,CAAIpB,CAAK,CACvC+D,CAAAA,CAAAA,CAAgB,MAAM,IAAA,CAAK,gBAAiBQ,CAAAA,CAAAA,CAAMnD,EAAQ,IAAK,CAAA,QAAQ,EACvEqB,CAAU,CAAA,CACd,GAAAnB,CACA,CAAA,KAAA,CAAAtB,EACA,MAAAT,CAAAA,CAAAA,CACA,cAAAwE,CACF,CAAA,CACA,MAAM,IAAK,CAAA,wBAAA,CAAyBtB,CAAO,CAC3C,CAAA,IAAA,CAAK,sCAAuCA,CAAAA,CAAO,CACnD,CAAA,IAAA,CAAK,6BACP,CAAA,MAAS0C,EAAP,CACA,MAAM,KAAK,SAAU7D,CAAAA,CAAAA,CAAItB,EAAOmF,CAAG,CAAA,CACnC,KAAK,MAAO,CAAA,MAAA,CAAO,MAAMA,CAAG,EAC9B,CACF,CAEA,CAAA,IAAA,CAAQ,wBAAsE,CAAA,CAC5EU,CACA1B,CAAAA,CAAAA,GACG,CACH,KAAM,CAAE,GAAA7C,CAAG,CAAA,CAAI6C,EACTkB,CAASlE,CAAAA,iBAAAA,CAAY,kBAAmBG,CAAE,CAAA,CAEhD,GADkB,IAAK,CAAA,MAAA,CAAO,cAAc+D,CAAM,CAAA,GAChC,EAChB,MAAM,IAAI,KAAM,CAAA,CAAA,SAAA,EAAYA,CAA8B,CAAA,sBAAA,CAAA,CAAA,CAExDpC,6BAAgBkB,CAAO,CAAA,CACzB,KAAK,MAAO,CAAA,IAAA,CAAKhD,kBAAY,iBAAmBG,CAAAA,CAAE,EAAG,CAAE,MAAA,CAAQ6C,EAAQ,MAAO,CAAC,EACtEjB,2BAAeiB,CAAAA,CAAO,GAC/B,IAAK,CAAA,MAAA,CAAO,IAAKhD,CAAAA,iBAAAA,CAAY,iBAAmBG,CAAAA,CAAE,EAAG,CAAE,KAAA,CAAO6C,EAAQ,KAAM,CAAC,EAEjF,CAEA,CAAA,IAAA,CAAQ,sBAAgE,MACtEnE,CAAAA,CACAmE,IACG,CACH,KAAM,CAAE,EAAA7C,CAAAA,CAAAA,CAAI,OAAA/B,CAAO,CAAA,CAAI4E,CACvB,CAAA,GAAI,CAGF,MAAMqB,EAAY,CAAGxF,EAAAA,CAAAA,CAAAA,eAAAA,EAAuBT,EAAO,KAAM,CAAA,IAAA,CAAA,CAAA,CAGnDkG,EAAsBC,iBAAY,CAAA,GAAA,CAAYF,CAAS,CAC7D,CAAA,GAAIC,GAAuB,IAAK,CAAA,kBAAA,CAAmBA,EAAqBnE,CAAE,CAAA,CAAG,CAC3E,IAAK,CAAA,MAAA,CAAO,MAAO,CAAA,IAAA,CAAK,CAAoCA,iCAAAA,EAAAA,CAAAA,CAAAA,CAAI,EAChE,MAGF,CAAA,IAAA,CAAK,YAAY5B,CAAA,CAAA,CAAE,MAAAM,CAAUT,CAAAA,CAAAA,CAAAA,CAAQ,EACrC,IAAK,CAAA,MAAA,CAAO,OAAO,IAAK,CAAA,eAAA,CAAiB,CAAE,EAAA+B,CAAAA,CAAAA,CAAI,MAAAtB,CAAO,CAAA,MAAA,CAAAT,CAAO,CAAC,CAC9DmG,CAAAA,iBAAAA,CAAY,IAAIF,CAAWlE,CAAAA,CAAE,EAC/B,CAAS6D,MAAAA,CAAAA,CAAP,CACA,MAAM,IAAA,CAAK,UAAU7D,CAAItB,CAAAA,CAAAA,CAAOmF,CAAG,CACnC,CAAA,IAAA,CAAK,OAAO,MAAO,CAAA,KAAA,CAAMA,CAAG,EAC9B,CACF,CAEA,CAAA,IAAA,CAAQ,sCAA0C1C,CAAAA,CAAAA,EAAwC,CACxF,IAAK,CAAA,mBAAA,CAAoB,MAAM,IAAKA,CAAAA,CAAO,EAC7C,CAEA,CAAA,IAAA,CAAQ,qBAAwBlD,CAAsC,EAAA,CACpE,KAAK,2BAA4BA,CAAAA,CAAAA,CAAO,SAAS,EAAI,CAAA,CAAE,QAAS,WAAa,CAAA,IAAA,CAAM,CAAE,CAAC,CAEtF,CAAA,UAAA,CAAW,IAAM,CACf,IAAA,CAAK,oBAAoB,KAAQJ,CAAAA,mBAAAA,CAAoB,KACrD,IAAK,CAAA,0BAAA,GACP,CAAGG,CAAAA,kBAAAA,CAAc,KAAK,iBAAiB,CAAC,EAC1C,CAGA,CAAA,IAAA,CAAQ,mCAAqC,CAAC,CAC5C,KAAAU,CAAAA,CAAAA,CACA,KAAAG,CAAAA,CACF,IAGM,CACJ,MAAM4F,EAAkB,IAAK,CAAA,MAAA,CAAO,KAAK,OAAQ,CAAA,OAAA,CAC7CA,EAAgB,MAAS,CAAA,CAAA,EACRA,EAAgB,MAChClC,CAAAA,CAAAA,EAAMA,EAAE,KAAU7D,GAAAA,CAAAA,EAAS6D,EAAE,OAAQ,CAAA,MAAA,GAAW,mBACnD,CACW,CAAA,OAAA,CAASA,GAAM,CACxB,MAAMvC,EAAKuC,CAAE,CAAA,OAAA,CAAQ,GACfwB,CAASlE,CAAAA,iBAAAA,CAAY,kBAAmBG,CAAE,CAAA,CAEhD,GADkB,IAAK,CAAA,MAAA,CAAO,cAAc+D,CAAM,CAAA,GAChC,EAChB,MAAM,IAAI,KAAM,CAAA,CAAA,SAAA,EAAYA,CAA8B,CAAA,sBAAA,CAAA,CAAA,CAG5D,KAAK,MAAO,CAAA,IAAA,CAAKlE,kBAAY,iBAAmB0C,CAAAA,CAAAA,CAAE,QAAQ,EAAE,CAAA,CAAG,CAC7D,KAAA1D,CAAAA,CACF,CAAC,EACH,CAAC,EAEL,CAEA,CAAA,IAAA,CAAQ,2BAA6B,IAAM,CACzC,GAAI,IAAA,CAAK,mBAAoB,CAAA,KAAA,GAAUhB,oBAAoB,MAAQ,CAAA,CACjE,KAAK,MAAO,CAAA,MAAA,CAAO,KAAK,0CAA0C,CAAA,CAClE,OAGF,MAAMsD,CAAAA,CAAU,KAAK,mBAAoB,CAAA,KAAA,CAAM,CAAC,CAChD,CAAA,GAAI,CAACA,CAAS,CAAA,CACZ,IAAK,CAAA,MAAA,CAAO,MAAO,CAAA,IAAA,CAAK,iCAAiC,CACzD,CAAA,MAAA,CAGF,GAAI,CACF,IAAA,CAAK,oBAAoB,KAAQtD,CAAAA,mBAAAA,CAAoB,OACrD,IAAK,CAAA,MAAA,CAAO,OAAO,IAAK,CAAA,iBAAA,CAAmBsD,CAAO,EACpD,CAAA,MAAStC,EAAP,CACA,IAAA,CAAK,MAAO,CAAA,MAAA,CAAO,KAAMA,CAAAA,CAAK,EAChC,CACF,CAAA,CAsCA,KAAQ,gBAAoBkD,CAAAA,CAAAA,EAAiC,CAC3D,GAAIA,CAAAA,CAAQ,OAAQ,OAEpB,MAAMzC,EADY,IAAK,CAAA,MAAA,CAAO,SAAS,MAAO,EAAA,CACnB,KAAM2C,CAAMA,EAAAA,CAAAA,CAAE,YAAiBF,GAAAA,CAAAA,CAAQ,KAAK,CAAA,CAClEzC,GACL,IAAK,CAAA,uBAAA,CACHyC,EAAQ,KACRe,CAAAA,iCAAAA,CACE,oBACA,CACE,kBAAA,CAAoBxD,EAAS,kBAC7B,CAAA,kBAAA,CAAoBA,EAAS,kBAC7B,CAAA,MAAA,CAAQA,EAAS,MACjB,CAAA,QAAA,CAAUA,EAAS,QACnB,CAAA,iBAAA,CAAmBA,CAAS,CAAA,iBAC9B,CACAA,CAAAA,CAAAA,CAAS,EACX,CACF,EACF,EAmGA,IAAQ,CAAA,cAAA,CAAkD,MAAOrB,CAAW,EAAA,CAC1E,GAAI,CAACyG,mBAAAA,CAAczG,CAAM,CAAG,CAAA,CAC1B,KAAM,CAAE,OAAA,CAAAe,CAAQ,CAAIC,CAAAA,sBAAAA,CAClB,oBACA,CAAA,CAAA,kBAAA,EAAqB,IAAK,CAAA,SAAA,CAAUhB,CAAM,CAC5C,CAAA,CAAA,CAAA,CACA,MAAM,IAAI,KAAA,CAAMe,CAAO,CAEzB,CAAA,KAAM,CAAE,YAAAX,CAAAA,CAAAA,CAAc,mBAAAC,CAAoB,CAAA,kBAAA,CAAAC,EAAoB,iBAAAC,CAAAA,CAAAA,CAAmB,OAAAC,CAAO,CAAA,CACtFR,CAGF,CAAA,GAFK0G,iBAAYtG,CAAAA,CAAY,GAAG,MAAM,IAAA,CAAK,oBAAoBA,CAAY,CAAA,CAEvE,CAACuG,mBAAcnG,CAAAA,CAAAA,CAAQ,EAAI,CAAG,CAAA,CAChC,KAAM,CAAE,OAAA,CAAAO,CAAQ,CAAIC,CAAAA,sBAAAA,CAAiB,qBAAsB,CAAqBR,kBAAAA,EAAAA,CAAAA,CAAAA,CAAQ,CACxF,CAAA,MAAM,IAAI,KAAA,CAAMO,CAAO,CAIrB,CAAA,CAAC2F,kBAAYrG,CAAkB,CAAA,EAAKuG,oBAAcvG,CAAkB,CAAA,GAAM,GAC5E,IAAK,CAAA,kBAAA,CAAmBA,EAAoB,oBAAoB,CAAA,CAI9D,CAACqG,iBAAYpG,CAAAA,CAAkB,GAAKsG,mBAActG,CAAAA,CAAkB,CAAM,GAAA,CAAA,EAC5E,IAAK,CAAA,kBAAA,CAAmBA,EAAoB,oBAAoB,CAAA,CAI7DoG,kBAAYnG,CAAiB,CAAA,EAChC,KAAK,oBAAqBA,CAAAA,CAAAA,CAAmB,mBAAmB,EAEpE,CAAA,CAEA,KAAQ,kBAAqB,CAAA,CAC3B0B,EACA4E,CACG,GAAA,CACH,MAAMC,CAA+BC,CAAAA,+BAAAA,CAA0B9E,CAAY,CAAA,WAAA,CAAa4E,CAAI,CAAA,CAC5F,GAAIC,CAA8B,CAAA,MAAM,IAAI,KAAMA,CAAAA,CAAAA,CAA6B,OAAO,CACxF,CAAA,CAEA,KAAQ,cAAkD,CAAA,MAAO9G,GAAW,CAC1E,GAAI,CAACyG,mBAAczG,CAAAA,CAAM,EACvB,MAAM,IAAI,KACRgB,CAAAA,sBAAAA,CAAiB,oBAAsB,CAAA,CAAA,kBAAA,EAAqBhB,GAAQ,CAAE,CAAA,OACxE,EACF,KAAM,CAAE,GAAA+B,CAAI,CAAA,UAAA,CAAAE,EAAY,aAAAD,CAAAA,CAAAA,CAAe,kBAAAzB,CAAkB,CAAA,CAAIP,EAE7D,IAAK,CAAA,oBAAA,CAAqB+B,CAAE,CAC5B,CAAA,MAAM,IAAK,CAAA,iBAAA,CAAkBA,CAAE,CAAA,CAC/B,MAAMV,CAAW,CAAA,IAAA,CAAK,OAAO,QAAS,CAAA,GAAA,CAAIU,CAAE,CACtCiF,CAAAA,CAAAA,CAAuBC,wBAAkBhF,CAAY,CAAA,WAAW,EACtE,GAAI+E,CAAAA,CAAsB,MAAM,IAAI,KAAA,CAAMA,EAAqB,OAAO,CAAA,CACtE,MAAME,CAAAA,CAA4BC,4BAChC9F,CAAAA,CAAAA,CAAS,mBACTY,CACA,CAAA,WACF,EACA,GAAIiF,CAAAA,CAA2B,MAAM,IAAI,KAAA,CAAMA,EAA0B,OAAO,CAAA,CAChF,GAAI,CAACE,mBAAAA,CAAcpF,EAAe,CAAI,CAAA,CAAA,CAAG,CACvC,KAAM,CAAE,OAAAjB,CAAAA,CAAQ,CAAIC,CAAAA,sBAAAA,CAClB,qBACA,CAA4BgB,yBAAAA,EAAAA,CAAAA,CAAAA,CAC9B,EACA,MAAM,IAAI,MAAMjB,CAAO,CAAA,CAGpB2F,kBAAYnG,CAAiB,CAAA,EAChC,KAAK,oBAAqBA,CAAAA,CAAAA,CAAmB,mBAAmB,EAEpE,CAAA,CAEA,KAAQ,aAAgD,CAAA,MAAOP,GAAW,CACxE,GAAI,CAACyG,mBAAczG,CAAAA,CAAM,EAAG,CAC1B,KAAM,CAAE,OAAAe,CAAAA,CAAQ,EAAIC,sBAAiB,CAAA,oBAAA,CAAsB,oBAAoBhB,CAAQ,CAAA,CAAA,CAAA,CACvF,MAAM,IAAI,KAAA,CAAMe,CAAO,CAEzB,CAAA,KAAM,CAAE,EAAA,CAAAgB,CAAI,CAAA,MAAA,CAAAU,CAAO,CAAIzC,CAAAA,CAAAA,CAGvB,GAFA,IAAK,CAAA,oBAAA,CAAqB+B,CAAE,CAC5B,CAAA,MAAM,KAAK,iBAAkBA,CAAAA,CAAE,EAC3B,CAACsF,wBAAAA,CAAmB5E,CAAM,CAAG,CAAA,CAC/B,KAAM,CAAE,OAAA,CAAA1B,CAAQ,CAAA,CAAIC,sBAClB,CAAA,oBAAA,CACA,oBAAoB,IAAK,CAAA,SAAA,CAAUyB,CAAM,CAC3C,CAAA,CAAA,CAAA,CACA,MAAM,IAAI,KAAA,CAAM1B,CAAO,CAE3B,CAAA,CAAA,CAEA,KAAQ,2BAA6Ef,CAAAA,CAAAA,EAAW,CAC9F,GAAI,CAACyG,oBAAczG,CAAM,CAAA,CAAG,CAC1B,KAAM,CAAE,OAAA,CAAAe,CAAQ,CAAIC,CAAAA,sBAAAA,CAClB,qBACA,CAAoChB,iCAAAA,EAAAA,CAAAA,CAAAA,CACtC,EACA,MAAM,IAAI,MAAMe,CAAO,CAAA,CAEzB,KAAM,CAAE,KAAA,CAAAgF,EAAO,UAAAC,CAAAA,CAAAA,CAAY,WAAA/D,CAAY,CAAA,MAAA,CAAAf,CAAO,CAAA,CAAIlB,CAClD,CAAA,GAAI,CAACsH,kBAAavB,CAAAA,CAAK,EAAG,CACxB,KAAM,CAAE,OAAAhF,CAAAA,CAAQ,EAAIC,sBAClB,CAAA,oBAAA,CACA,4DACF,CACA,CAAA,MAAM,IAAI,KAAMD,CAAAA,CAAO,EAEzB,MAAMwG,CAAAA,CAAuBC,uBAAkBxB,CAAAA,CAAAA,CAAY,0BAA0B,CAAA,CACrF,GAAIuB,CAAsB,CAAA,MAAM,IAAI,KAAMA,CAAAA,CAAAA,CAAqB,OAAO,CACtE,CAAA,MAAMP,EAAuBC,uBAAkBhF,CAAAA,CAAAA,CAAY,0BAA0B,CACrF,CAAA,GAAI+E,EAAsB,MAAM,IAAI,MAAMA,CAAqB,CAAA,OAAO,CACtE,CAAA,GAAIvB,eAAUvE,CAAAA,CAAM,EAAG,CACrB,KAAM,CAAE,OAAAH,CAAAA,CAAQ,EAAIC,sBAAiB,CAAA,SAAA,CAAW,0BAA0B,CAC1E,CAAA,MAAM,IAAI,KAAMD,CAAAA,CAAO,EAE3B,CAEA,CAAA,IAAA,CAAQ,cAAgD,MAAOf,CAAAA,EAAW,CACxE,GAAI,CAACyG,mBAAAA,CAAczG,CAAM,CAAG,CAAA,CAC1B,KAAM,CAAE,OAAA,CAAAe,CAAQ,CAAIC,CAAAA,sBAAAA,CAAiB,qBAAsB,CAAoBhB,iBAAAA,EAAAA,CAAAA,CAAAA,CAAQ,EACvF,MAAM,IAAI,MAAMe,CAAO,CAAA,CAEzB,KAAM,CAAE,KAAA,CAAAN,CAAO,CAAA,UAAA,CAAAwB,CAAW,CAAA,CAAIjC,EAE9B,IAAK,CAAA,oBAAA,CAAqBS,CAAK,CAC/B,CAAA,MAAM,KAAK,mBAAoBA,CAAAA,CAAK,EACpC,MAAMoB,CAAAA,CAAU,KAAK,MAAO,CAAA,OAAA,CAAQ,IAAIpB,CAAK,CAAA,CACvCuG,EAAuBC,uBAAkBhF,CAAAA,CAAAA,CAAY,UAAU,CAAA,CACrE,GAAI+E,CAAAA,CAAsB,MAAM,IAAI,KAAA,CAAMA,EAAqB,OAAO,CAAA,CACtE,MAAME,CAA4BC,CAAAA,4BAAAA,CAChCtF,EAAQ,kBACRI,CAAAA,CAAAA,CACA,UACF,CACA,CAAA,GAAIiF,EAA2B,MAAM,IAAI,MAAMA,CAA0B,CAAA,OAAO,CAElF,CAAA,CAEA,IAAQ,CAAA,aAAA,CAAgD,MAAOlH,CAAW,EAAA,CACxE,GAAI,CAACyG,mBAAAA,CAAczG,CAAM,CAAG,CAAA,CAC1B,KAAM,CAAE,OAAA,CAAAe,CAAQ,CAAIC,CAAAA,sBAAAA,CAAiB,qBAAsB,CAAoBhB,iBAAAA,EAAAA,CAAAA,CAAAA,CAAQ,EACvF,MAAM,IAAI,KAAMe,CAAAA,CAAO,CAEzB,CAAA,KAAM,CAAE,KAAAN,CAAAA,CAAM,EAAIT,CAElB,CAAA,IAAA,CAAK,qBAAqBS,CAAK,CAAA,CAC/B,MAAM,IAAK,CAAA,mBAAA,CAAoBA,CAAK,EACtC,CAAA,CAEA,KAAQ,cAAkD,CAAA,MAAOT,GAAW,CAC1E,GAAI,CAACyG,mBAAAA,CAAczG,CAAM,CAAA,CAAG,CAC1B,KAAM,CAAE,QAAAe,CAAQ,CAAA,CAAIC,uBAAiB,oBAAsB,CAAA,CAAA,kBAAA,EAAqBhB,GAAQ,CACxF,CAAA,MAAM,IAAI,KAAMe,CAAAA,CAAO,EAEzB,KAAM,CAAE,MAAAN,CAAO,CAAA,OAAA,CAAAyC,CAAS,CAAA,OAAA,CAAAD,CAAS,CAAA,MAAA,CAAA/B,CAAO,CAAIlB,CAAAA,CAAAA,CAC5C,KAAK,oBAAqBS,CAAAA,CAAK,EAC/B,MAAM,IAAA,CAAK,oBAAoBA,CAAK,CAAA,CACpC,KAAM,CAAE,UAAA,CAAAwB,CAAW,CAAI,CAAA,IAAA,CAAK,OAAO,OAAQ,CAAA,GAAA,CAAIxB,CAAK,CAAA,CACpD,GAAI,CAACgH,+BAAyBxF,CAAYgB,CAAAA,CAAO,EAAG,CAClD,KAAM,CAAE,OAAAlC,CAAAA,CAAQ,EAAIC,sBAAiB,CAAA,oBAAA,CAAsB,sBAAsBiC,CAAS,CAAA,CAAA,CAAA,CAC1F,MAAM,IAAI,KAAA,CAAMlC,CAAO,CAEzB,CAAA,GAAI,CAAC2G,oBAAAA,CAAexE,CAAO,CAAA,CAAG,CAC5B,KAAM,CAAE,QAAAnC,CAAQ,CAAA,CAAIC,uBAClB,oBACA,CAAA,CAAA,UAAA,EAAa,KAAK,SAAUkC,CAAAA,CAAO,GACrC,CACA,CAAA,MAAM,IAAI,KAAMnC,CAAAA,CAAO,EAEzB,GAAI,CAAC4G,+BAAyB1F,CAAYgB,CAAAA,CAAAA,CAASC,EAAQ,MAAM,CAAA,CAAG,CAClE,KAAM,CAAE,QAAAnC,CAAQ,CAAA,CAAIC,uBAClB,oBACA,CAAA,CAAA,kBAAA,EAAqBkC,EAAQ,MAC/B,CAAA,CAAA,CAAA,CACA,MAAM,IAAI,KAAA,CAAMnC,CAAO,CAEzB,CAAA,GAAIG,CAAU,EAAA,CAAC0G,0BAAqB1G,CAAAA,CAAAA,CAAQ2G,iCAAiC,CAAG,CAAA,CAC9E,KAAM,CAAE,OAAA,CAAA9G,CAAQ,CAAIC,CAAAA,sBAAAA,CAClB,qBACA,CAAqBE,kBAAAA,EAAAA,CAAAA,CAAAA,+CAAAA,EAAwD2G,kCAAkC,GAAWA,CAAAA,KAAAA,EAAAA,iCAAAA,CAAkC,KAC9J,CACA,CAAA,MAAM,IAAI,KAAM9G,CAAAA,CAAO,CAE3B,CAAA,CAAA,CAEA,IAAQ,CAAA,cAAA,CAAkD,MAAOf,CAAW,EAAA,CAtoD9E,IAAAiE,CAuoDI,CAAA,GAAI,CAACwC,mBAAczG,CAAAA,CAAM,EAAG,CAC1B,KAAM,CAAE,OAAAe,CAAAA,CAAQ,EAAIC,sBAAiB,CAAA,oBAAA,CAAsB,qBAAqBhB,CAAQ,CAAA,CAAA,CAAA,CACxF,MAAM,IAAI,KAAMe,CAAAA,CAAO,EAEzB,KAAM,CAAE,MAAAN,CAAO,CAAA,QAAA,CAAAgD,CAAS,CAAIzD,CAAAA,CAAAA,CAC5B,GAAI,CAEF,MAAM,KAAK,mBAAoBS,CAAAA,CAAK,EACtC,CAASG,MAAAA,CAAAA,CAAP,CACA,MAAIqD,CAAAA,CAAAA,CAAAjE,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,CAAAA,CAAQ,CAAA,QAAA,GAAR,MAAAiE,CAAkB,CAAA,EAAA,EAAI,KAAK,oBAAqBjE,CAAAA,CAAM,EACpDY,CACR,CACA,GAAI,CAACkH,qBAAAA,CAAgBrE,CAAQ,CAAG,CAAA,CAC9B,KAAM,CAAE,OAAA,CAAA1C,CAAQ,CAAIC,CAAAA,sBAAAA,CAClB,oBACA,CAAA,CAAA,oBAAA,EAAuB,IAAK,CAAA,SAAA,CAAUyC,CAAQ,CAChD,CAAA,CAAA,CAAA,CACA,MAAM,IAAI,KAAA,CAAM1C,CAAO,CAE3B,CAAA,CAAA,CAEA,KAAQ,WAA4C,CAAA,MAAOf,GAAW,CACpE,GAAI,CAACyG,mBAAczG,CAAAA,CAAM,EAAG,CAC1B,KAAM,CAAE,OAAA,CAAAe,CAAQ,CAAA,CAAIC,uBAAiB,oBAAsB,CAAA,CAAA,eAAA,EAAkBhB,GAAQ,CACrF,CAAA,MAAM,IAAI,KAAMe,CAAAA,CAAO,EAEzB,KAAM,CAAE,MAAAN,CAAM,CAAA,CAAIT,EAClB,MAAM,IAAA,CAAK,6BAA6BS,CAAK,EAC/C,CAEA,CAAA,IAAA,CAAQ,WAA4C,CAAA,MAAOT,GAAW,CACpE,GAAI,CAACyG,mBAAczG,CAAAA,CAAM,EAAG,CAC1B,KAAM,CAAE,OAAAe,CAAAA,CAAQ,EAAIC,sBAAiB,CAAA,oBAAA,CAAsB,kBAAkBhB,CAAQ,CAAA,CAAA,CAAA,CACrF,MAAM,IAAI,KAAA,CAAMe,CAAO,CAAA,CAEzB,KAAM,CAAE,MAAAN,CAAO,CAAA,KAAA,CAAAmD,EAAO,OAAAX,CAAAA,CAAQ,EAAIjD,CAClC,CAAA,MAAM,KAAK,mBAAoBS,CAAAA,CAAK,EACpC,KAAM,CAAE,WAAAwB,CAAW,CAAA,CAAI,KAAK,MAAO,CAAA,OAAA,CAAQ,GAAIxB,CAAAA,CAAK,CACpD,CAAA,GAAI,CAACgH,8BAAyBxF,CAAAA,CAAAA,CAAYgB,CAAO,CAAG,CAAA,CAClD,KAAM,CAAE,OAAA,CAAAlC,CAAQ,CAAIC,CAAAA,sBAAAA,CAAiB,qBAAsB,CAAmBiC,gBAAAA,EAAAA,CAAAA,CAAAA,CAAS,EACvF,MAAM,IAAI,MAAMlC,CAAO,CAAA,CAEzB,GAAI,CAACgH,kBAAanE,CAAAA,CAAK,EAAG,CACxB,KAAM,CAAE,OAAA7C,CAAAA,CAAQ,EAAIC,sBAClB,CAAA,oBAAA,CACA,iBAAiB,IAAK,CAAA,SAAA,CAAU4C,CAAK,CACvC,CAAA,CAAA,CAAA,CACA,MAAM,IAAI,KAAA,CAAM7C,CAAO,CAEzB,CAAA,GAAI,CAACiH,4BAAAA,CAAuB/F,CAAYgB,CAAAA,CAAAA,CAASW,EAAM,IAAI,CAAA,CAAG,CAC5D,KAAM,CAAE,QAAA7C,CAAQ,CAAA,CAAIC,uBAClB,oBACA,CAAA,CAAA,cAAA,EAAiB,KAAK,SAAU4C,CAAAA,CAAK,GACvC,CACA,CAAA,MAAM,IAAI,KAAM7C,CAAAA,CAAO,CAE3B,CAAA,CAAA,CAEA,IAAQ,CAAA,iBAAA,CAAwD,MAAOf,CAAW,EAAA,CAChF,GAAI,CAACyG,mBAAAA,CAAczG,CAAM,CAAG,CAAA,CAC1B,KAAM,CAAE,OAAA,CAAAe,CAAQ,CAAIC,CAAAA,sBAAAA,CAAiB,qBAAsB,CAAwBhB,qBAAAA,EAAAA,CAAAA,CAAAA,CAAQ,EAC3F,MAAM,IAAI,KAAMe,CAAAA,CAAO,CAEzB,CAAA,KAAM,CAAE,KAAAN,CAAAA,CAAM,EAAIT,CAClB,CAAA,MAAM,KAAK,4BAA6BS,CAAAA,CAAK,EAC/C,CAEA,CAAA,IAAA,CAAQ,iBAAmB,MAAOuE,CAAAA,CAAciD,IAAiC,CAC/E,MAAMC,EAA0B,CAC9B,QAAA,CAAU,CACR,SAAA,CAAWD,CAAS,CAAA,SAAA,EAAaE,mBACjC,UAAY,CAAA,SAAA,CACZ,OAAQF,CAAS,CAAA,GAAA,EAAO,EAC1B,CACF,CAAA,CAEA,GAAI,CACF,MAAM7E,EAAS,MAAM,IAAA,CAAK,OAAO,IAAK,CAAA,MAAA,CAAO,QAAQ,CACnD,aAAA,CAAe4B,CACf,CAAA,SAAA,CAAWiD,CAAS,CAAA,SACtB,CAAC,CACG7E,CAAAA,CAAAA,GACF8E,EAAQ,QAAS,CAAA,MAAA,CAAS9E,EAAO,MACjC8E,CAAAA,CAAAA,CAAQ,SAAS,MAAS9E,CAAAA,CAAAA,CAAO,OACjC8E,CAAQ,CAAA,QAAA,CAAS,WACf9E,CAAO,CAAA,MAAA,GAAW,IAAI,GAAI6E,CAAAA,CAAAA,CAAS,GAAG,CAAE,CAAA,MAAA,CAAS,QAAU,SAEjE,EAAA,CAAA,MAASjF,EAAP,CACA,IAAA,CAAK,OAAO,MAAO,CAAA,IAAA,CAAKA,CAAC,EAC3B,CAEA,YAAK,MAAO,CAAA,MAAA,CAAO,KAAK,CAAmB,gBAAA,EAAA,IAAA,CAAK,UAAUkF,CAAO,CAAA,CAAA,CAAG,CAC7DA,CAAAA,CACT,CAEA,CAAA,IAAA,CAAQ,qBAAuB,CAACE,CAAAA,CAA6CvB,IAAiB,CAC5F,MAAA,CAAO,OAAOuB,CAAU,CAAA,CAAE,QAASC,CAAa,EAAA,CAC9C,GAAI,CAACjB,mBAAAA,CAAciB,EAAU,CAAK,CAAA,CAAA,CAAG,CACnC,KAAM,CAAE,OAAAtH,CAAAA,CAAQ,CAAIC,CAAAA,sBAAAA,CAClB,qBACA,CAAG6F,EAAAA,CAAAA,CAAAA,qDAAAA,EAA4D,KAAK,SAAUwB,CAAAA,CAAQ,GACxF,CACA,CAAA,MAAM,IAAI,KAAMtH,CAAAA,CAAO,EAE3B,CAAC,EACH,EAEA,IAAQ,CAAA,oBAAA,CAAuB,CAC7BgB,CACA8E,CAAAA,CAAAA,GACG,CAGH,GAFA,IAAK,CAAA,kBAAA,CAAmB,IAAI9E,CAAI8E,CAAAA,CAAI,EAEhC,IAAK,CAAA,kBAAA,CAAmB,MAAQ,IAAK,CAAA,oBAAA,CAAsB,CAC7D,IAAIyB,CAAAA,CAAI,EACR,MAAMC,CAAAA,CAAmB,KAAK,oBAAuB,CAAA,CAAA,CACrD,UAAWC,CAAK,IAAA,IAAA,CAAK,kBAAmB,CAAA,IAAA,EAAQ,CAAA,CAC9C,GAAIF,CAAOC,EAAAA,EAAAA,CAAAA,CACT,MAEF,IAAK,CAAA,kBAAA,CAAmB,OAAOC,CAAC,EAAA,CAAA,CAGtC,EAEA,IAAQ,CAAA,oBAAA,CAAwBzG,GAAwB,CACtD,MAAM0G,EAAgB,IAAK,CAAA,kBAAA,CAAmB,IAAI1G,CAAE,CAAA,CACpD,GAAI0G,CAAAA,CAAe,CACjB,KAAM,CAAE,OAAA1H,CAAAA,CAAQ,EAAIC,sBAClB,CAAA,oBAAA,CACA,iCAAiCyH,CAAkB1G,CAAAA,EAAAA,EAAAA,CAAAA,CAAAA,CACrD,EACA,MAAM,IAAI,MAAMhB,CAAO,CAAA,CAE3B,EAppDA,CA8pBA,MAAc,eAAgB,CAC5B,GAAI,CAAC,IAAA,CAAK,WAAa,CAAA,CACrB,KAAM,CAAE,OAAA,CAAAA,CAAQ,CAAIC,CAAAA,sBAAAA,CAAiB,kBAAmB,IAAK,CAAA,IAAI,EACjE,MAAM,IAAI,MAAMD,CAAO,CAAA,CAEzB,MAAM,IAAK,CAAA,MAAA,CAAO,KAAK,OAAQ,CAAA,yBAAA,GACjC,CAIQ,qBAAwB,EAAA,CAC9B,KAAK,MAAO,CAAA,IAAA,CAAK,QAAQ,EACvBwF,CAAAA,mBAAAA,CAAe,QACf,MAAO3C,CAAAA,EAAqC,CAC1C,KAAM,CAAE,MAAAnD,CAAO,CAAA,OAAA,CAAAM,CAAQ,CAAI6C,CAAAA,CAAAA,CAG3B,GAAI,IAAK,CAAA,mBAAA,CAAoB,QAAS,CAAA,IAAA,CAAK,MAAO,CAAA,IAAA,CAAK,OAAO,cAAe7C,CAAAA,CAAO,CAAC,CACnF,CAAA,OAGF,MAAM6D,CAAU,CAAA,MAAM,KAAK,MAAO,CAAA,IAAA,CAAK,OAAO,MAAOnE,CAAAA,CAAAA,CAAOM,CAAO,CACnE,CAAA,GAAI,CACE2H,6BAAiB9D,CAAAA,CAAO,CAC1B,EAAA,IAAA,CAAK,MAAO,CAAA,IAAA,CAAK,QAAQ,GAAInE,CAAAA,CAAAA,CAAOmE,CAAO,CAC3C,CAAA,IAAA,CAAK,oBAAoB,CAAE,KAAA,CAAAnE,EAAO,OAAAmE,CAAAA,CAAQ,CAAC,CAClC+D,EAAAA,8BAAAA,CAAkB/D,CAAO,CAClC,EAAA,MAAM,KAAK,MAAO,CAAA,IAAA,CAAK,OAAQ,CAAA,OAAA,CAAQA,CAAO,CAAA,CAC9C,MAAM,IAAK,CAAA,oBAAA,CAAqB,CAAE,KAAAnE,CAAAA,CAAAA,CAAO,QAAAmE,CAAQ,CAAC,EAClD,IAAK,CAAA,MAAA,CAAO,KAAK,OAAQ,CAAA,MAAA,CAAOnE,EAAOmE,CAAQ,CAAA,EAAE,GAEjD,IAAK,CAAA,0BAAA,CAA2B,CAAE,KAAA,CAAAnE,CAAO,CAAA,OAAA,CAAAmE,CAAQ,CAAC,EAEtD,OAAShE,CAAP,CAAA,CACA,KAAK,MAAO,CAAA,MAAA,CAAO,MAAMA,CAAK,EAChC,CACF,CACF,EACF,CA0fQ,qBAAwB,EAAA,CAC9B,KAAK,MAAO,CAAA,IAAA,CAAK,OAAQ,CAAA,EAAA,CAAGgI,mBAAe,CAAA,OAAA,CAAS,MAAOhF,CAAmC,EAAA,CAC5F,KAAM,CAAE,KAAA,CAAAnD,EAAO,EAAAsB,CAAAA,CAAG,EAAI8G,wBAAmBjF,CAAAA,CAAAA,CAAM,MAAM,CACrD,CAAA,GAAI7B,GAAM,IAAK,CAAA,MAAA,CAAO,eAAe,IAAK,CAAA,QAAA,CAASA,CAAE,CAAA,CACnD,OAAO,MAAM,KAAK,2BAA4BA,CAAAA,CAAAA,CAAIf,uBAAiB,SAAS,CAAA,CAAG,EAAI,CAGjFP,CAAAA,CAAAA,CACE,KAAK,MAAO,CAAA,OAAA,CAAQ,KAAK,QAASA,CAAAA,CAAK,IACzC,MAAM,IAAA,CAAK,cAAc,CAAE,KAAA,CAAAA,CAAO,CAAA,iBAAA,CAAmB,CAAK,CAAA,CAAC,EAC3D,IAAK,CAAA,MAAA,CAAO,OAAO,IAAK,CAAA,gBAAA,CAAkB,CAAE,KAAAA,CAAAA,CAAM,CAAC,CAE5CsB,CAAAA,CAAAA,CAAAA,GACT,MAAM,IAAK,CAAA,cAAA,CAAeA,EAAI,CAAI,CAAA,CAAA,CAClC,KAAK,MAAO,CAAA,MAAA,CAAO,IAAK,CAAA,iBAAA,CAAmB,CAAE,EAAA,CAAAA,CAAG,CAAC,CAAA,EAErD,CAAC,EACH,CAGQ,uBAAwB,CAC9B,IAAA,CAAK,OAAO,IAAK,CAAA,OAAA,CAAQ,OAAO,EAAG+G,CAAAA,mBAAAA,CAAe,OAAShF,CACzD,EAAA,IAAA,CAAK,iBAAiBA,CAAO,CAC/B,EACA,IAAK,CAAA,MAAA,CAAO,KAAK,OAAQ,CAAA,MAAA,CAAO,GAAGgF,mBAAe,CAAA,MAAA,CAAShF,GAAiC,CAC1F,IAAA,CAAK,qBAAqBA,CAAQ,CAAA,KAAA,CAAO,SAAS,EACpD,CAAC,EACH,CA6BQ,mBAAA,CAAoBrD,EAAY,CACtC,GAAI,CAAC2G,mBAAAA,CAAc3G,CAAO,CAAA,CAAA,CAAK,EAAG,CAChC,KAAM,CAAE,OAAAM,CAAAA,CAAQ,EAAIC,sBAClB,CAAA,oBAAA,CACA,qCAAqCP,CACvC,CAAA,CAAA,CAAA,CACA,MAAM,IAAI,KAAA,CAAMM,CAAO,CAEzB,CAAA,GAAI,CAAC,IAAK,CAAA,MAAA,CAAO,IAAK,CAAA,OAAA,CAAQ,QAAS,CAAA,IAAA,CAAK,SAASN,CAAK,CAAA,CAAG,CAC3D,KAAM,CAAE,QAAAM,CAAQ,CAAA,CAAIC,uBAClB,iBACA,CAAA,CAAA,6BAAA,EAAgCP,GAClC,CACA,CAAA,MAAM,IAAI,KAAMM,CAAAA,CAAO,EAEzB,GAAI0E,eAAAA,CAAU,IAAK,CAAA,MAAA,CAAO,IAAK,CAAA,OAAA,CAAQ,SAAS,GAAIhF,CAAAA,CAAK,EAAE,MAAM,CAAA,CAAG,CAClE,KAAM,CAAE,QAAAM,CAAQ,CAAA,CAAIC,uBAAiB,SAAW,CAAA,CAAA,eAAA,EAAkBP,GAAO,CACzE,CAAA,MAAM,IAAI,KAAMM,CAAAA,CAAO,CAE3B,CAAA,CAEA,MAAc,mBAAA,CAAoBN,EAAY,CAC5C,GAAI,CAAC2G,mBAAc3G,CAAAA,CAAAA,CAAO,EAAK,CAAG,CAAA,CAChC,KAAM,CAAE,OAAA,CAAAM,CAAQ,CAAIC,CAAAA,sBAAAA,CAClB,qBACA,CAAqCP,kCAAAA,EAAAA,CAAAA,CAAAA,CACvC,EACA,MAAM,IAAI,KAAMM,CAAAA,CAAO,CAIzB,CAAA,GADA,KAAK,oBAAqBN,CAAAA,CAAK,EAC3B,CAAC,IAAA,CAAK,OAAO,OAAQ,CAAA,IAAA,CAAK,SAASA,CAAK,CAAA,CAAG,CAC7C,KAAM,CAAE,QAAAM,CAAQ,CAAA,CAAIC,uBAClB,iBACA,CAAA,CAAA,6BAAA,EAAgCP,CAClC,CAAA,CAAA,CAAA,CACA,MAAM,IAAI,MAAMM,CAAO,CAAA,CAEzB,GAAI0E,eAAU,CAAA,IAAA,CAAK,OAAO,OAAQ,CAAA,GAAA,CAAIhF,CAAK,CAAE,CAAA,MAAM,EAAG,CACpD,MAAM,KAAK,aAAc,CAAA,CAAE,MAAAA,CAAM,CAAC,CAClC,CAAA,KAAM,CAAE,OAAA,CAAAM,CAAQ,CAAIC,CAAAA,sBAAAA,CAAiB,UAAW,CAAkBP,eAAAA,EAAAA,CAAAA,CAAAA,CAAO,EACzE,MAAM,IAAI,MAAMM,CAAO,CAAA,CAGzB,GAAI,CAAC,IAAA,CAAK,OAAO,IAAK,CAAA,MAAA,CAAO,SAAS,GAAIN,CAAAA,CAAK,CAAG,CAAA,CAChD,KAAM,CAAE,QAAAM,CAAQ,CAAA,CAAIC,uBAClB,oBACA,CAAA,CAAA,0CAAA,EAA6CP,GAC/C,CACA,CAAA,MAAA,MAAM,KAAK,aAAc,CAAA,CAAE,MAAAA,CAAM,CAAC,EAC5B,IAAI,KAAA,CAAMM,CAAO,CAE3B,CAAA,CAEA,MAAc,4BAAA,CAA6BN,CAAe,CAAA,CAExD,GADA,IAAK,CAAA,oBAAA,CAAqBA,CAAK,CAC3B,CAAA,IAAA,CAAK,OAAO,OAAQ,CAAA,IAAA,CAAK,SAASA,CAAK,CAAA,CACzC,MAAM,IAAK,CAAA,mBAAA,CAAoBA,CAAK,CAC3B,CAAA,KAAA,GAAA,IAAA,CAAK,OAAO,IAAK,CAAA,OAAA,CAAQ,QAAS,CAAA,IAAA,CAAK,QAASA,CAAAA,CAAK,EAC9D,IAAK,CAAA,mBAAA,CAAoBA,CAAK,CACpB2G,CAAAA,KAAAA,GAAAA,mBAAAA,CAAc3G,EAAO,CAAK,CAAA,CAAA,CAM/B,CACL,KAAM,CAAE,QAAAM,CAAQ,CAAA,CAAIC,uBAClB,iBACA,CAAA,CAAA,wCAAA,EAA2CP,GAC7C,CACA,CAAA,MAAM,IAAI,KAAA,CAAMM,CAAO,CAAA,CAAA,KAXgB,CACvC,KAAM,CAAE,QAAAA,CAAQ,CAAA,CAAIC,uBAClB,oBACA,CAAA,CAAA,6CAAA,EAAgDP,GAClD,CACA,CAAA,MAAM,IAAI,KAAMM,CAAAA,CAAO,EAQ3B,CAEA,MAAc,kBAAkBgB,CAAS,CAAA,CACvC,GAAI,CAACgH,eAAUhH,CAAAA,CAAE,EAAG,CAClB,KAAM,CAAE,OAAAhB,CAAAA,CAAQ,EAAIC,sBAClB,CAAA,oBAAA,CACA,mCAAmCe,CACrC,CAAA,CAAA,CAAA,CACA,MAAM,IAAI,KAAA,CAAMhB,CAAO,CAEzB,CAAA,GAAI,CAAC,IAAK,CAAA,MAAA,CAAO,QAAS,CAAA,IAAA,CAAK,QAASgB,CAAAA,CAAE,EAAG,CAC3C,KAAM,CAAE,OAAAhB,CAAAA,CAAQ,EAAIC,sBAAiB,CAAA,iBAAA,CAAmB,8BAA8Be,CAAI,CAAA,CAAA,CAAA,CAC1F,MAAM,IAAI,KAAA,CAAMhB,CAAO,CAEzB,CAAA,GAAI0E,gBAAU,IAAK,CAAA,MAAA,CAAO,QAAS,CAAA,GAAA,CAAI1D,CAAE,CAAA,CAAE,eAAe,CAAG,CAAA,CAC3D,MAAM,IAAK,CAAA,cAAA,CAAeA,CAAE,CAC5B,CAAA,KAAM,CAAE,OAAAhB,CAAAA,CAAQ,EAAIC,sBAAiB,CAAA,SAAA,CAAW,gBAAgBe,CAAI,CAAA,CAAA,CAAA,CACpE,MAAM,IAAI,KAAA,CAAMhB,CAAO,CAAA,CAE3B,CAmUF;;ACxwDa,MAAA,QAAA,SAAiBiI,UAAoC,CAChE,WAAmBC,CAAAA,CAAAA,CAAoBC,CAAgB,CAAA,CACrD,KAAMD,CAAAA,CAAAA,CAAMC,CAAQC,CAAAA,gBAAAA,CAAkBC,0BAA0B,CAAA,CAD/C,IAAAH,CAAAA,IAAAA,CAAAA,CAAAA,CAAoB,IAAAC,CAAAA,MAAAA,CAAAA,EAEvC,CACF;;ACJa,MAAA,OAAA,SAAgBF,UAAmC,CAC9D,WAAmBC,CAAAA,CAAAA,CAAoBC,CAAgB,CAAA,CACrD,KAAMD,CAAAA,CAAAA,CAAMC,CAAQG,CAAAA,eAAAA,CAAiBD,0BAA0B,CAAA,CAD9C,IAAAH,CAAAA,IAAAA,CAAAA,CAAAA,CAAoB,IAAAC,CAAAA,MAAAA,CAAAA,EAEvC,CACF;;ACLO,MAAM,cAAuBF,SAAAA,UAA0C,CAC5E,WAAmBC,CAAAA,CAAAA,CAAoBC,CAAgB,CAAA,CACrD,KACED,CAAAA,CAAAA,CACAC,CACAI,CAAAA,eAAAA,CACAF,0BACCG,CAAAA,CAAAA,EAAoCA,CAAI,CAAA,EAC3C,CAPiB,CAAA,IAAA,CAAA,IAAA,CAAAN,CAAoB,CAAA,IAAA,CAAA,MAAA,CAAAC,EAQvC,CACF;;ACFa,MAAAM,YAAA,SAAmBC,iBAAY,CAqB1C,WAAA,CAAYvE,CAAgC,CAAA,CAC1C,MAAMA,CAAI,CAAA,CArBZ,IAAgB,CAAA,QAAA,CAAWwE,qBAC3B,IAAgB,CAAA,OAAA,CAAUC,mBAC1B,CAAA,IAAA,CAAgB,KAA4BC,mBAAoB,CAAA,IAAA,CAKhE,IAAO,CAAA,MAAA,CAAgC,IAAIC,eA0C3C,CAAA,IAAA,CAAO,EAA8B,CAAA,CAACC,EAAMC,CACnC,GAAA,IAAA,CAAK,OAAO,EAAGD,CAAAA,CAAAA,CAAMC,CAAQ,CAGtC,CAAA,IAAA,CAAO,IAAkC,CAAA,CAACD,EAAMC,CACvC,GAAA,IAAA,CAAK,MAAO,CAAA,IAAA,CAAKD,EAAMC,CAAQ,CAAA,CAGxC,IAAO,CAAA,GAAA,CAAgC,CAACD,CAAMC,CAAAA,CAAAA,GACrC,IAAK,CAAA,MAAA,CAAO,IAAID,CAAMC,CAAAA,CAAQ,CAGvC,CAAA,IAAA,CAAO,eAAsD,CAACD,CAAAA,CAAMC,CAC3D,GAAA,IAAA,CAAK,OAAO,cAAeD,CAAAA,CAAAA,CAAMC,CAAQ,CAAA,CAGlD,KAAO,kBAA+DD,CAAAA,CAAAA,EAC7D,KAAK,MAAO,CAAA,kBAAA,CAAmBA,CAAI,CAK5C,CAAA,IAAA,CAAO,OAAkC,CAAA,MAAO9J,GAAW,CACzD,GAAI,CACF,OAAO,MAAM,IAAK,CAAA,MAAA,CAAO,OAAQA,CAAAA,CAAM,CACzC,CAASY,MAAAA,CAAAA,CAAP,CACA,MAAA,IAAA,CAAK,OAAO,KAAMA,CAAAA,CAAAA,CAAM,OAAO,CAAA,CACzBA,CACR,CACF,CAAA,CAEA,IAAO,CAAA,IAAA,CAA4B,MAAOZ,CAAW,EAAA,CACnD,GAAI,CACF,OAAO,MAAM,IAAA,CAAK,OAAO,IAAKA,CAAAA,CAAM,CACtC,CAASY,MAAAA,CAAAA,CAAP,CACA,MAAA,IAAA,CAAK,OAAO,KAAMA,CAAAA,CAAAA,CAAM,OAAO,CAAA,CACzBA,CACR,CACF,CAAA,CAEA,IAAO,CAAA,OAAA,CAAkC,MAAOZ,CAAW,EAAA,CACzD,GAAI,CACF,OAAO,MAAM,IAAA,CAAK,MAAO,CAAA,OAAA,CAAQA,CAAM,CACzC,CAAA,MAASY,CAAP,CAAA,CACA,WAAK,MAAO,CAAA,KAAA,CAAMA,CAAM,CAAA,OAAO,EACzBA,CACR,CACF,CAEA,CAAA,IAAA,CAAO,OAAgC,MAAOZ,CAAAA,EAAW,CACvD,GAAI,CACF,OAAO,MAAM,IAAK,CAAA,MAAA,CAAO,OAAOA,CAAM,CACxC,CAASY,MAAAA,CAAAA,CAAP,CACA,MAAK,IAAA,CAAA,MAAA,CAAO,KAAMA,CAAAA,CAAAA,CAAM,OAAO,CACzBA,CAAAA,CACR,CACF,CAAA,CAEA,KAAO,MAAgC,CAAA,MAAOZ,CAAW,EAAA,CACvD,GAAI,CACF,OAAO,MAAM,IAAA,CAAK,OAAO,MAAOA,CAAAA,CAAM,CACxC,CAASY,MAAAA,CAAAA,CAAP,CACA,MAAK,IAAA,CAAA,MAAA,CAAO,KAAMA,CAAAA,CAAAA,CAAM,OAAO,CACzBA,CAAAA,CACR,CACF,CAAA,CAEA,KAAO,MAAgC,CAAA,MAAOZ,CAAW,EAAA,CACvD,GAAI,CACF,OAAO,MAAM,IAAA,CAAK,OAAO,MAAOA,CAAAA,CAAM,CACxC,CAAA,MAASY,EAAP,CACA,MAAA,IAAA,CAAK,MAAO,CAAA,KAAA,CAAMA,EAAM,OAAO,CAAA,CACzBA,CACR,CACF,EAEA,IAAO,CAAA,OAAA,CAAkC,MAAUZ,CAAsC,EAAA,CACvF,GAAI,CACF,OAAO,MAAM,IAAA,CAAK,OAAO,OAAWA,CAAAA,CAAM,CAC5C,CAAA,MAASY,EAAP,CACA,MAAA,IAAA,CAAK,MAAO,CAAA,KAAA,CAAMA,EAAM,OAAO,CAAA,CACzBA,CACR,CACF,EAEA,IAAO,CAAA,OAAA,CAAkC,MAAOZ,CAAAA,EAAW,CACzD,GAAI,CACF,OAAO,MAAM,KAAK,MAAO,CAAA,OAAA,CAAQA,CAAM,CACzC,OAASY,CAAP,CAAA,CACA,WAAK,MAAO,CAAA,KAAA,CAAMA,EAAM,OAAO,CAAA,CACzBA,CACR,CACF,EAEA,IAAO,CAAA,IAAA,CAA4B,MAAOZ,CAAAA,EAAW,CACnD,GAAI,CACF,OAAO,MAAM,KAAK,MAAO,CAAA,IAAA,CAAKA,CAAM,CACtC,OAASY,CAAP,CAAA,CACA,MAAK,IAAA,CAAA,MAAA,CAAO,MAAMA,CAAM,CAAA,OAAO,CACzBA,CAAAA,CACR,CACF,CAEA,CAAA,IAAA,CAAO,IAA4B,CAAA,MAAOZ,GAAW,CACnD,GAAI,CACF,OAAO,MAAM,IAAK,CAAA,MAAA,CAAO,IAAKA,CAAAA,CAAM,CACtC,CAASY,MAAAA,CAAAA,CAAP,CACA,MAAA,IAAA,CAAK,OAAO,KAAMA,CAAAA,CAAAA,CAAM,OAAO,CAAA,CACzBA,CACR,CACF,CAAA,CAEA,IAAO,CAAA,UAAA,CAAwC,MAAOZ,CAAW,EAAA,CAC/D,GAAI,CACF,OAAO,MAAM,IAAA,CAAK,MAAO,CAAA,UAAA,CAAWA,CAAM,CAC5C,CAAA,MAASY,CAAP,CAAA,CACA,WAAK,MAAO,CAAA,KAAA,CAAMA,EAAM,OAAO,CAAA,CACzBA,CACR,CACF,CAAA,CAEA,IAAO,CAAA,IAAA,CAA6BZ,GAAW,CAC7C,GAAI,CACF,OAAO,KAAK,MAAO,CAAA,IAAA,CAAKA,CAAM,CAChC,OAASY,CAAP,CAAA,CACA,MAAK,IAAA,CAAA,MAAA,CAAO,MAAMA,CAAM,CAAA,OAAO,CACzBA,CAAAA,CACR,CACF,CAEA,CAAA,IAAA,CAAO,yBAAsE,CAAA,IAAM,CACjF,GAAI,CACF,OAAO,IAAA,CAAK,OAAO,yBAA0B,EAC/C,OAASA,CAAP,CAAA,CACA,WAAK,MAAO,CAAA,KAAA,CAAMA,CAAM,CAAA,OAAO,EACzBA,CACR,CACF,CAnKE,CAAA,IAAA,CAAK,MAAOsE,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,CAAAA,CAAM,CAAA,IAAA,GAAQ0E,oBAAoB,IAC9C,CAAA,IAAA,CAAK,QAAW1E,CAAAA,CAAAA,CAAAA,EAAA,YAAAA,CAAM,CAAA,QAAA,GAAY8E,oBAAe,EAAA,CAEjD,MAAMd,CACJ,CAAA,OAAOhE,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,CAAAA,EAAM,MAAW,CAAA,EAAA,WAAA,EAAe,OAAOA,CAAAA,EAAA,YAAAA,CAAM,CAAA,MAAA,CAAA,EAAW,SAC3DA,CAAK,CAAA,MAAA,CACL+E,YAAKC,8BAAwB,CAAA,CAAE,KAAOhF,CAAAA,CAAAA,CAAAA,EAAA,YAAAA,CAAM,CAAA,MAAA,GAAU0E,mBAAoB,CAAA,MAAO,CAAC,CAAC,CAAA,CAEzF,IAAK,CAAA,IAAA,CAAA,CAAO1E,GAAA,IAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAM,IAAQ,GAAA,IAAIiF,UAAKjF,CAAI,CAAA,CACvC,IAAK,CAAA,MAAA,CAASkF,2BAAoBlB,CAAQ,CAAA,IAAA,CAAK,IAAI,CAAA,CACnD,KAAK,OAAU,CAAA,IAAImB,OAAQ,CAAA,IAAA,CAAK,KAAM,IAAK,CAAA,MAAM,EACjD,IAAK,CAAA,QAAA,CAAW,IAAIC,QAAS,CAAA,IAAA,CAAK,IAAM,CAAA,IAAA,CAAK,MAAM,CACnD,CAAA,IAAA,CAAK,cAAiB,CAAA,IAAIC,eAAe,IAAK,CAAA,IAAA,CAAM,IAAK,CAAA,MAAM,EAC/D,IAAK,CAAA,MAAA,CAAS,IAAIC,MAAAA,CAAO,IAAI,EAC/B,CAxBA,aAAa,IAAA,CAAKtF,EAAgC,CAChD,MAAM1F,CAAS,CAAA,IAAIgK,aAAWtE,CAAI,CAAA,CAClC,OAAM1F,MAAAA,CAAAA,CAAO,YAENA,CAAAA,CACT,CAqBA,IAAI,OAAA,EAAU,CACZ,OAAOiL,uBAAAA,CAAiB,IAAK,CAAA,MAAM,CACrC,CAEA,IAAI,OAAU,EAAA,CACZ,OAAO,IAAK,CAAA,IAAA,CAAK,OAAQ,CAAA,QAC3B,CAiJA,MAAc,UAAA,EAAa,CACzB,IAAA,CAAK,OAAO,KAAM,CAAA,aAAa,CAC/B,CAAA,GAAI,CACF,MAAM,IAAA,CAAK,IAAK,CAAA,KAAA,GAChB,MAAM,IAAA,CAAK,OAAQ,CAAA,IAAA,GACnB,MAAM,IAAA,CAAK,SAAS,IAAK,EAAA,CACzB,MAAM,IAAK,CAAA,cAAA,CAAe,IAAK,EAAA,CAC/B,MAAM,IAAK,CAAA,MAAA,CAAO,IAAK,EAAA,CACvB,KAAK,IAAK,CAAA,MAAA,CAAO,IAAK,CAAA,CAAE,UAAW,IAAK,CAAA,QAAA,CAAS,SAAU,CAAC,EAC5D,IAAK,CAAA,MAAA,CAAO,IAAK,CAAA,mCAAmC,EACtD,CAAS7J,MAAAA,CAAAA,CAAP,CACA,MAAA,IAAA,CAAK,OAAO,IAAK,CAAA,mCAAmC,CACpD,CAAA,IAAA,CAAK,OAAO,KAAMA,CAAAA,CAAAA,CAAM,OAAO,CACzBA,CAAAA,CACR,CACF,CACF;;ACxNa,MAAA,YAAA,CAAeyJ,OACf,CAAA,UAAA,CAAaK;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}